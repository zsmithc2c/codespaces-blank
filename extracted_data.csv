Name,Problem 1,Problem 2,Problem 3,Problem 4
Yusuf Russell,"December Submission: Problem 1: Yusuf Russell


# Check if word is same forwards and backwards
# Use .upper to make sure uppercase letters are dealt with
# Add string to list to make use of reverse list function to make solution easier
def is_palindrome(string):
    #create two lists, one for original and one for reversed to check if both are the same in the end
    original = []
    reversed = []
    for character in string.upper():
        original.append(character)
        reversed.append(character)
    reversed.reverse()
    # Use sinple if statement to check if both lists are the same
    if original == reversed:
        return True
    else:
        return False

print(is_palindrome(""racecar""))","December Submission: Problem 2: Yusuf Russell


# Be able to check area of circle, rectangle, square, and triangle
# Use input and if statement to ask what shape
# If statement should lead to inputs asking dimensions which should be stored in variables and used in the equation to find the final area
# make sure selection is valid
def area_of_shapes():
    shape = 0
    while shape != 1 and shape != 2 and shape != 3 and shape !=4:
        shape = int(input(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of? 1: Circle, 2: rectangle, 3: Square, 4: Triangle ""))
    if shape == 1:
        rad = float(input(""What is the radius? ""))
        print(""The area of the circle is "" + str(rad*3.14))
    elif shape == 2:
        len = float(input(""What is the length: ""))
        width = float(input(""What is the width: ""))
        print(""The area of the rectangle is "" + str(len*width))
    elif shape == 3:
        len = float(input(""What is a side length: ""))
        print(""The area of the square is "" + str(len*len))
    elif shape == 4:
        base = float(input(""What is the base length: ""))
        height = float(input(""What is the height: ""))
        print(""The area of the triangle is "" + str(0.5*base*height))
    exit()
area_of_shapes()","December Submission: Problem 3: Yusuf Russell


#Make sure all characters in a string are unique
# Create a list where all unique characters will be stored
# List will be empty at first
# if list does not contain character being iterated, add it to list
# If it does, return False
#If all characters are unique, return True
def string_is_unique(string):
    characters = []
    for value in string:
        if not(value in characters):
            characters.append(value)
        else:
            return False
    return True

print(string_is_unique(input(""Enter a string: "")))","December Submission: Problem 4: Yusuf Russell


# Make user guess a randomly generated number
# Import random to be able to generate a random number
# Choose a random number to store in a variable
# Use a while loop to make the game keep going until correct number is guessed
# Use if statements to see if number is greater, less than, or equal to the number and tell the User
# Use try and except to make sure input is an integer
import random
def number_guessing_game():
    number = random.randrange(1,101)
    guess = 0
    while guess != number:
        try:
            guess = int(input(""Guess a number 1-100: ""))
        except ValueError:
            print(""Make sure you enter a number! Your guess will be replaced with 0"")
        if guess > number:
            print(""Your number is too high!"")
        if guess < number:
            print(""Your number is too low!"")
    print(""Congratulations! You guessed the number correctly!"")
    exit()

number_guessing_game()"
Ahmanii Peoples,"December Submission: Problem 1: Ahmanii Peoples


#Pseudocode for palindrome checker

#make a variable that allows user to input word of their choice

#create a function that checks if word is palindrome
    #create a for loop that itterates through each letter make it reverse
        #Create an if else loop that prints ""this is an palindrome"" if its the same reversed
        #If not, the print ""this is not an palindrome""

#_________

backwards = input(""Type in a word to see if it's a palindrome: "")

def palin_checker(word):
    if word == word[::-1]:
        print(f'{word} is a palindrome!!')
    else:
        print(f'{word} is not a palindrome')

palin_checker(backwards)","December Submission: Problem 2: Ahmanii Peoples




#task 
""""""
Create a program that says: ""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of?"" and then asks the user to type in the name of a shape (e.g., triangle, rectangle, square, circle).

Then, depending on which shape the user types, the program will ask for the relevant measurements:

If they choose circle, prompt for the radius.
If they choose rectangle, prompt for the length and width.
If they choose square, prompt for the side length.
If they choose triangle, prompt for the base and height.
Use the correct formula to calculate and return the area of the chosen shape.
""""""

#make a imput that says """"I can calculate the area of a shape for you. Which shape do you want me to calculate the area of?""""
#make 4 shapes (circle, rectangle, square, and triangle)

#create a definition that puts in whatever different shape
    #make and if else loop for each shape
    # if circle, (get radius, square it, and multiply by 3.14)
    # if square, (get side, the square it)
    # if rectangle, (get base and height, then mutliply them together)
    # if rectangle, (get the base and height, multiply them together, then divide them by 2)
    # print, the area of (insert shape here) is (area)

    #resource(s) used: https://www.w3schools.com/python/module_math.asp


________
shape = input(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of? make 4 shapes (circle, rectangle, square, and triangle): "")

def area_finder(x):
    if x == ""circle"":
        a = int(input(""Type in the radius: ""))
        circ_area = a*a*3.14
        print(f""The area of the circle is {circ_area}"")
    elif x == ""rectangle"":
        a = int(input(""Type in the width: ""))
        b = int(input(""Type in the height: ""))
        rec_area = a*b
        print(f""The area of the rectangle is {rec_area}"")
    elif x == ""square"":
        a = int(input(""Type in the side: ""))
        squ_area = a*a
        print(f""The area of the square is {squ_area}"")
    elif x == ""triangle"":
        a = int(input(""Type in the base: ""))
        b = int(input(""Type in the height: ""))
        c = a*b
        tri_area = c/2
        print(f""The area of the square is {tri_area}"")
    else:
        print(""Sorry, couldn't catch that, try again"")
        shape()

area_finder(shape)","December Submission: Problem 3: Ahmanii Peoples

Pseudocode 
__________

#make function 
#if it a string has no chars, make it unique
#make the string lowercase to avoid confusion
#create a list to store all unique characters
#use a for loop to itterate through every letter in the word
#if there are two or more letters that are the same, then print the false boolean
#If there isn't put it as a unique string, and make the boolean as true

#resource(s)https://www.w3schools.com/python/python_booleans.asp

__________
Code
_________

def has_unique_characters(s):
   
    if len(s) == 0:
        return True  
    
    s = s.lower()
    
    unique_chars = set()
    
    for char in s:
      
        if char in unique_chars:
            return False
        unique_chars.add(char)  
    
  
    return True

print(has_unique_characters(""abcdef"")) 
print(has_unique_characters(""hello""))  
print(has_unique_characters(""""))               
print(has_unique_characters(""abc ABC"")) 
print(has_unique_characters(""code2college""))","December Submission: Problem 4: Ahmanii Peoples

Pseudocode
_______

#generate a number between 1 - 100
#make the user guess a number between one and 100
#create a function that checks the answer
#use a while loop
    #if the number is higher than the guess
        #tell the user its too high, and try again
    #if the number is lower than the guess
        #tell the user its too low, and try again
    #if the user got it correct
        #tell the user you got it right!!!

#resource(s)https://www.geeksforgeeks.org/random-numbers-in-python/
           #https://www.geeksforgeeks.org/random-numbers-in-python/
_______
Code 
_______


import random
num = int(input(""Guess what number I chose: ""))

def number_guesser(x):
    guess = random.randint(1,100)
    while x != guess: 
        if x <= guess:
            print(""Sorry! That number is too low. Try aiming higher!"")
            x = int(input())
        elif x >= guess:
            print(""Sorry! That number is too high. Try aiming lower!"")
            x = int(input())
        #elif x == guess:
    print(f""Great job! The number is {guess}"")   
number_guesser(num)


_______"
Victoria	Owusu,"December Submission: Problem 1: Victoria	Owusu


punctuation_marks = set(""!\""#$%&'()*+,-./:;<=>?@[\\]^_`{|}~ "")
#set of punctuation marks to check for
def palindrome(s):
#palindromes are a word, phrase, or sequence that reads the same backward as forward
reverse = s[::-1]
#reversing the string using slicing
if (reverse == s):
#use if statement to check if the reverse of a string is equal
return True
elif any(char in punctuation_marks for char in s):
#goes through string to check if input is invalid
 print(""This word is invalid. Please try running the program again."")
else:
return False
#returns false if the reverse of the string isn't the same as the original string
string = input(""This is a palindrome checker. Please enter a word: "")

print(palindrome(string))","December Submission: Problem 2: Victoria	Owusu


while True:
shape = input(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of? "")
# The user needs input the shape of their preference and the dimensions of the shape. The program will output the area of the shape.
if (shape == ""circle""):
radius = int(input(""What is the radius? ""))
circle_area = radius * radius * 3.14
 print(f""The circle's area is {circle_area}."")
#finds area of circle
break
#stops program once area is found
elif (shape == ""rectangle""):
width = int(input(""What is the width? ""))
length = int(input(""What is the height? ""))
rectangle_area = width * length
 print(f""The rectangle's area is {rectangle_area}"")
#finds area of rectangle
break
#stops program once area is found
elif (shape == ""square""):
side_length = int(input(""What is the side length? ""))
square_area = side_length ** 2
#finds area of square
 print(f""The square's area is {square_area}."")
break
#stops program once area is found
elif (shape == ""triangle""):
base = int(input(""What is the base of the triangle? ""))
height = int(input(""What is the height of the triangle? ""))
triangle_area = (base * height)/2
#finds area of triangle
 print(f""The triangle's area is {triangle_area}."")
break
#stops program once area is found
else:
 print(""Please try again, your input is invalid."")","December Submission: Problem 3: Victoria	Owusu


invalid = set("" "")
def unique(s):
if "" "" in s:
 print(""Please run the program again. Your input is invalid."")
return False
#checks if input is valid
unique_list = []
#create empty list to append each unique character
#for loop to check each character, and if they have a character that is already on the unique list
for i in s:
if i in unique_list:
# if a single character is on the unique_list, then the string has repeated characters. Therefore, False must be returned.
return False
unique_list.append(i)
# add each unique character especially if it's not already on the list
return True

word = input(""This is a unique character checker. Please enter a word: "")
print(unique(word)) #expected: True","December Submission: Problem 4: Victoria	Owusu


import random
# Create a program that plays a guessing game with the user. The program will choose a random number between 1 and 100, and then ask the user to guess the number.

number = random.randint(1, 100)
#generates random number

guess = int(input(""Please guess the generated number from 1-100: ""))
#user starts guessing numbers from 1-100

while (number != guess):
if (guess > number):
 print(""Your guess is too high, try again."")
#let user know the guess is too high
elif (guess < number):
 print(""Your guess is too low, try again."")
#let user know the guess is too low
else: 
 print(""Your guess is invalid, try again."")
#let user know the guess is invalid
guess = int(input("" ""))
print(f""Correct! The generated number is {guess}!"")
#once user guesses the generated number, the loop is broken and the computer lets them know they've guessed the right answer."
apkumar879@gmail.com,"December Submission: Problem 1: apkumar879@gmail.com

# Palindrome Checker Program
# Step 1: Understand the problem# A palindrome reads the same forward and backward, ignoring spaces, punctuation, and capitalization.
# Step 2: Create a plan# 1. Normalize the input: Remove spaces, punctuation, and make it lowercase.# 2. Check if the normalized string is equal to its reverse.# 3. Handle edge cases like empty strings.
# Step 3: Algorithm implementationimport string
def is_palindrome(input_string):    """"""    Function to check if a given string is a palindrome.    Args:        input_string (str): The input string to check.    Returns:        str: Message stating whether the string is a palindrome.    """"""    # Normalize the string    # Remove spaces and punctuation, and convert to lowercase    normalized = ''.join(        char.lower() for char in input_string if char.isalnum()    )        # Check if the string is the same as its reverse    if normalized == normalized[::-1]:        return ""The string is a palindrome.""    else:        return ""The string is not a palindrome.""
# Step 4: Execute with examples# Example Inputsexamples = [""Racecar"", ""Hello"", ""A man, a plan, a canal: Panama"", """", ""12321"", ""12345""]
for example in examples:    print(f""Input: \""{example}\"""")    print(f""Output: {is_palindrome(example)}\n"")","December Submission: Problem 2: apkumar879@gmail.com

# Area Calculator Program
# Step 1: Understand the problem# The program calculates the area of a shape (circle, rectangle, square, or triangle) based on user input.
# Step 2: Create a plan# 1. Prompt the user to select a shape.# 2. Depending on the shape, ask for the relevant measurements.# 3. Use the appropriate formula to calculate the area.# 4. Return the result to the user.# 5. Handle invalid shape input gracefully.
import math
def calculate_area():    """"""    Function to calculate the area of a user-selected shape.    Returns:        str: Message containing the calculated area or an error message.    """"""    print(""I can calculate the area of a shape for you."")        # Step 3: Ask the user for the shape    shape = input(""Which shape do you want me to calculate the area of? (circle, rectangle, square, triangle): "").strip().lower()        # Step 4: Handle each shape and calculate the area    if shape == ""circle"":        try:            radius = float(input(""Enter the radius of the circle: ""))            if radius < 0:                return ""Invalid input: Radius cannot be negative.""            area = math.pi * (radius ** 2)            return f""The area of the circle is {area:.2f}.""        except ValueError:            return ""Invalid input: Please enter a numeric value for the radius.""        elif shape == ""rectangle"":        try:            length = float(input(""Enter the length of the rectangle: ""))            width = float(input(""Enter the width of the rectangle: ""))            if length < 0 or width < 0:                return ""Invalid input: Length and width cannot be negative.""            area = length * width            return f""The area of the rectangle is {area:.2f}.""        except ValueError:            return ""Invalid input: Please enter numeric values for the length and width.""        elif shape == ""square"":        try:            side = float(input(""Enter the side length of the square: ""))            if side < 0:                return ""Invalid input: Side length cannot be negative.""            area = side ** 2            return f""The area of the square is {area:.2f}.""        except ValueError:            return ""Invalid input: Please enter a numeric value for the side length.""        elif shape == ""triangle"":        try:            base = float(input(""Enter the base of the triangle: ""))            height = float(input(""Enter the height of the triangle: ""))            if base < 0 or height < 0:                return ""Invalid input: Base and height cannot be negative.""            area = 0.5 * base * height            return f""The area of the triangle is {area:.2f}.""        except ValueError:            return ""Invalid input: Please enter numeric values for the base and height.""        else:        return ""Invalid shape: Please enter one of the following - circle, rectangle, square, or triangle.""
# Step 5: Execute the functionif __name__ == ""__main__"":    print(calculate_area())","December Submission: Problem 3: apkumar879@gmail.com

# Unique Characters Checker Program
# Step 1: Understand the problem# Determine if a string has all unique characters. Return True if unique, False otherwise.
# Step 2: Create a plan# 1. Normalize the string if needed (e.g., remove spaces if they're not considered valid).# 2. Use a data structure to track characters we've seen so far.# 3. Iterate through the string:#    - If a character is repeated, do nothing#    - If a character is not seen before, add to the seen_before set.#    - Check the length of the set and the normalized variable#         - return False if len(set) < len(normalized)
def has_unique_characters(input_string):    """"""    Function to check if all characters in a string are unique.    Args:        input_string (str): The string to check.    Returns:        bool: True if all characters are unique, False otherwise.    """"""    # Normalize the input: Optionally remove spaces (if not considered as part of the string)    normalized = input_string.replace("" "", """")  # Remove spaces if they don't count        # Use a set to track characters    seen_characters = set()            # Iterate through the string    for char in normalized:        if char not in seen_characters:            seen_characters.add(char)  # Add character to the set    # The set will only have the elements 1 time, therefore, if the set has less chars than the original we know there are duplicates.    if len(seen_characters) < len(normalized):      return False #I did this to optimize the timeliness of this code, incase there is a lot of chars in your string    else:      return True
    return True  # All characters are unique","December Submission: Problem 4: apkumar879@gmail.com

# Number Guessing Game Program
# Step 1: Understand the problem# The program generates a random number between 1 and 100 and allows the user to guess until they find the correct number.
# Step 2: Create a plan# 1. Generate a random number between 1 and 100.# 2. Prompt the user to guess the number.# 3. Check if the guess is correct, too high, or too low.# 4. Provide feedback and allow the user to guess again.# 5. Handle invalid inputs gracefully.
import random
def number_guessing_game():    """"""    Function to play a number guessing game with the user.    """"""    # Generate a random number between 1 and 100    target_number = random.randint(1, 100)    print(""Welcome to the Number Guessing Game!"")    print(""I have chosen a number between 1 and 100. Can you guess it?"")        while True:        try:            # Prompt the user to guess            guess = int(input(""Enter your guess: ""))                        # Check if the guess is within the valid range            if guess < 1 or guess > 100:                print(""Invalid input: Please guess a number between 1 and 100."")                continue                        # Check the guess            if guess == target_number:                print(""Congratulations! You guessed the correct number!"")                break            elif guess > target_number:                print(""Too high! Try guessing a smaller number."")            else:                print(""Too low! Try guessing a larger number."")                except ValueError:            # Handle non-numeric input            print(""Invalid input: Please enter a valid number."")
# Step 4: Run the gameif __name__ == ""__main__"":    number_guessing_game()"
Sirisha Thapa,"December Submission: Problem 1: Sirisha Thapa

public class PalindromeChecker
{
    // Method to check if a string is a palindrome    public static String isPalindrome(String s)
     {
        // **Understand**: The task is to check if a string is a palindrome ignoring spaces, punctuation, and                       capitalization.
        // **Clues**:         - We can check if the string reads the same forwards and backwards.                // **Assemble**:         // Clean the string by removing all non-alphabet characters and converting it to uppercase.        StringBuilder cleanedString = new StringBuilder();                // Loop through the string and add only alphabet characters in uppercase to the cleaned string        for (int i = 0; i < s.length(); i++) {            char c = s.charAt(i);            if (Character.isLetterOrDigit(c)) {                cleanedString.append(Character.toUpperCase(c));            }        }                // **Solve**:        // Now that the string is cleaned, check if it is the same forwards and backwards.        String cleanedStr = cleanedString.toString();        String reversedStr = cleanedString.reverse().toString(); // Reverse the string                // Compare the cleaned string with its reverse        if (cleanedStr.equals(reversedStr)) {            return ""The string is a palindrome."";        } else {            return ""The string is not a palindrome."";        }
        // **Examine**:        // We need to make sure the solution works for different cases, including edge cases like empty strings,        // strings with only spaces, and strings with mixed punctuation.    }
    public static void main(String[] args) {        // Create a Scanner object to read input from the user        Scanner scanner = new Scanner(System.in);                // Ask the user for input        System.out.println(""Enter a string to check if it's a palindrome:"");
        // Read the user's input        String inputStr = scanner.nextLine();
        // Call the isPalindrome method and display the result        System.out.println(isPalindrome(inputStr));                // Close the scanner to avoid resource leak        scanner.close();    }}","December Submission: Problem 2: Sirisha Thapa

// File: ShapeAreaCalculator.java
public class ShapeAreaCalculator {
    public static void main(String[] args)     {
        // Create a scanner object to get input from the user        Scanner scanner = new Scanner(System.in);
        // Ask the user to choose a shape        System.out.print(""I can calculate the area of a shape for you."");        System.out.println(""Please type the shape you want to calculate the area of: circle, rectangle, square, or triangle"");
        // Read the user's choice of shape (convert it to lowercase to avoid case issues)        String shape = scanner.nextLine().toLowerCase();
        // Declare a variable to store the area of the shape        double area = 0;
        // Check which shape the user picked and calculate the area        if (shape.equals(""circle""))         {            // For a circle, ask for the radius            System.out.print(""Enter the radius of the circle: "");            double radius = scanner.nextDouble();            // Calculate the area of the circle (formula: π * radius^2)            area = Math.PI * radius * radius;  // Math.PI gives the value of π        }         else if (shape.equals(""rectangle""))         {            // For a rectangle, ask for the length and width            System.out.print(""Enter the length of the rectangle: "");            double length = scanner.nextDouble();            System.out.print(""Enter the width of the rectangle: "");            double width = scanner.nextDouble();            // Calculate the area of the rectangle (formula: length * width)            area = length * width;        }         else if (shape.equals(""square""))         {            // For a square, ask for the side length            System.out.print(""Enter the side length of the square: "");            double side = scanner.nextDouble();            // Calculate the area of the square (formula: side * side)            area = side * side;        }         else if (shape.equals(""triangle""))        {            // For a triangle, ask for the base and height            System.out.print(""Enter the base of the triangle: "");            double base = scanner.nextDouble();            System.out.print(""Enter the height of the triangle: "");            double height = scanner.nextDouble();            // Calculate the area of the triangle (formula: 0.5 * base * height)            area = 0.5 * base * height;        }         else         {            // If the shape is not recognized, show an error message            System.out.println(""Sorry, I don't know that shape. Please choose circle, rectangle, square, or triangle."");            scanner.close(); // Close the scanner            return; // End the program        }
        // Show the calculated area to the user        System.out.printf(""The area of the %s is: %.2f\n"", shape, area);
        // Close the scanner to avoid memory issues        scanner.close();    }}","December Submission: Problem 3: Sirisha Thapa

import java.util.Scanner; // This is to use Scanner for input
public class UniqueCharactersChecker {
    public static void main(String[] args)     {        // Step 1: Understand the problem        // We need to check if all characters in a string are different.         //If they are, return true, if not false.
        // Create a scanner object to read user input        Scanner scanner = new Scanner(System.in);
        // Ask the user for input        System.out.println(""Enter a string to check if all characters are unique:"");        String inputString = scanner.nextLine();
        // Step 2: Clues        // To solve this, we can use a simple method to check if any character repeats in the string.        // We can use an array or a set to keep track of characters we have already seen.
        // Step 3: Assemble the solution        boolean result = areCharactersUnique(inputString);
        // Step 4: Solve (call the function and print the result)        if (result) {            System.out.println(""All characters are unique."");        } else {            System.out.println(""The string has repeating characters."");        }
        // Close the scanner        scanner.close();    }
    // Function to check if all characters are unique in the given string    public static boolean areCharactersUnique(String str)     {        // Step 5: Examine the approach        // Use a simple method that checks each character in the string        // and sees if it repeats using an array or set.                // Using a boolean array to track seen characters (for ASCII characters)        boolean[] charSet = new boolean[256];  // There are 256 ASCII characters                // Loop through each character in the string        for (int i = 0; i < str.length(); i++)        {            char currentChar = str.charAt(i);  // Get the character at the current position
            // If the character has already been seen, return false            if (charSet[currentChar])            {                return false;            }
            // Mark the character as seen by setting its corresponding index to true            charSet[currentChar] = true;        }
        // If we went through the whole string without finding duplicates, return true        return true;    }","December Submission: Problem 4: Sirisha Thapa

import java.util.Scanner; // Import Scanner for user inputimport java.util.Random; // Import Random to generate a random number
public class GuessingGame {
    public static void main(String[] args) {        // Step 1: Understand the problem        // We need a guessing game where the program picks a random number between 1 and 100.        // The user guesses the number, and the program tells the user if their guess is too high or too low.     
        // Step 2: Clues        // To generate a random number, we need to use the Random class.        // We need to ask the user for their guess using Scanner.        // We need to compare the user's guess to the randomly chosen number.                // Randomly pick a number between 1 and 100        Random random = new Random();        int targetNumber = random.nextInt(100);  // Error: Random number between 0 and 99, we need 1 to 100        int guess = -1; // Initialize guess to an invalid number        int attempts = 0; // To keep track of how many guesses the user has made                // Step 3: Assemble the game loop        Scanner scanner = new Scanner(System.in);                System.out.println(""Welcome to the Guessing Game!"");        System.out.println(""I have chosen a number between 1 and 100. Try to guess it!"");                // Start the game loop where the player can keep guessing        while (guess != targetNumber) {            System.out.print(""Enter your guess: "");            guess = scanner.nextInt(); // Error: Does not handle invalid input (non-integer inputs)
            // Step 4: Solve - Compare the guess to the target number            if (guess == targetNumber) {                System.out.println(""Congratulations! You've guessed the correct number."");            } else if (guess > targetNumber) {                System.out.println(""Too high! Try again."");            } else {                System.out.println(""Too low! Try again."");            }            attempts++; // Keep track of the number of attempts        }
        // Step 5: Examine - Congratulate after correct guess and print the number of attempts        System.out.println(""It took you "" + attempts + "" attempts to guess the correct number."");                scanner.close(); // Close the scanner object    }}"
Gael Velazquez,"December Submission: Problem 1: Gael Velazquez

print(''Hello and welcome to the palindrome checker.'')
s = (""Put in a word, number, or phrase:  "")# This is were the user puts there input and we identify the input a the s which stands for sequence
palindrome = s[::-1]#Using slicing sequence syntax s[start:stop:step] lets me reverse the input by incrementing backwords thanks to the -1 in the step part
if( s == palindrome):
   print(""The string is a palindrome."")
else:
   print(""The string is not a palindrome."")
Source:
GeeksforGeeks.org : https://www.geeksforgeeks.org/python-program-check-string-palindrome-not/","December Submission: Problem 2: Gael Velazquez

print(""I can calculate the area of a shape for you."")
shape = input(""Which shape do you want me to calculate the are of? "")#We ask the user for the shape
if( shape == ""circle""):# checks if it is a circle
   radius = int(input(""What is the radius of the circle: ""))#Make the input radius in to a int
   squareValue = radius * radius#Square the radius
   answer = 3.14 * float(squareValue)#Converts the int squareValue to a decimal and multiply by the square root of pie
   print(""The area of the circle is "" +  answer)
elif(shape == ""rectangle""):
   length = int(input(""What is the length of the rectangle? ""))
   width = int(input(""What is the width of the rectangle? ""))
    answer = length * width
    print(""The area of the rectangle is "" + answer)
elif( shape == ""square""):
    sideLength = int(input(""What is the side length of the square? ""))
    answer = sideLength * sideLength
    print(""The area of the square is "" + answer)
elif( shape == ""triangle""):
   base = float(input(""What is the base of the triangle? ""))
   height = float(input(""What is the height of the triangle""))
   value = base * height
   answer = value / 2.0
   print(""The area of the triangle is "" + answer)
else:
 print(""Invalid put in either triangle,square,rectangle, or circle"")
shape = input(""Which shape do you want me to calculate the are of? "")","December Submission: Problem 3: Gael Velazquez



def all_unique_chars(s):
    return len(s) == len(set(s))  # Returns True if all characters are unique, False otherwise
 
# Get user inputuser_input = input(""Enter a string: "")
print(""The string has all unique characters: "" )
# Print the boolean resultprint(all_unique_chars(user_input))
#Sources: 
#https://www.geeksforgeeks.org/python-len-function/
#https://www.geeksforgeeks.org/sets-in-python/","December Submission: Problem 4: Gael Velazquez

import random # we use the random library for the game 
number = random.randint(1, 100)#It gives use a random int number between 1 to 100 for the guessing gameprint(""Guess a number between 1 and 100!"")
# Use a forever loop to guess the correct number and break from the loop until we get it right
while True:    guess = int(input(""Your guess: ""))    if guess < number:        print(""Too low!"")    elif guess > number:        print(""Too high!"")    else:        print(""You got it!"")        break"
Leo	Huynh,"December Submission: Problem 1: Leo	Huynh






# Create a program that checks whether a given string is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forwards and backwards (ignoring spaces, punctuation, and capitalization).

"""""" 
DEF isPalindrome(word):
    length = len(word)
    FOR each character in word:
        IF word[index] != word[-index]:
            return False
    return True

""""""

def isPalindrome(word):
    # remove spaces from the word
    newWord = word.strip()
    # Get length of the word in order to loop through each character
    length = len(newWord)
    
    # If no word then return false
    if length == 0:
        return False
    
    # Loop through half of the word
    for i in range(int(length/2)):
        # if the character is not equal to the character on the opposite side of the word, return false
        if newWord[i].lower() != newWord[-i - 1].lower():
            return False
    # Otherwise return true
    return True","December Submission: Problem 2: Leo	Huynh


""""""
Create a program that says: ""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of?"" and then asks the user to type in the name of a shape (e.g., triangle, rectangle, square, circle).

Then, depending on which shape the user types, the program will ask for the relevant measurements:

If they choose circle, prompt for the radius.
If they choose rectangle, prompt for the length and width.
If they choose square, prompt for the side length.
If they choose triangle, prompt for the base and height.
Use the correct formula to calculate and return the area of the chosen shape.

DEF caluclateShape():
    shape = input()
    IF invalid answer: retry function
    IF circle: ask measurements, return calculation
    IF rectangle: ask measurements, return calculation
    IF square: ask measurements, return calculation
    IF triangle: ask measurements, return calculation
""""""

import math

# Checks if input is a float
def checkValid(text):
    # If not a float, retry loop
    while True:
        try:
            measurement = float((input(text)).strip())
            return float(measurement)
        except ValueError:
            print(""Invalid answer. Try again"")

    

def calculateShape():
    # If shape is invalid, retry
    while True:
        shape = input(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of?: "").strip().lower()
        # Pi x Radius^2
        if shape == 'circle':
            radius = checkValid(""Please enter radius: "")
            return math.pi * radius**2
        # Length x Width
        elif shape == 'rectangle':
            length = checkValid(""Please enter length: "")
            width = checkValid(""Please enter width: "")
            return length * width
        # Length x Length
        elif shape == 'square':
            length = checkValid(""Please enter length: "")
            return length**2
        # 1/2 Base x Width
        elif shape == 'triangle':
            base = checkValid(""Please enter base: "")
            height = checkValid(""Please enter height: "")
            return base * height * .5
        else:
            print(""Invalid shape. Try again."")
print(calculateShape())","December Submission: Problem 3: Leo	Huynh


""""""
Create a function that determines whether all characters in a given string are unique. If the string has all unique characters, return True; otherwise, return False.

DEF isUnique(word):
    FOR letter in word:
        word.remove(letter)
        IF word.find(letter) == -1:
            RETURN FALSE
    RETURN TRUE

""""""

def isUnique(word):
    # split word into list to make it mutable
    listWord = list(word.strip().lower())
    
    for i in range(len(listWord)):
        char = listWord[0]
        # Remove the letter to check if there is another
        listWord.pop(0)
        print(listWord)
        if char in listWord:
            # return false if the letter is found
            return False
    # if no dupe, return true
    return True","December Submission: Problem 4: Leo	Huynh


""""""
Create a program that plays a guessing game with the user. The program will choose a random number between 1 and 100, and then ask the user to guess the number.

If the user guesses correctly, the program congratulates the player and ends the game.
If the user's guess is too high, the program tells them the answer is smaller and lets them guess again.
If the user's guess is too low, the program tells them the answer is larger and lets them guess again.

IMPORT random

DEF game():
    num = random.Randint(1, 100)
    WHILE True:
        INPUT guess number
        IF guess < num:
            PRINT answer is smaller
        ELIF guess > num:
            PRINT answer is bigger
        ELSE:
            PRINT correct
            break

WHILE true:

INPUT ask user if they want to play a game
IF yes:
    game()
ELSE:
    BREAK

""""""
# Import random to generate num from 1 to 100
import random

# Similar to problem two, I tried to break sanitization up into another function
def invalidAnswer(answer):
    # (I used f strings for problem 4 for the player to get a better response for their answer to try again)
    print(f""{answer} is not valid. Please enter an integer from 1 to 100."")

def game():
    # generate number from 1 to 100 for guessing
    num = random.randint(1, 100)
    
    # Create loop to try again
    while True: 
        try:
            guess = input(""Guess a number from 1 to 100: "")
            guess = int(guess)
            if guess < 1 or guess > 100:
                invalidAnswer(guess)
                continue
        except ValueError:
            invalidAnswer(guess)
            continue
        # if guess is smaller
        if guess > num:
            print(f""The number is smaller than {guess}."")
        # if guess is greater
        elif guess < num:
            print(f""The number is bigger than {guess}."")
        # if guess is correct, prompt player is they want to play again
        else:
            print(f""You got it correct, congratulations! The number was {guess}."")
            break
        
# Main game loop
while True:
    play = input(""Would you like to play a guessing game?: "").lower()
    
    if play == 'yes':
        game()
    elif play == 'no':
        
        break
    # if invalid answer
    else:
        print(""Please respond with 'yes' or 'no'."")"
Arsha	Sheikhi,"December Submission: Problem 1: Arsha	Sheikhi

#Create function to do the task of checking if a word is a palindromedef CheckWord(word):    #Create list to add letters into for checking     LetterList = []    for letter in word:        LetterList.append(letter)    #Create a list for the reversed letter to compare to the normal list    ReverseLetterList = []    #Add each letter from the normal list in reverse to the new list    for letter in reversed(LetterList):        ReverseLetterList.append(letter)    #Compare lists. If they are the same, then it is a palindrome    if LetterList == ReverseLetterList:        print(""The string is a palindrome."")    else:        print(""The string is not a palindrome."")
EnterWord = str(input(""Enter a word here: ""))CheckWord(EnterWord)","December Submission: Problem 2: Arsha	Sheikhi


#import math is needed to calculate pi accurately
import math
#function will determine the area of a shape based on the parameter for the shape
def AreaChecker(shape):
    #The circle will ask for the radius and derive the value from (pi*r^2) to get the area
    if shape == ""circle"":
        radius = int(input(""What is the radius?: ""))
        print(""Area: "" + str(math.pi * (radius ** 2)))
    #The rectangle will ask for the length and width and multiply the values to get the area
    elif shape == ""rectangle"":
        length = int(input(""What is the length?: ""))
        width = int(input(""What is the width?: ""))
        print(""Area: "" + str(length * width))
    #The square will ask for a length and square the value to derive the value of the area
    elif shape == ""square"":
        length = int(input(""What is the length?: ""))
        print(""Area: "" + str(length ** 2))
    #The triangle will ask for the base length and height to derive the value from (1/2 * base * height) to get the area
    elif shape == ""triangle"":
        BaseLength = int(input(""What is the base length?: ""))
        height = int(input(""What is the height?: ""))
        print(""Area: "" + str((1/2) * BaseLength * height))
    #Other shapes will not be calculated as a result
    else:
        print(""Cannot calculate this shape."")
        
#Asks for the shape to derive the value
EnterShape = str(input(""I can calculate the area of a shape for you.\nWhich shape do you want me to calculate the area of?: ""))
#Inputs the lowercase value of the text to remove dependence on case values
AreaChecker(EnterShape.lower())","December Submission: Problem 3: Arsha	Sheikhi


#Function to determine whether all characters (NOT LETTERS) are unique
def CheckUniqueLetters(word):
    #Create list to enter letters in later
    LetterList = []
    #As the loop goes through word, each character of word will be checked if it is in the list.
    #If not, add letter. If so, return False
    for character in word:
        if character not in LetterList:
            LetterList.append(character)
        else:
            return False
    #If it does not return False by loop completion, all characters are unique and will return True
    return True

#All characters will be made string
EnterWord = str(input(""Enter a word: ""))
#.lower() is not necessary since we are checking for unique characters and not unique letters
print(CheckUniqueLetters(EnterWord))","December Submission: Problem 4: Arsha	Sheikhi


#random will be imported so that the computer can generate a random number
#os will be used just to clear the screen and make the terminal cleaner
import random
import os

#When function is called, terminal will clear
def clear_terminal():
    os.system('cls' if os.name == 'nt' else 'clear')

def GuessIt():
    #Computer will generate random number 1 to 100
    CompGuess = random.randint(1,100)
    #Create value for your guess
    YourGuess = 0
    #Continues loop until you guess the number/both numbers match
    while YourGuess != CompGuess:
        #This loop will continue until the number is an int or float and within range of 1 to 100
        while True:
            #Tries executing code with input
            try:
                YourGuess = int(input(""Guess a number (1 to 100): ""))
                #If code is within range then loop will break
                if 1 <= YourGuess <= 100:
                    clear_terminal()
                    break
                #If not, it will prompt you to try again
                else:
                    clear_terminal()
                    print(""Not within range. Try another value."")
            #If the input is not an int or float, it will prompt you to try again
            except ValueError:
                clear_terminal()
                print(""Invalid Input. Try another value."")
        clear_terminal()
        #Compares the value of your guess and tells you to increase or decrease the value of your guess
        if YourGuess > CompGuess:
            print(""Guess a smaller number"")
        elif YourGuess < CompGuess:
            print(""Guess a larger number"")
        #Only happens when your guess matches the number. Remember: while loop breaks when both numbers match
        else:
            pass
    print(""You guessed it!"")

#Call function
GuessIt()"
Samir Simpson,"December Submission: Problem 1: Samir Simpson

string = input(""Enter a string to check if it's a palindrome: "")if string == string[::-1]:  print(f'""{string}"" is a palindrome.')else:  print(f'""{string}"" is not a palindrome.')","December Submission: Problem 2: Samir Simpson

print(""I can calculate the area of a shape for you! What shape would you like me to calculate the area of?"") shape = input(""I can calculate the area of a circle, square, rectangle or triangle: "") 
if shape == ""circle"":   radius= input(""What is the radius of the circle? "")   radius= int(radius)   area= 3.14 * radius * radius   print(""The area of the circle is "" + str(area)) elif shape == ""square"":   side= input(""What is the length of the side of the square? "")   side= int(side)   area= side * side   print(""The area of the square is "" + str(area)) elif shape == ""rectangle"":   length= input(""What is the length of the rectangle? "")   length= int(length)   width= input(""What is the width of the rectangle? "")   width= int(width)   area= length * width   print(""The area of the rectangle is "" + str(area)) elif shape == ""triangle"":   base= input(""What is the base of the triangle? "")   base= int(base)   height= input(""What is the height of the triangle? "")   height= int(height)   area= base * height / 2   print(""The area of the triangle is "" + str(area)) else:   print(""Sorry, I don't know how to calculate the area of that shape."")","December Submission: Problem 3: Samir Simpson

def machine(s: str) -> bool:  seen_characters = set()
  for char in s:      if char in seen_characters:          return False      seen_characters.add(char)
  return True
input_string = input(""Enter a string: "")print(machine(input_string))","December Submission: Problem 4: Samir Simpson

import random as r
def guessing_game():    number = r.randint(1, 100)    print(""This is the number guessing game!"")    print(""There is a number between 1 and 100. Can you guess what it is?"")        while True:          guess = int(input(""Enter your guess: ""))                      if guess < 1 or guess > 100:                print(""Please enter a number between 1 and 100."")          elif guess < number:                print(""Too low! Try again."")          elif guess > number:                print(""Too high! Try again."")          else:                print(f""Congratulations! You guessed it right. The number was {number}.  ”
guessing_game()"
Eden Asemlashe,"December Submission: Problem 1: Eden Asemlashe


#Practice 1

import re
# use regular expression to find all the words in the string

the_string = input('Enter a palindrome:')

# replace anything thats not a lowercase or # 
# make sure that string comparsion is case senstive
processed_string = re.sub(r'[^A-Za-z0-9]', '', the_string).lower()

# check if the string is equal to its reverse
if processed_string == processed_string[::-1]:
    print('The string is a palindrome')
else:
    print('The string is not a palindrome')","December Submission: Problem 2: Eden Asemlashe


#Practice 2

shape = (input(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of?""))

#conditional statement + forumla for area of shape
if shape == ""square"":
    side = int(input(""What is the length of one side?""))
    area = side * side
    print(""The area of the square is"", area)
elif shape == ""rectangle"":
    length = int(input(""What is the length?""))
    width = int(input(""What is the width?""))
    area = length * width
    print(""The area of the rectangle is"", area)
elif shape == ""circle"":
    radius = int(input(""What is the radius?""))
    area = 3.14 * radius * radius
    print(""The area of the circle is"", area)
elif shape == ""triangle"":
    base = int(input(""What is the base?""))
    height = int(input(""What is the height?""))
    area = 0.5 * base * height
    print(""The area of the triangle is"", area)
else:
    #error message
    print(""Sorry, I don't know how to calculate the area of that shape."")","December Submission: Problem 3: Eden Asemlashe


#Practice 3
#compare each character of the string with all the other characters
#in the string to check if it is unique or not. 

#Prompt the user to enter a string and store it in 'unique_string'
unique_string = (input(""Enter a string: ""))

# Prompt the user to enter a string and store it in 'unique_string'
def unique_char(unique_string):
    # Iterate over each character in the string using its index 'i'
    for i in range(len(unique_string)):
        # Iterate over each character in the string starting from the next character after 'i'
        for j in range(i + 1, len(unique_string)):
            # if a another character is found, return False
            if unique_string[i] == unique_string[j]:
                return False
    return True
if unique_char(unique_string):
    print(""True"")
else:
    print(""False"")","December Submission: Problem 4: Eden Asemlashe


#Practice 4

print('Hello!')
name = (input("" What is your Name?""))
print(name, ""We will play a Guessing Game!!"")   # intro
print(""I am thinking of a number between 1 and 100."")
print(""Try to guess my number."")
import random
number = random.randint(1,100)  # random number
guess = int(input(""Your guess? ""))
while guess != number:
    if guess < number: # if guess is too low
        print(""Your guess is too low, try again."")
        guess = int(input(""Your guess? ""))
    elif guess > number: # if guess is too high
        print(""Your guess is too high, try again."")
        guess = int(input(""Your guess? ""))
print(""Well guessed!"")"
Alyson	Hernandez,"December Submission: Problem 1: Alyson	Hernandez

## Source for reversing strings: https://www.w3schools.com/python/python_howto_reverse_string.asp
def cleanText(o):    # Get rid of any spaces within the string by replacing them with """"    a = o.replace("" "", """")        # Lowercases the entire string    b = a.lower()        # Goes through the string and replaces any punctuation with """"    for punctuation in ',.?_!;""-':        b = b.replace(punctuation, """")            return b    def isPalindrome(text):    # Reversed the string by using slicing    return text == text[::-1]
# Returns if string is palindrome or notdef palindromeAns(ans):    if ans:        print(""The string is a palindrome."")    else:        print(""The string is not a palindrome."")
#Case 1o = ""Racecar""new = cleanText(o)ans = isPalindrome(new)palindromeAns(ans)
#Case 2o = ""Taco cat""new = cleanText(o)ans = isPalindrome(new)palindromeAns(ans)
#Case 2o = ""Ka_yak!""new = cleanText(o)ans = isPalindrome(new)palindromeAns(ans)","December Submission: Problem 2: Alyson	Hernandez

import math# Math module to use pi for the area of a circle
print(""I can calculate the area of a shape for you. "")userShape = input(""Which shape do you want me to calculate the area of?: "")
if userShape == ""circle"".lower():    # You will see this try-except pattern for all of the functions. It catches if the user doesn't input a valid integer.    while True:        try:            radius = int(input(""What is the radius?: ""))            break  # Exit the loop if input is a valid integer        except ValueError:            print(""Please type only integers."")        area = math.pi * radius**2        print(""Area:"", area)    elif userShape == ""rectangle"".lower():    while True:        try:            length = int(input(""What is the length?: ""))            width = int(input(""What is the width?: ""))            break         except ValueError:            print(""Please type only integers."")                area = length * width        print(""Area:"", area)    elif userShape == ""square"".lower():    while True:        try:            length = int(input(""What is the length?: ""))            break          except ValueError:            print(""Please type only integers."")
    area = length ** 2        print(""Area:"", area)    elif userShape == ""triangle"".lower():    while True:        try:            base = int(input(""What is the base?: ""))            height = int(input(""What is the height?: ""))                break         except ValueError:            print(""Please type only integers."")        area = (base * height)/2        print(""Area:"", area)    else:    print(""Not a valid shape."")","December Submission: Problem 3: Alyson	Hernandez

def is_unique(string):        # Removes any spaces and lowercases the string    new = string.replace("" "", """").lower()        # Main part of this line is the ""set(string)""    #   set(string) removes and duplicate characters, and then it's length is set equal to the length of the original string    return len(set(new)) == len(new)    #Case 1print(is_unique(""abcdef"")) 
#Case 2print(is_unique(""hello"")) 
#Case 3print(is_unique(""Sub dermatoglyphic""))","December Submission: Problem 4: Alyson	Hernandez

import random
number = random.randint(1, 100)
print(""I'm thinking of a random number between 1 and 100.."")
# Case if user tries to input something that wasn't an integerwhile True:    try:        userGuess = int(input(""What number is it?: ""))        break  # Exit the loop if input is a valid integer    except ValueError:        print(""Please type only integers."")        userCorrect = Falsewhile not userCorrect:    # Case if user goes outside of range    if userGuess < 1 or userGuess > 100:        print(""Try staying within the range of 1 and 100!"")        elif userGuess < number:        print(""Too low!"")            elif userGuess > number:        print(""Too high!"")            elif userGuess == number:        print(""You got it!"")        userCorrect = True        break        # Case if user tries to input something that wasn't an integer    while True:        try:            userGuess = int(input(""What number is it?: ""))            break          except ValueError:            print(""Please type only integers."")"
Yasemine,"December Submission: Problem 1: Yasemine

//We need to get a word from the user, check if it is the same word when reversed and if it is output that it is a palindrome and if not output that it isn't
import java.util.Scanner;
public class PalindromeChecker {        public static void main(String[] args) {        // Create a Scanner to take an input word        Scanner scanner = new Scanner(System.in);                // Ask the user for input        System.out.print(""Enter a string: "");        String input = scanner.nextLine();                // Call the method to check if the string is a palindrome        if (isPalindrome(input)) {            System.out.println(""The string is a palindrome."");        } else {            System.out.println(""The string is not a palindrome."");        }    }        // Method to check if the string is a palindrome    public static boolean isPalindrome(String str)         //Check if the string is the same forwards and backwards        int left = 0; // Beginning of the string        int right = input.length() - 1; // End of the string                // Compare characters from both ends till reaching the middle        while (left < right) {            if (input.charAt(left) != input.charAt(right)) {                return false; // If characters don't match, it's not a palindrome            }            left++; // Move the left towards the center            right--; // Move the right towards the center        }                // If all characters matched, the string is a palindrome        return true;    }}","December Submission: Problem 2: Yasemine

import java.util.Scanner;
public class ShapeCalculator {
    public static void main(String[] args) {        Scanner scanner = new Scanner(System.in); 
        // Ask for the shape        System.out.println(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of?"");        System.out.println(""Type in the name of the shape, options: circle, rectangle, square, triangle"");                // take the input from the user        String shape = scanner.nextLine().trim().toLowerCase();  // Standardize input to lowercase
        // Process the input based on the shape        switch (shape) { // using a switch statement to make it easy for it to find the next question to ask (didn't use a if statement because this is cooler and I wanted to try it)            case ""circle"":                // circle, ask for the radius                System.out.print(""Please enter the radius of the circle: "");                double radius = getPosDInput(scanner);                double circleArea = Math.PI * Math.pow(radius, 2);                System.out.printf(""The area of the circle is: "", circleArea);                break; //ends the case so you can move to the next one                            case ""rectangle"":                // rectangle, ask for the length and width                System.out.print(""Please enter the length of the rectangle: "");                double length = getPosDInput(scanner);                System.out.print(""Please enter the width of the rectangle: "");                double width = getPosDInput(scanner);                double rectangleArea = length * width;                System.out.printf(""The area of the rectangle is: "", rectangleArea);                break;                            case ""square"":                // square, ask for the side length                System.out.print(""Please enter the side length of the square: "");                double side = getPosDInput(scanner);                double squareArea = Math.pow(side, 2);                System.out.printf(""The area of the square is: "", squareArea);                break;                            case ""triangle"":                // triangle, ask for the base and height                System.out.print(""Please enter the base of the triangle: "");                double base = getPosDInput(scanner);                System.out.print(""Please enter the height of the triangle: "");                double height = getPosDInput(scanner);                double triangleArea = 0.5 * base * height;                System.out.printf(""The area of the triangle is: "", triangleArea);                break;                            default:                // If the user types something else in                System.out.println(""Invalid shape. Please choose one of the following: circle, rectangle, square, triangle."");        }    }
    // Method to check user input is a positive double number    private static double getPosDInput(Scanner scanner) {        while (true) {            if (scanner.hasNextDouble()) {                double input = scanner.nextDouble();                if (input > 0) { //if it is positive then it is good if not then we prompt for a pos number until they input one                    return input;                } else {                    System.out.println(""Please enter a positive number."");                }            } else {                System.out.println(""Invalid input. Please enter a valid number."");            }            scanner.nextLine();  // get the correct value        }    }}","December Submission: Problem 3: Yasemine

//Note; I already had this code done before so I looked at if while I was writing this one so I don't mess up using the HashSet
import java.util.HashSet;
public class UniqueCharacters {
    // Function to determine if all characters in the string are unique    public static boolean areCharactersUnique(String input) {        // If the input string is empty, return True (since there are no characters to be duplicate)        if (input == null || input.isEmpty()) {            return true;        }
        // Create a set to store characters we've already encountered        HashSet<Character> seenCharacters = new HashSet<>();
        // Loop through each character in the string        for (int i = 0; i < input.length(); i++) {            char currentChar = input.charAt(i);
            // If the character is already in the set, it means it's a duplicate            if (seenCharacters.contains(currentChar)) {                return false;  // Found a duplicate            }
            // Add the current character to the set            seenCharacters.add(currentChar);        }
        // If we loop through the entire string without finding duplicates, return true        return true;}","December Submission: Problem 4: Yasemine

import java.util.Scanner;  // Import Scanner class for user inputimport java.util.Random;   // Import Random class to generate random numbers
public class GuessingGame {
    public static void main(String[] args) {        // Start the game        Random random = new Random();          int secretNumber = random.nextInt(100) + 1;  // gives a random number between 1 and 100        int userGuess = 0;  // Initialize user's guess
        // read user input        Scanner scanner = new Scanner(System.in);
        // Start the game        System.out.println(""Welcome to the Number Guessing Game!"");        System.out.println(""I have selected a random number between 1 and 100."");        System.out.println(""Try to guess it!"");
        // continue until user guesses correctly        while (userGuess != secretNumber) {            System.out.print(""Enter your guess: "");            // Check if the user input is a valid integer            if (scanner.hasNextInt()) {                userGuess = scanner.nextInt();  // Read the user's guess
                // out of range numbers                if (userGuess < 1 || userGuess > 100) {                    System.out.println(""Please enter a number between 1 and 100."");                } else {                    // give hints                    if (userGuess < secretNumber) {                        System.out.println(""Too low! Try a higher number."");                    } else if (userGuess > secretNumber) {                        System.out.println(""Too high! Try a lower number."");                    } else {                        System.out.println(""Congratulations! You guessed the correct number!"");                    }                }            } else {                // if user doesn't enter a int                System.out.println(""Invalid input! Please enter a valid integer."");                scanner.next();             }        }    }}"
Elston Su,"December Submission: Problem 1: Elston Su

def is_palindrome(s): 
cleaned_string = ''.join(char.lower() for char in s if char.isalnum()) 
if cleaned_string == cleaned_string[::-1]: 
       return ""The string is a palindrome."" 
else: 
  return ""The string is not a palindrome.""","December Submission: Problem 2: Elston Su

import math
def calculate_area(): 
shape = input(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of?"") 
if shape == ""circle"": 
radius = float(input(""Please enter the radius of the circle: "")) 
area = math.pi * radius * radius 
print(f""The area of the circle is {area:.2f}"") 
elif shape == ""rectangle"": 
length = float(input(""Please enter the length of the rectangle: "")) 
width = float(input(""Please enter the width of the rectangle: "")) 
area = length * width 
print(f""The area of the rectangle is {area:.2f}"") 
elif shape == ""square"": 
side = float(input(""Please enter the side length of the square: ""))
 area = side * side 
print(f""The area of the square is {area:.2f}"") 
elif shape == ""triangle"": 
base = float(input(""Please enter the base of the triangle: "")) 
height = float(input(""Please enter the height of the triangle: "")) 
area = 0.5 * base * height 
print(f""The area of the triangle is {area:.2f}"") 
else: 
print(""Invalid shape. Please enter one of the following: triangle, rectangle, square, circle."")","December Submission: Problem 3: Elston Su

def has_unique_characters(s): 
     seen_characters = set() 
     for char in s: 
          if char in seen_characters: 
               return False 
               seen_characters.add(char) 
 
     return True","December Submission: Problem 4: Elston Su

import random 
 
def guessing_game(): 
     number = random.randint(1, 100) 
     guess = None 
     while user_guess != number_to_guess: 
          try: 
               guess = int(input(""Guess a number between 1 and 100: "")) 
               if guess > number: 
                    print(""Too high! Try again."") 
               elif guess < number: 
                    print(""Too low! Try again."") 
               elif guess = number: 
                    print(""Congratulations! You guessed the correct number."") 
               else:
                    print(""Invalid input. Please enter a valid number between 1 and 100."")"
Maya Villa,"December Submission: Problem 1: Maya Villa


#UCASE
# U - I need to check if a string is a palindrome, which means that whatever the phrase is
#  must be read the same forwards and backwards
# Input: a string
# Output: Either yes or no that it is a palindrome
# Edge cases? It must ignore spaces, punctuation, and capitalization

# C - input and string methods need to be used. == to check if two strings are equivalent.

# A and S

# inputs for testing
input1 = ""tacocat""
input2 = ""racecar""
input3 = ""rac,e Car"" # input for the test
input4 = ""hello there""

# needed to get rid of capitalization, spaces, and puntucation since palindromes ignore that but the program will not
def fixEdgeCases(input):
    input = input.lower() # make all characters lowercase for simplicity
    string_list = [] # need all the characters spaced out
    for character in input:
        string_list.append(character) # all characters are now in a list
    for character in string_list: # gets rid of the other two edge cases
        if character == ""."" or character == ""?"" or character == ""!"" or character == "","": # punctuation I chose to omit, more can be added
            string_list.remove(character)
        if character == "" "": # spaces
            string_list.remove(character)
    return string_list # returns the list of all the characters but without spaces and punctuation

# reverses a list input and returns the reversed list as a string
def reverseString(string_list):
    string_list.reverse() # reverse the characters
    newString = """".join(string_list) # create a new string
    return newString

# a function to determine if an input is a palindrome
def isPalindrome(original_string): #takes in string input
    string_list = fixEdgeCases(original_string)
    original_string = """".join(string_list)
    reversed_string = reverseString(string_list) # creates a reversed string
    if reversed_string == original_string: # check if they are equalivalent
        print(""The string is a palindrome."") # True!
    else:
        print(""The string is not a palindrome."") # False!

isPalindrome(input4)

# E - Yes, we can check the result using the test cases I made above. I believe it can be understood at the glance, especially with the comments.
# I think the performance could be optimized by using different data types at different moments, but I don't know which ones are more efficient.","December Submission: Problem 2: Maya Villa


#UCASE
# U - Make a calculator that provides the area of the shape the user wants.
# Inputs - User types in name of a shape, user provides the appropriate dimensions for the shape to get the area
# Output - prompts user for approrpiate dimensions, outputs the area of the shape
# Edge Cases - input errors with inappropriate characters, impossible dimensions (zero: 0 times another number, negative numbers)
# Clarifying questions: Does it want integers or doubles? I will assume only integers for this example

# C - need inputs (string and integer), if statements to determine which function to use, math operations (Pi)

# need to import the math library to get access to pi
import math

# A and S
shape = input(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of? "") # prompt user for kind of shape
# below all the shape functions is the function for determining which shape function to use to get the right dimensions
# for all inputs asking for an integer, there is a try and except case to catch errors, specifically if the user enters something that isn't a number
# all inputs also raise an exception if the input is below zero
# example shown on circle since other formula functions are the same

# circle
def area_of_circle():
    attempt = True # goes into a loop to check for exceptions or edge cases that are mentioned above
    while attempt:
        try:
            radius = int(input(""What is the radius? ""))
            if radius < 0: # this raises an exception if the value is a number, but it is below zero
                raise Exception
            attempt = False # ends the loop if there are no more exceptions
        except:
            print(""That is not a valid input. Try again."")
            attempt = True # goes back into the loop to try again
    area = math.pi * pow(radius, 2) # calculates the area
    print(""Area: "") 
    return area # return area

# rectangle
def area_of_rect():
    attempt = True
    while attempt:
        try:
            length = int(input(""What is the length? ""))
            width = int(input(""What is the width? ""))
            if length < 0 or width < 0:
                raise Exception
            attempt = False
        except:
            print(""One of your inputs is invalid. Try again."")
            attempt = True
    area = length * width
    print(""Area: "")
    return area

# square
def area_of_square():
    attempt = True
    while attempt:
        try:
            side = int(input(""What is the side length? ""))
            if side < 0:
                raise Exception
            attempt = False
        except:
            print(""That is not a valid input. Try again."")
            attempt = True
    area = pow(side, 2)
    print(""Area: "")
    return area

# triangle
def area_of_triangle():
    attempt = True
    while attempt:
        try:
            base = int(input(""What is the base? ""))
            height = int(input(""What is the height? ""))
            if base < 0 or height < 0:
                raise Exception
            attempt = False
        except:
            print(""One of your inputs is invalid. Try again."")
            attempt = True
    area = (base * height)/2 # will sometimes be a double
    print(""Area: "")
    return area

# determines what kind of shape it is and what dimensions are needed, if it does not match, say it is an invalid input
def shapes(input):
    if input == ""circle"":
        print(area_of_circle())
    elif input == ""rectangle"":
        print(area_of_rect())
    elif input == ""square"":
        print(area_of_square())
    elif input == ""triangle"":
        print(area_of_triangle())
    else:
        print(""That is an invalid input! Please enter a valid input."") # user will need to restart program to input again

shapes(shape) # testing

# E - Yes, we can check the result. It is more or less understood at a glance. Once you are familiar with the structure of one formula function,
# you will know how the rest of them work. The performance can be improved with combining the rectangle and square functions since they are 
# similar operations. Performance could also be improved by moving the try and excepts or redoing them entirely, but I am not sure how to do this
# or what the potential benefits would be.","December Submission: Problem 3: Maya Villa


#UCASE
# U - Given a string, determine if all the characters are unique or not.
# Inputs - a string
# Outputs - True or False if the characters in the string are unique or not
# Edge Cases - Capital letters. I will make the string lowercase at first.
# Clarifying Questions - Is a space considered a character? I will omit them in my testing. I will also assume that there is no punctuation in the strings
# Update: I reread the instructions and I am supposed to consider them as an edge case as well as empty strings

# C - I am going to be looking at the string so I will need string methods. I need to compare letters to one another to determine if they are
# unique so I need to iterate through something and use comparison operators. I will need to return a true or false at the end.

# A and S

# given a string, I might want to separate all the characters, into a list
string1 = ""abcdefg""
string2 = ""hello""
string3 = ""youarecool""
string4 = ""silent""
string5 = """"
string6 = ""a b cde fg""

def unique_character(input):
    if len(input) == 0:
        return False
    string_list = []
    for character in input:
        if character != "" "":
            string_list.append(character) # converts the string into a list
    # then I will take each character and compare it to all other characters
    for i in range(len(string_list)):
        comparison_char = string_list[i]
        string_list.pop(i) # I need to take out this character to make comparison easier while not accidentally comparing this character with itself
        for char in string_list:
    #   if it matches with another character, then return false
            if char == comparison_char:
                return False
        string_list.insert(i, comparison_char) # you need to add this character back so the original string doesn't get small and produce an error
    #   if it does NOT match with any other character then keep going onto the other characters
    # if we make it through all the characters, meaning none of the characters match with each other, then return true
    return True

print(unique_character(string1))
print(unique_character(string2))
print(unique_character(string3))
print(unique_character(string4))
print(unique_character(string5))
print(unique_character(string6))

# E - Yes, we can check the results using the tests I made. We can understand it at a glance thanks to the comments and the naming conventions of
# all the variables involved. The solution could be improved with another string or list method. For example, you could identify each character in
# the string and count how many times it repeats. If the number returned is more than one, then return false.","December Submission: Problem 4: Maya Villa


#UCASE
# U - Create a program that will choose a number between 1 and 100 and ask the user to guess. The user will be able to guess again with a hint
# pointing them in the right direction if they do not get it right the first time.
# Inputs - an integer from the user for each turn they guess
# Outputs - confirmation of the user's answer either by saying they are correct or giving them a hint to guess again
# Edge Cases - Invalid input (not a number and negative integer). Another invalid input could be a decimal. I will consider an input above 100
# to also be invalid
# Clarifying Questions - are the 1 and 100 inclusive? I will assume so. Does the user only get two guesses? I will assume not for this example.

# C - Will need the random method so I need to import random. I will also need comparison operators to read the user input and provide a helpful
# hint. I will need to deal with user input as well as trys and exceptions for the edge cases.

# A and S
import random
#I need to introduce the program to the user first
print(""Hello! I am going to guess a random number between 1 and 100"")
# I need generate the random number
random_num = int(random.random() * 100 + 1) # This should return any integer between 1 and 100 inclusive...
#print(random_num)
#then I need to ask for input but account for the different errors that can arrise
guess = 0
while guess != random_num: # the program will keep going until the user gets the right number
    attempt = True
    while attempt:
        try:
            guess = int(input(""Please guess the number! ""))
            attempt = False
            if guess < 0 or guess > 100: # this is the error if the number is below or above the bounds
                raise Exception
        except:
            print(""That is not a valid input. Try again."")
            attempt = True
    # then I need to check the user input for all the cases by comparing the random number and the user's guesses
    if random_num == guess:
        print(""Congrats! You guessed the number!"")
    elif random_num > guess:
        print(""The correct number is larger than your guess. Try again!"")
    elif random_num < guess:
        print(""The correct number is smaller than your guess. Try again!"")
    # after this, the program will go back and give the user more chances to get the right number until they do!

# E - Yes, we can check the result if we uncomment the line that says ""print(random_num)"" so that we can see if the hints and guesses are
# accurate to what is happening in the program. I believe we cna understand the program at a glance thanks to the comments and the naming
# conventions of all the variables. I believe the performance of the solution could be improved with a different try and except case."
Kassidy Jeanbart,"December Submission: Problem 1: Kassidy Jeanbart

https://legendary-succotash-q7pvvqr96wqxfxx9r.github.dev/","December Submission: Problem 2: Kassidy Jeanbart

https://legendary-succotash-q7pvvqr96wqxfxx9r.github.dev/","December Submission: Problem 3: Kassidy Jeanbart

https://legendary-succotash-q7pvvqr96wqxfxx9r.github.dev/","December Submission: Problem 4: Kassidy Jeanbart

https://legendary-succotash-q7pvvqr96wqxfxx9r.github.dev/"
Yadnya Patil,"December Submission: Problem 1: Yadnya Patil

I started by understanding that a palindrome is a word that reads the same forward and backward. To check if the string is a palindrome, I reversed it by looping through each character and then compared the original string with the reversed one. If they were the same, I said it’s a palindrome; otherwise, it’s not. But I couldn’t find a way to ignore the punctuation, capitalization and spaces in the string. Currently the program only works if the string has lowercase letters, numbers, or any other characters, and without spaces.
def palindrome(string):    // Start with an empty string to build the reversed version    reversed = """"    // Loop through each character in the original string and add it to the front of the reversed string    for char in string:        reversed = char + reversed    // Check if the original string is the same as the reversed one    return string == reversed// Ask the user to input a stringinput = input(""Enter a string: "")if palindrome(input):    print(""It's a palindrome."")else:    print(""It's not a palindrome."")","December Submission: Problem 2: Yadnya Patil

For this problem, I first understood that I needed to create a program where the user selects a shape, and the program calculates the area based on the given measurements. I considered 4 shapes (circle, rectangle, square, triangle) and made sure the user could only choose from these options. I used if-elif statements to handle the corresponding area calculation. I also validated inputs, ensuring the measurements were positive numbers. This program provides feedback if the user enters an invalid shape or a negative number.
import math
def main():    print(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of?"")    // Ask the user to enter the shape they want to calculate the area for    shape = input(""Enter a shape (circle, rectangle, square, triangle): "")    // If the user selects circle    if shape == ""circle"":        // Ask for the radius        radius= input(""Enter the radius of the circle: "")        radius = float(radius)        if radius > 0:            area = math.pi * radius ** 2            print(""The area of the circle is "" + str(area))        else:            // The only invalid input for this would be negative numbers and zero so here the user is asked to enter a positive number            print(""Please enter a positive number for the radius."")
// Similarly for other shapes
    elif shape == ""rectangle"":        length = input(""Enter the length of the rectangle: "")        width = input(""Enter the width of the rectangle: "")        length = float(length)        width = float(width)        if length > 0 and width > 0:            area = length * width            print(""The area of the rectangle is "" + str(area))        else:            print(""Please enter positive numbers for length and width."")
    elif shape == ""square"":        side = input(""Enter the side length of the square: "")        side = float(side)        if side > 0:            area = side ** 2            print(""The area of the square is "" + str(area))        else:            print(""Please enter a positive number for the side length."")
    elif shape == ""triangle"":        base = input(""Enter the base of the triangle: "")        height = input(""Enter the height of the triangle: "")        base = float(base)        height = float(height)        if base > 0 and height > 0:            area = 0.5 * base * height            print(""The area of the triangle is "" + str(area))        else:            print(""Please enter positive numbers for the base and height."")// if the user enters a shape that is not listed this will be printed    else:        print(""Sorry, I don't recognize that shape."")
if __name__ == ""__main__"":    main()","December Submission: Problem 3: Yadnya Patil

//In this program, I understand that the goal is to check if all characters in a string are unique. I used 2 loops ( one within another) to compare each character with every other character in the string. If a match is found, the function returns `False`; otherwise, it returns `True`. The program works well for basic cases, but it doesn't handle case sensitivity. For example, it considers 'L' and 'l' as different characters, though I’m not sure if they should be treated the same. 
def unique_characters(string):    for i in range(len(string)):        for j in range(i + 1, len(string)):            if string[i] == string[j]:                return False    return True
input = input(""Enter a string to check if it has unique characters: "")
print(unique_characters(input))","December Submission: Problem 4: Yadnya Patil

I started by thinking about how the game should work, where the program randomly picks a number between 1 and 100, and the player guesses it. Based on this, I realized that I’d need a loop to keep asking the player for guesses and conditionals to give feedback on whether the guess was too high or too low. I then wrote the steps out : generate the random number, get the player’s guess, compare it, and repeat until the player guesses correctly. Then I translated these steps into code. I think the game could be improved by adding a method to handle invalid inputs. 
import random
def number_guessing_game():// Choose a random number within a given range    secret_number = random.randint(1, 100)
    while True:        guess = input(""Guess a number between 1 and 100: "")                //Convert input to integer        guess = int(guess)                  //Compare the guess with the secret number and let the user know it        if guess < secret_number:            print(""Too low! Try again."")        elif guess > secret_number:            print(""Too high! Try again."")        // when the user gets the guess correct congratulate them        else:            print(""Congratulations! You guessed it!"")            break
number_guessing_game()"
Reeddhiman Pradhan,"December Submission: Problem 1: Reeddhiman Pradhan

# Ask user for a wordword = input(""Enter a word: "")
# Create a new variable that reverses the wordreversed_word = """"
""""""In each iteration (using a for loop), the current character (char) is added to the front of reversed_word""""""for char in word:    reversed_word = char + reversed_word    if reversed_word.lower() == word.lower(): # Ensures both words are in the same format    print(""The string is a palindrome."")
elif word == """": # If word is an empty string    print(""Please type in a word."")
elif word == ""?"" or word == ""."" or word == "";"" or word == "":"" or word == ""!"": # If word has punctuation    print(""This is not a word."") 
else: # If word does not match reversed_word    print(""The string is not a palindrome."")","December Submission: Problem 2: Reeddhiman Pradhan

# Import Math classimport math 
# Create the variable pi for the circle areapi = math.pi
# Ask user for the shape they want program to calculateshape = input(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of? "")
# If user chooses circle, prompt for the radiusif shape.lower() == ""circle"":    radius = int(input(""Enter the radius of the circle: ""))    area = pi * (radius ** 2) # Area of circle = pi * r^2    print(""The area of the circle is: "" + str(area))
# If user chooses rectangle, prompt for the length and widthelif shape.lower() == ""rectangle"":    length = int(input(""Enter the length of the rectangle: ""))    width = int(input(""Enter the width of the rectangle: ""))    area = length * width # Area of rectangle = l * w    print(""The area of the rectangle is: "" + str(area))    # If user chooses square, prompt for the side lengthelif shape.lower() == ""square"":    side_length = int(input(""Enter the length of the side of the square: ""))    area = side_length ** 2 # Area of a square = s^2    print(""The area of the square is: "" + str(area))    # If user chooses triangle, prompt for the base and heightelif shape.lower() == ""triangle"":    base = int(input(""Enter the base of the triangle: ""))    height = int(input(""Enter the height of the triangle: ""))    area = 0.5 * base * height # Area of a triangle = 1/2 * b * h    print(""The area of the triangle is: "" + str(area))    # If user has shapes that don't match the 4 above, ask them to choose from the 4else:    print(""Please choose any of these shapes: Circle, Rectangle, Square, or Triangle"")","December Submission: Problem 3: Reeddhiman Pradhan

def unique_chars(word):    seen_chars = [] # Create empty list to store viewed characters    for char in word: # Iterate through the word for every letter        if char in seen_chars: # If the letter is already in the list, return False            return False        seen_chars.append(char) # Otherwise, add the letter to the list    return True # If no duplicates are in the list after all letters are appended, return True","December Submission: Problem 4: Reeddhiman Pradhan

# Import the random class import random
# Generate a random number between 1 and 100random_num = random.randint(1, 100)
# Welcome the user to the number guessing gameprint(""Welcome to the number guessing game! If you guess the right number, you win! "")         # Let the game beginwhile True:    try:         # Ask for user input        user_num = int(input(""Guess a number between 1 and 100 (inclusive): ""))
        # Check whether user guess is too high, low, or the right number        if user_num > random_num:            print(""Your guess is too high, try a lower number"")
        elif user_num < random_num:            print(""Your guess is too low, try a higher number"")
        else:            print(""Congratulations, you guessed the correct number: "" + str(user_num))            break # Exit out of the game if the random number is guessed correctly                # Handles invalid input    except ValueError:        print(""This is not a number! Please enter a number between 1 and 100"")"
Victor Serrano,December Submission: Problem 1: Victor Serrano,December Submission: Problem 2: Victor Serrano,December Submission: Problem 3: Victor Serrano,December Submission: Problem 4: Victor Serrano
Hector	Perez Ramirez,"December Submission: Problem 1: Hector	Perez Ramirez

# Based on my understanding on this problem I have to determine wheather a pharse or word is a palindrome. I believe that a palindrome is a word or phrase that is the same forwards and backwards. Problem also stated that should ignore spaces, punctuation, and capitalization
# How I plan to solve the problem: 
# 1. create a variable where the user inputs the string
# 2. create a function to remove all punctuation,capitalization, and convert all to lowercase with a fuction 
# 3. print wheater or not the string is a palindrome and ask if they would like to see if another string is a palindrome#_________________________________________________________
import string# function to determine wheather or not a string is a palindromedef palindrome_check(s):  s = s.lower()  s = s.translate(str.maketrans('', '', string.punctuation))  s = s.replace("" "", """")
  if s == s[::-1]:    print(""This is a palindrome"")  else:    print(""This is not a palindrome"")
# function that ask user for test string and tells user if it is a palindrome or not.def menu():  while True:    test_string = input(""Pleas insert a string to check if it is a palindrome: "")
    #checks to see if string is a palindrome using function    palindrome_check(test_string)
    # Asks user if they would like to check another string    repeat = input(""would you like to check another string? (y/n): "")    if repeat != ""y"":      break
# Calls menu functionmenu()
# This program gives the user a way to check if a string is a palindrome.","December Submission: Problem 2: Hector	Perez Ramirez

# based on my understanding of the problem i need to ask the user for a type of shape and then ask for the right measurments to calculate the area of the shape.
# plan:# 1. ask the user for the type of shape# 2. determine right calculation based on shape# 3. ask for the right measurments and print the output. (the output should be area)
#-------------------------------
import math  # To use math.pi for accurate circle calculations
def calculate_area(shape):    # Check the shape and calculate the area accordingly    if shape.lower() == ""circle"":        # For circle, we need the radius        radius = float(input(""Please enter the radius of the circle: ""))        area = math.pi * radius**2  # Formula for the area of a circle        print(f""The area of the circle is: {area:.2f}"")
    elif shape.lower() == ""rectangle"":        # For rectangle, we need length and width        length = float(input(""Please enter the length of the rectangle: ""))        width = float(input(""Please enter the width of the rectangle: ""))        area = length * width  # Formula for the area of a rectangle        print(f""The area of the rectangle is: {area:.2f}"")
    elif shape.lower() == ""square"":        # For square, we need the side length        side = float(input(""Please enter the side length of the square: ""))        area = side * side  # Formula for the area of a square        print(f""The area of the square is: {area:.2f}"")
    elif shape.lower() == ""triangle"":        # For triangle, we need base and height        base = float(input(""Please enter the base of the triangle: ""))        height = float(input(""Please enter the height of the triangle: ""))        area = 0.5 * base * height  # Formula for the area of a triangle        print(f""The area of the triangle is: {area:.2f}"")
    else:        # If the shape entered is not recognized        print(""Sorry, I don't know how to calculate the area of that shape."")
def main():    # Welcome message and asking the user for the shape    print(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of?"")    shape = input(""Please enter the name of the shape (e.g., circle, rectangle, square, triangle): "").strip()
    # Call the function to calculate the area based on the user input    calculate_area(shape)
# Run the programif __name__ == ""__main__"":    main()","December Submission: Problem 3: Hector	Perez Ramirez

# based on my understanding of the problem, I have to determine wheater a string has complete unique characters or not.#-----------------------------------# function name and converts to s booliandef all_unique_characters(s: str) -> bool:    # Convert string to uppercase to ensure case insensitivity    s = s.upper()
    # Use a set to track characters we've seen    seen = set()    for char in s:        if char in seen:            return False        # adds character to list to keep track of characters        seen.add(char)
    return True
# Get user inputuser_input = input(""Enter a string to check if all characters are unique: "")
# Call the function and print the resultif all_unique_characters(user_input):    print(""All characters are unique."")else:    print(""Not all characters are unique."")","December Submission: Problem 4: Hector	Perez Ramirez

# I have to make a game that choses a number between 1 and 100 and the user has to guess it. I will use random import and and as user gets closer the program will tell them how close they are to real number
#--------------------------------------import random
def random_number_game():  # step 1 - get randome number between 1 and 100 random_target = random.randint(1, 100)
# step 2 - variables for the game guess = None # the users current guess.Set to None attempts = 0 # the number of attempts the user has made
# step 3 - start the game loop while guess != random_target:# step 4 - get the user's guess   guess = int(input(""Guess a number between 1 and 100: ""))
# step 5 - Increse the number of attempts   attempts += 1
   # Step 6 - Provide feedback based on the guess   if guess < random_target:       print(""Too low! Try again."")       if random_target - guess <= 5:           print(""You're close! The number is just a few higher."")   elif guess > random_target:       print(""Too high! Try again."")       if guess - random_target <= 5:           print(""You're close! The number is just a few lower."")   else:       # This branch is executed when the guess is correct       print(f""Congratulations! You guessed the correct number {random_target} in {attempts} attempts."")       break  # Exit the loop and end the game
# step 7 - initialize gamerandom_number_game()"
Dilmi	Wickramanayake,"December Submission: Problem 1: Dilmi	Wickramanayake


""""""
Problem: Check if the text is the same when it is reversed

Clues: try to find a way to reverse a string, and equal it to the original string
Tools: index []
""""""
def isPalindrome(text):
    text = text.lower() # upper and lowercase are different so it will mess up the comparison
    index = len(text) -1 # reverse index
    for i in range(len(text)): # made to iterate through reversed string and regular string
        if(text[i] == text[index]):
            text[i] # this is just a placeholder so that the if statement runs
        else:
            return ""This string is not a palindrome"" # if anything doesn't equal that means its not a palindrome

        index-=1 # decrement the reverse index
    return ""This string is a palindrome""
      
       
        
testcase1 = isPalindrome(""Hello"")
print(testcase1)

testcase2 = isPalindrome(""Racecar"")
print(testcase2)

testcase3 = isPalindrome(""tacocat"")
print(testcase3)

""""""
Examine: I could have used the .reverse() method, and 
could have compared the original string to the reversed string
""""""","December Submission: Problem 2: Dilmi	Wickramanayake


""""""
Problem: Display area of Shapes
How many conditionals do I need?
input - lengths, widths, height, radius

Clues: use user inputs and implement that in the formula
Tools: math operators
""""""
import math # for pi
input1 = input(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of? "")

if(input1 == ""circle""): # if user wants area for circle
    cirInput = int(input(""Please give me the radius of the circle? ""))
    print(""Area: "", cirInput* cirInput * math.pi) # pi * r^2
elif(input1 == ""rectangle""):# if user wants area for rectangle
    rectLength = int(input(""What is the length? ""))
    rectWidth = int(input(""What is the width? ""))
    print(""Area: "", rectLength * rectWidth) # L * W
elif(input1 == ""square""): # if user wants area for square
    squareSide = int(input(""What is the side length? ""))
    print(""Area: "", squareSide * squareSide) # L* L
elif(input1 == ""triangle""): # if user wants area for triangle
    triBase = int(input(""What is the base? ""))
    triHeight = int(input(""What is the height? ""))
    print(""Area: "", (triBase * triHeight)/2) # 1/2 * L * W

""""""
Examine: You can check by going through all of the conditions like 
triangle, circle, rectangle, and square
How to improve it? make there more options for areas
""""""","December Submission: Problem 3: Dilmi	Wickramanayake


""""""
Problem: Check if text has only one of the same letter

Clues: Check previous letters from the text to eachother
Tools: index []
""""""
def isUnique(text):
    check = [] # list to check if previous letters equal current letters
    for i in range(len(text)): # iterate throught text
        if(text[i] in check): # if equals previous letters
            return False
        check.append(text[i]) # add current letter
    return True

testcase1 = isUnique(""abcdef"")
print(testcase1)
testcase2 = isUnique(""hello"")
print(testcase2)
testcase3 = isUnique(""uiomnbvgfs"")
print(testcase3)

""""""
Examine: I could have used the .count() method 
to check if each letter has only one count
""""""","December Submission: Problem 4: Dilmi	Wickramanayake


""""""
Problem: Check if users guess is equal to the random number from 1-100

Clues: needs to continuously run until user gets correct guess - use while loop and boolean
Tools: random, input
""""""
import random
random_num = random.randint(1, 100) # getting the random number

end = False # indicates when the user gets the correct number

while(end == False): # continues if user doesnt get the correct number
    guess = int(input(""Choose a number 1-100: "")) # gets users input
    
    if(guess == random_num): # if its equal
        print(""Great Job! You got it"")
        end = True
    elif(guess > random_num): # if guess is too high
        print(""Too High!!"")
    elif(guess < random_num): # if guess is too low
        print(""Too Low!!"")
""""""
Examine: I can check this by printing out the random_number and inputting all conditions
1. input a number too low
2. input a number too high
3. input a number that is equal to the number
Now check if it has the correct input

Improve it?
I could possibly use less code lines
I could also make it more difficult for the user, so I could give the
 user only 3 chances to guess the number
"""""""
Jawaad Merali,"December Submission: Problem 1: Jawaad Merali

def is_palindrome(string):    cleaned_string = """"    for char in string:        if ('a' <= char <= 'z') or ('A' <= char <= 'Z') or ('0' <= char <= '9'): # conditional checks character to make sure it is valid            if 'A' <= char <= 'Z':                         # Converts the character uppercase to lowercase                cleaned_string += char.lower()            else:                cleaned_string += char //else statement executes
    reversed_string = """"    for i in range(len(cleaned_string) - 1, -1, -1):  //traverses the list of strings        reversed_string += cleaned_string[i]
    if cleaned_string == reversed_string:  //checks if palindrome        return ""The string is a palindrome.""    else:        return ""The string is not a palindrome.""  //else conditional
input_string = input(""Enter a string: ""). /sampl test runresult = is_palindrome(input_string)print(result)","December Submission: Problem 2: Jawaad Merali

def calculate_area(): //fucntion definition to calc area    print(""I can calculate the area of a shape for you."")    shape = input(""Which shape do you want me to calculate the area of? (circle, rectangle, square, triangle): "").strip().lower(). //asks for shape to calc area
    if shape == ""rectangle"":  //checks if the shape inputted is rect        length = input(""Enter the length of the rectangle: "")        width = input(""Enter the width of the rectangle: "")        area = float(length) * float(width)        print(""The area of the rectangle is"", area)
    elif shape == ""square"":  //checks if shape inputted is square        side = input(""Enter the side length of the square: "")        area = float(side) * float(side)        print(""The area of the square is"", area)
        area = side * side //area calc        print(""The area of the square is"", area)
    elif shape == ""triangle"":  //checks if shape inputted is triangle        base = input(""Enter the base of the triangle: "")        height = input(""Enter the height of the triangle: "")        base = float(base)        height = float(height)        area = 0.5 * base * height //area calc        print(""The area of the triangle is"", area)
    elif shape == ""circle"":  //checks if shape inputted is circle        radius = input(""Enter the radius of the circle: "")        radius = float(radius)        area = 3.14 * radius * radius //area calc        print(""The area of the circle is"", area)
    else:        print(""Sorry, I can't calculate the area of that shape."")","December Submission: Problem 3: Jawaad Merali

   def uniqueCharacters:
   for i in range(len(s)):
 # Inner loop: Compare the current character with every other character            for j in range(i + 1, len(s)):
 # Check if the character at index i is the same as the character at index j                if s[i] == s[j]:
#conditional statement for comparison                   return False       return True","December Submission: Problem 4: Jawaad Merali

import random  # importing the random module to generate a secret number.
def guessing_game():    # pick a secret number between 1 and 100.
    secret_number = random.randint(1, 100)
    print(""Welcome to the Guessing Game!"")  # A warm welcome.    print(""I have chosen a number between 1 and 100. Try to guess it!"")  # Issuing the challenge.
    attempts = 0  # Let's keep track of how many guesses the user makes.
    while True:  # The infinite loop of guessing begins!        guess = int(input(""Enter your guess: ""))  # Ask the user to take a guess.        attempts += 1  # Increment the number of attempts after each guess.
        if guess == secret_number:  # Did they guess correctly?            print(f""Congratulations! You guessed the number in {attempts} attempts."")  # Victory message!            break  # Exit the loop because the game is over.        elif guess < secret_number:  # Is their guess too small?            print(""Too low. Try a larger number."")  # Hint: aim higher.        else:  # If it's not too small, it must be too big!            print(""Too high. Try a smaller number."")  # Hint: aim lower.
    print(""Thanks for playing!"")  # A cheerful goodbye for the player.
# Let's call the function to start the fun!guessing_game()"
Mateo Sanchez,"December Submission: Problem 1: Mateo Sanchez


def checkPalindrome(word):
    wordReverse = word[::-1]
    if wordReverse.lower() == word.lower():
        print(f'{word} is a palindrome!')
    else:
        print(f'{word} is not a palindrome.')

checkPalindrome('racecar')","December Submission: Problem 2: Mateo Sanchez

///Unfortunately I could not complete this problem within 1 hour///

def calcCircleArea(radius): <<<Calculates the area of a circle
    area = 3.14 * radius^2
    print(f'The area of this circle is {area}'})

def calcArea():
    print('This is an area calculator.')
    print('What shape do you want to calculate the area of?')
    print('--------------------')
    print('A: Circle')
    print('B: Square')
    print('C: Rectangle')
    print('D: Triangle')
    print('--------------------')
    optionInput = input('Please select an option')
    if optionInput not in ['a', 'A', 'b', 'B', 'c', 'C', 'd', 'D']: <<<Checks to make sure that a valid option is selected
        print('That is not a valid choice')
    else:
        if optionInput = 'a' or 'A':
            input()","December Submission: Problem 3: Mateo Sanchez

///I was unfortunately unable to complete this one, but I did try to solve the problem///

def checkUniqueCharacters(word):
    characterList = []
    charIndex = 0-1 <<<Adds an index to indicate the current character being checked
    for character in word:
        characterList.append(word[i])
    for character in characterList:
        charIndex += 1
        if characterList[i] == characterList[charIndex]: <<<Checks if the current character is similar to other characters in the string
            print('This is not a unique string.')
            break

checkUniqueCharacters(lloyd)",
Arnab Shrestha,"December Submission: Problem 1: Arnab Shrestha

SAME PICTURE AS LAST ATTEMPT but I updated the the code to account for spaces. The time is still around 40 minutes.


""""""
Understand:
    Create a palindrome checker that checks if a word or sentence is the exact same when reversed.

    Inputs:
        String input from user
    Outputs:
        if user input is a palindrome: ""The string is a palindrome.""
        else: ""The string is not a palindrome.""
    
    Question:
        What happens if the string is empty?

Clues/hints:
    if the word/phrase is writen the same forward or backword, I will need to make another string that is the reversed version of the user's input.
    ignoring capitalization meanings I can use .lower() when comparing the user input string and the reversed string.
    ignoring spaces and punctuation means I should take out spaces and punctuations in the user input string.

Assemble/pseudocode:
    inputString = input(""Type a word or phrase: "");

    if inputString has spaces or punctuations:
        remove spaces and punctuations from inputString

    reveseredString = """"
    for reversed inputString:
        revseredString += i;
    
    if inputString.lower() == reversedString.lower():
        print(""The string is a palindrome."")
    else:
        print(""The string is not a palindrome."")

Examination:
    Made a list of punctuations for efficiency
    Forgot to account for spaces in the input
""""""

# User input
inputString = input(""Type a word or phrase: "")

#Checks if the input is empty
if inputString == """":
    print(""No input"")
    quit()

# List of possible punctuations and space
allPunctuationsAndSpace = ["" "","","", ""."",""/"",""?"",""!"",""("","")"","";"","":"",""'"",""\"""",""["",""]"",""{"",""}"",""-""]

#Checks if each punctuation is in inputString and takes the punctuation out if it is
for character in allPunctuationsAndSpace:
    if character in inputString :
        inputString = inputString.replace(character, """") # replaces with empty string to delete the punctuation

reveseredString = """" #initializes the variable
for i in reversed(inputString): # For loop that starts backwards
    reveseredString += i

if reveseredString.lower() == inputString.lower(): # compares the original user input with the reversed version with all letters in lowercase
    print(""The string is a palindrome."")
else:
    print(""The string is not a palindrome."")","December Submission: Problem 2: Arnab Shrestha

UPDATED TO HAVE MORE COMMENTS, still around 35 minutes


""""""
Understand:
    Prompt:
        Create an area calculating program that can calculate the area of different shapes typed in by the user.
    
    Inputs:
        String shapeName
        one or two int inputs for shape dimensions

    Questions:
        What if the user doesn't input an eligible shape?
        Can the input dimensions have decimals?
    
Clues/hints:
    user selection of shapes will require if statements
    area of a circle will require pi so I need to import math.

Assemble/pseudocode:
    input variable shape

    if shape == circle:
        input variable for radius
        calculate the area of a circle with radius
        print
    elif shape == rectangle:
        input variable for length
        input variable for width
        calculate the area of a rectangle with length and width
        print
    elif etc.
    else:
        print ""shape is not an available option.""

Examination:
    When I thought I was done I tried running the code and realized I forgot to convert the inputs to integers.
    I again changed in inputs to floats so the user can input decimal numbers.
    To make the code more efficient, I used elif and else statements.
    I forgot to account for capital letters.
    I forgot to account for non-numeral inputs.
""""""
import math

# User input for shape name
shape = input(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of? "")
shape = shape.lower()
try: #try/except for if an input is not a number
    if shape == ""circle"":
        radius = float(input(""What is the radius of the circle?  ""))
        area = math.pi*(radius*radius) # pi(r)^2
        print(f""The area of a circle with a radius of {radius} is {area}"")
    elif shape == ""rectangle"":
        length = float(input(""What is the length of the rectangle? ""))
        width = float(input(""What is the width of the rectangle? ""))
        area = length*width # l*w
        print(f""The area of a rectangle with a length of {length} and a width of {width} is {area}"")
    elif shape == ""square"":
        length = float(input(""What is the length of the rectangle? ""))
        area = length*length # l^2
        print(f""The area of a square with a length of {length} is {area}"")
    elif shape == ""triangle"": 
        base = float(input(""What is the base of the triangle? ""))
        height = float(input(""What is the height of the triangle? ""))
        area = (base*height)/2 # (b*h)/2
        print(f""The area of a triangle with a base of {base} and a height of {height} is {area}"")
    else:
        print(f""{shape} is not an available option."")
except:
    print(""invalid input"")","December Submission: Problem 3: Arnab Shrestha



""""""
Understand:
    Prompt:
        Create a program that checks a string for any repeated characters

    Input:
        One user input for word/phrase
    Outputs:
        if user input has all unique characters: ""True""
        else: ""False""

    Questions:
        What do I do with spaces and punctuation? I decided to exclude them
        What happens if the input is empty?

Clues/Hints:
    Since im checking for repeated characters, I should make a linear search that checks every other character for every character

Assemble/pseudocode:
    input variable userInput

    if userInput has any spaces or punctuations, they get deleted.

    for character in userInput:
        for i in range(userInput):
            if character == userInput[i]:
                print false
                quit()
    print true
""""""

# User input
inputString = input(""Type here: "")
inputString.lower() # Makes all the characters lowercase

#Checks if the input is empty
if inputString == """":
    print(""No input"")
    quit()

# List of possible punctuations and space
allPunctuationsAndSpace = ["" "","","", ""."",""/"",""?"",""!"",""("","")"","";"","":"",""'"",""\"""",""["",""]"",""{"",""}"",""-""]

#Checks if each punctuation is in inputString and takes the punctuation out if it is
for character in allPunctuationsAndSpace:
    if character in inputString :
        inputString = inputString.replace(character, """") # replaces with empty string to delete the punctuation

allUniqueChar = True #initializes boolean variable

# imbedded for loops so each character in inputString can be compared to all the other characters
for x in range(len(inputString)):
    for y in range(len(inputString)):
        if x != y and inputString[x] == inputString[y]: # checks if the char at the y index is the same as the x index when the indexs are not the same.
            allUniqueChar = False

print(allUniqueChar)","December Submission: Problem 4: Arnab Shrestha



""""""
Understand:
    Prompt:
        Create a number guessing game where the user has to guess a random number from 1 to a 100.
    
    Inputs:
        int userGuess
    Outputs:
        Wrong, the number is less than {userGuess}
        Wrong, the number is more than {userGuess}
        Correct!
    
    Questions:
        What if the user doesn't input a number?
        Can the number have decimals?
        Will the user have a limited amount of tries?
        What if the user inputs something over or under the maximum and minimum numbers?

Clues/hints:
    Since the user needs to guess again, a while loop should be used until the number is guessed correctly.
    To evaluate if a user input is correct, I need if statements.
    Since the game is about guessing numbers, I need integer variables.
    Since the game requires a random number, I will need to import random.

Assemble/pseudocode:
randNum = random number between 1-100

while True:
    userGuess = ""choose a number between 1-100""
    if userGuess == randNum:
        print(""Correct!"")
        break
    elif userGuess > randNum:
        print(""Wrong, the number is less than {userGuess}"")
    else:
        print("" Wrong, the number is more than {userGuess}"")

Examination:
    After having the main requirements, I went back and made the game error proof with try/except.
    I added a way for the user to quit.
""""""
import random

randNum = random.randint(1,100) # creates a random integer between 1-100
while True: # loop that will keep running until false or broken
    try: # catches errors when user inputs something thats not e or an integer
        userGuess = input(""choose a number between 1-100 (enter e to exit): "")
        
        if(userGuess == ""e""):
            break # breaks the while loop and ends the code

        userGuess = int(userGuess) # Converts str to int

        if userGuess == randNum:
            print(""Correct!"")
            break
        elif userGuess > randNum and userGuess <= 100: # condition after and is to check if the input number is within the random number limits
            print(f""Wrong, the number is less than {userGuess}"")
        elif userGuess < randNum and userGuess >= 1:
            print(f""Wrong, the number is more than {userGuess}"")
        else:
            print(""Guess needs to be between 1-100"")
    except:
        print(""Invalid input: input can only be an integer"")"
Jatin Aggarwal,December Submission: Problem 1: Jatin Aggarwal,December Submission: Problem 2: Jatin Aggarwal,December Submission: Problem 3: Jatin Aggarwal,December Submission: Problem 4: Jatin Aggarwal
Christian	Trinidad,"December Submission: Problem 1: Christian	Trinidad

def checks_if_palindrome(input_str):  #This function is made to find if the given string ""input_str"" is a palindrome which is   # a word, phrase, number, or other sequence of characters that reads the same forwards and   # backwards (ignoring spaces, punctuation, and capitalization)  # I will be going to do this by checking if the string reads the same forward and backwards and like the instructions say,  # I have to remove spaces and punctuation, and in the case the user inputs a string thats capitalized we will make it lowercase.
  # Now I am going to make a variable that has the input string flipped to later compare it to the initial string  new_str = ''.join(c.lower() for c in input_str if c.isalnum())#the following code compares the user input to the new string that has been flipped and if they are the same then it will return true  if new_str == new_str[::-1]:      return ""The string is a palindrome.""  else:      #if the string is not the reverse then this will print out      return ""The string is not a palindrome.""    #allows the actual code to run allowing the user to input a stringuser_input = input(""Enter a string to check if it's a palindrome: "")
    #Calls the function and display the resultresult = checks_if_palindrome(user_input)print(result)","December Submission: Problem 2: Christian	Trinidad

import math#makes the function that will calculate the area of the chosen shape of the user # I will then make an if statement of each shape and ask the user for the needed measurements of the shape and just use the formula from there to find the area of the given shape.def calculate_area():   #ask for input input and inform the user what the code will do.    print(""I will be calculating the are of the shape of ur choice. The shares are as follow."")    shape = input(""Enter the shape (circle, rectangle, square, triangle): "").strip().lower()#this is the if statement for the shape circle all it does is take the radius from the user and then use the formula and finally print.    if shape == ""circle"":        radius = float(input(""Enter the radius of the circle: ""))        area = math.pi * radius ** 2        print(f""The area of the circle is: {area:.2f}"")# this is the if statement for the shape rectangle all it does is take the length and width from the user and then use the formula and finally print.    elif shape == ""rectangle"":        length = float(input(""Enter the length of the rectangle: ""))        width = float(input(""Enter the width of the rectangle: ""))        area = length * width        print(f""The area of the rectangle is: {area:.2f}"")# this is the if statement for the shape square all it does is take the length from the user and then use the formula and finally prints.    elif shape == ""square"":        side = float(input(""Enter the side length of the square: ""))        area = side ** 2        print(f""The area of the square is: {area:.2f}"")# this is the if statement for the shape triangle all it does is take the base and height from the user and them for the formula and finally prints.    elif shape == ""triangle"":        base = float(input(""Enter the base of the triangle: ""))        height = float(input(""Enter the height of the triangle: ""))        area = 0.5 * base * height        print(f""The area of the triangle is: {area:.2f}"")#incase the user doesn't type one of the given shapes correclty.    else:        print(""Invalid shape. Choose from circle, rectangle, square, or triangle."")
# Runs the programcalculate_area()","December Submission: Problem 3: Christian	Trinidad

#What i will be doing to solve this problem is to first make a function with the ultimate purpose of taking one input string and seeing if it has letters in it that repeat for exaple ""hello"" has words that repeat# What im going to be doing is using a for loop to go through the string and then using a if statement to see if the letter is in the string and if it is then it not uniquedef find_unquie_characters():  
    # User input    input_str = input(""Enter a string to check for unique characters: "").strip()
    #Handles if only empty strings are given     input_str = input_str.replace("" "", """")  #eliminates spaces    if not input_str:        print(""it has unique characters."")        return True
    # I can then track seen characters using a set    seen_characters = set()
    # Iterate each character in the string to see if it is unique or not and return that information    for char in input_str:        if char in seen_characters:                       print(""The string does not have all unique characters."")            return False        seen_characters.add(char)  # Add the character to the set.
    # if the string is original we can return true    print(""The string has all unique characters."")    return True
# Runsfind_unquie_characters()","December Submission: Problem 4: Christian	Trinidad

import random#function to make the guessing game starts by setting the random number. Then sets a variable guess to 0 to represent the users guess of the number then we have a #message that lets the user know to guess a number between 1 and 100. Then we have a while loop that will keep running until the user gets the correct answer. If the user inputs a guess not between 1 and 100, the program will tell the user to guess between 1 and 100. If the user guesses the correct answer it prints a congratulations message and tells the user how many guesses it took. If the user guesses too high, the program will tell the user the guess is too high and if the user guesses too low, the program will tell the user the guess is too low.def number_guessing_game():
    # The problem we have to solve is to create a guessing game where the program selects a random number between 1 and 100.    # The user guesses and the program helps the user get closer to the answer by telling them if their guess is too high or too low.
 
    # Generate a random number between 1 and 100.    correct_number = random.randint(1, 100)
    # Initialize variables for the game loop.    guess = None
    print(""Welcome to the my game you will be guessing the correct number!!!"")    print(""I have chosen a number between 1 and 100. Your goal is to guess which one it is."")
    # Game loop    while guess != correct_number:        #  Prompt the user for input.        user_input = input(""Enter your guess: "")
        # Check if the input is a valid integer.        if not user_input.isdigit():            print(""Invalid input. "")            continue
        # Convert the input to an integer.        guess = int(user_input)
        #  Check if the guess is too high, too low, or correct.        if guess < correct_number:            print(""Too low! Try a larger number to get closer to the correct answer."")        elif guess > correct_number:            print(""Too high! Try a smaller number to get closer to the correct answer."")        else:            print(f""Congratulations! You guessed the correct number!!!!!!!!!: {correct_number}"")
if __name__ == ""__main__"":    number_guessing_game()"
Folajimi	Fabusuyi,"December Submission: Problem 1: Folajimi	Fabusuyi


'''
Palindrome: The word is the same as the word backwards.
Input: string
Return: string based on boolean value

Edge cases: 
    Case: The string has spaces/punctuations in it
    Solution: Remove all the spaces/punctuations in the word before assignment
    
    Case: Empty string input
    Solution: Should return true regardless

    Case: Upper case characters in string
    Solution: turn on letters to lower case.

'''

def palindrome(word):
    # This removes spaces/punctuations in the word after turning it to a list and then joins the list back together
    word = """".join([char.lower() for char in word if char.lower() in ""abcdefghijklmnopqrstuvwxyz""])

    # Checks if word is equal to its reverse through reverse splicing/stepping
    is_palindrome = word == word[::-1]

    # Returns the correct string based on if palindrome is correct
    return ""The string is a palindrome"" if is_palindrome else ""The string is not a palindrome""

print(palindrome(""Race Car"")) # -> true
print(palindrome("" "")) # -> true
print(palindrome(""Level"")) # -> true
print(palindrome(""Hello World"")) # -> false","December Submission: Problem 2: Folajimi	Fabusuyi


import math
'''
Calculate the area of 4 shapes based on input: Circle, Square, Triangle, Rectangle

Edge Cases: 
    Case: Inputs don't match expected type/value
    Solution: Validate inputs in while loop unitl player inputs them correctly

'''
def calculate_area():

    # Assigning all the variables here makes the code more organized when checking for input validation by player
    shape = """"
    radius = """"
    side_length = """"
    length = """"
    width = """"
    base = """"
    height = """"

    # Checks whether player asks for an avaialable shape
    while not shape in [""circle"", ""square"", ""rectangle"", ""triangle""]:
        shape = input(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of? "").lower()

    # Calculates for circle, using the math module to get pi
    if shape == ""circle"":
        # validates inputs
        while not radius.isdigit():
            radius = input(""Radius: "")
            
        radius = int(radius)
        print(""Area:"", math.pi * (radius**2))
    # Calculates area for square
    elif shape == ""square"":
        # Validates input
        while not side_length.isdigit():
            side_length = input(""Side Length: "")
            
        side_length = int(side_length)
        print(""Area:"", side_length**2)
    # Calculates area for rectange
    elif shape == ""rectangle"":
        # Validates input
        while not length.isdigit() or not width.isdigit():
            length = input(""Length: "")
            width = input(""Width: "")

        length = int(length)
        width = int(width)
        print(""Area:"", length * width)
    # Calculates area for triangle    
    else:
        # Validates input
        while not base.isdigit() or not height.isdigit():
            base = input(""Base: "")
            height = input(""Height: "")

        base = int(base)
        height = int(height)
        print(""Area:"", 0.5 * base * height)

calculate_area()","December Submission: Problem 3: Folajimi	Fabusuyi


'''
Check if every character in the input string is unique. Meaning there are no repeat characters.

Input: string
Output: bool

Givens:  - If string length is 1 then string is unique
         - If string is empty then string is not unique as it has no characters
         - Empty spaces in my approach will count as a character, so if we have multiple empty spaces the string is not unique
         - For my approach upper case letters will count as different from their lowercase counterparts
'''

def unique_char(str):
    # Here I have a list that will hold each new character we come across
    unique_char = []

    # Checking if length of string is 0 or 1 and returning the right value accordingly
    if len(str) == 1: return True
    elif len(str) == 0: return False

    # For each character in string, if character is already in our unique character list then we know that the character is not unique, therefore we return False.
    # If the for loop ends without triggering the if statement, then we know all characters are unique, therefore returning True.
    for char in str:
        if char in unique_char:
            return False
        unique_char.append(char)
    return True

print(unique_char("""")) #-> False
print(unique_char(""a"")) #-> True
print(unique_char(""Aa"")) #-> True
print(unique_char(""abcdefg"")) #-> True","December Submission: Problem 4: Folajimi	Fabusuyi


import random
'''
Create a number guesser game, where you are told if the number is higher or lower until you get the number

Edge Cases: 
    Case: Player doesn't input a number
    Solution: Input validation with while loop
'''

def number_guess():
    # Use the random module to get a random number between 1 and 100
    number = random.randint(1, 100)

    # Put player input section in while loop, and only break out once player makes the right guess
    while True:

        # Here I ask for player input and then check if the input is an integer and then I convert the input to an integer.
        choice = input(""Guess the number: "")

        while not choice.isdigit():
            choice = input(""Guess the number: "")

        choice = int(choice)

        # Check whether you got the answer
        if choice < number:
            print(""The number is higher, guess again."")
        elif choice > number:
            print(""The number is lower, guess again."")
        else:
            print(""Congrats you win!"")
            break

number_guess()"
Alan	Morillo,"December Submission: Problem 1: Alan	Morillo

def palindrome (txt):
  txt_lower = txt.lower() # convert text to lowercase
  seq = txt.lower().replace("" "", """") # get rid of spaces
  reversed_seq = seq[::-1] # reverse the text
  if reversed_seq == seq:
    # if the text equals it's reverse, it is a palindrome
    print(""The string is a palindrome"")
    return True
  # otherwise, it isn't
  print(""The string is not a palindrome"")
  return False
  
# TEST CASES
palindrome(""Racecar"")
palindrome(""Hello"")","December Submission: Problem 2: Alan	Morillo

import math
def circle():
    try:
      # get radius and calculate area
        rad = float(input(""What is the radius? "")) 
        return math.pi * math.pow(rad, 2)
    except ValueError:
      # if the input can't be converted to a float, it is invalid
        print(""Invalid radius. Please enter a numeric value."")
        return circle() # try again
def rectangle():
  try:
    # get length and width and calculate area
    length = float(input(""What is the length? ""))
    width = float(input(""What is the width? ""))
    return length * width
  except ValueError:
    print(""Invalid dimension(s)"")
    return rectangle()
def square():
  try:
    # get length and calculate area
    length = float(input(""What is the length? ""))
    return math.pow(length, 2)
  except ValueError:
    print(""Invalid length"")
    return square()
  
def triangle():
  try:
    # get base and height to calculate area
    base = float(input(""What is the length of the base? ""))
    height = float(input(""What is the height? ""))
    return 0.5 * base * height
  except ValueError:
    print(""Invalid dimension(s)"")
    return triangle()
def area():
  shape_dict = { # using a dictionary of function allows for more shapes to be added with less lines of code
    ""circle"": circle,
    ""rectangle"": rectangle,
    ""square"": square,
    ""triangle"": triangle
  }
  # get the shape type
  shape = input(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of? "").lower()
  try:
    # call the function corresponding to the shape
    return shape_dict[shape]()
  except KeyError:
    # ask again if shape in invalid
    print(""Invalid shape or shape not in list"")
    return area()
print(""The area of the shape is "" + str(area()))","December Submission: Problem 3: Alan	Morillo

def is_unique(s):
  # set creates a list of unique characters from the original. By getting their lengths, we can compare them to see if it is the same as the original.
return len(s) == len(set(s))
print(is_unique(""hello""))","December Submission: Problem 4: Alan	Morillo

import random
def number_guessing_game(target):
    try: # get user input
    guess = int(input(""Guess a number between 1 and 100: ""))
    if(guess > target):
        print(""Lower"") # if guess is greater than target, let the user know they need a lower guess
    elif(guess < target):
        print(""Higher"")# if guess is less than target, let the user know they need a higher guess
    else: # Otherwise, they must have guessed the correct number
        print(""You got it!"")
        return # End
    except ValueError:
      print(""Invalid type."") # Type is invalid because a non-integer was inputed
   return number_guessing_game(target) # uses recursion until the player guesses the number
#Choose random number and play the game
num = random.randint(1, 100)
number_guessing_game(num)"
Alieu	Komma,"December Submission: Problem 1: Alieu	Komma

# Take in string
# Loop through string
# Check letters in string by going backwards in letters 
# Return true if all letters match one another, false if they dont
 

def checkPalindrome(string):
    string = string.lower() # Sets the string to lowercase
    i = len(string) - 1 # takes the length of the string
    for char in string: 
        if char == string[i]: # check to see if the last letter equals the first letters and so on
            i -= 1
        else:
            return False
        if i == 0:
            return True

print(checkPalindrome(""Racecar""))
print(checkPalindrome(""Hello""))","December Submission: Problem 2: Alieu	Komma

# Asks user what shape they want to calculate area
# If circle, asks for radius and use pi * r^2
#If rectangle, ask for a length and width and do L * W
#If square, ask for a side length and do S * S
#If triangle, ask for a base and a height and do B*L*0.5
#Return value to the user
 

def calc_area():
    area = 0
    y = True

    while y:
        shape = input(""Hello, do you want to find the area of a circle, rectangle, square, or triangle? "")
        shape = shape.lower()

        if shape == ""rectangle"":
            x = True
            while x is True:
                width = input(""\nWhat is the width of the rectangle? "")
                length = input(""What is the length of the rectangle? "")
                
                if width.isdigit() and length.isdigit:
                    area = int(width) * int(length)
                    print(f""The area of your {shape} is {area}"")
                    y = False
                    x = False
                else:
                    print(""Make sure you are typing is an interger (No Decimals). \n"")

        elif shape == ""square"":
            x = True
            while x is True:
                side = input(""\nWhat is the side length of the square? "")
                
                if side.isdigit():
                    area = int(side) * int(side)
                    print(f""The area of your {shape} is {area}"")
                    y = False
                    x = False
                else:
                    print(""Make sure you are typing an interger (No Decimals). \n"")
        
        elif shape == ""triangle"":
            x = True
            while x is True:
                base = input(""\nWhat is the base length of the triangle? "")
                height = input(""What is the height of the triangle? "")
                
                if base.isdigit() and height.isdigit():
                    area = int(base) * int(height) / 2
                    print(f""The area of your {shape} is {area}"")
                    y = False
                    x = False
                else:
                    print(""Make sure you are typing an interger (No Decimals). \n"")   

        elif shape == ""circle"":
            x = True
            while x is True:
                radius = input(""\nWhat is the radius of the circle? "")
                
                if radius.isdigit():
                    area = int(radius) * int(radius) * 3.141
                    print(f""The area of your {shape} is about {area}"")
                    y = False
                    x = False
                else:
                    print(""Make sure you are typing an interger (No Decimals). \n"")
        
        else:
            print(""Make sure you're spelling the shape you want calculated correctly (square, circle, triangle, rectangle)"")

                   

calc_area()","December Submission: Problem 3: Alieu	Komma

# 1. Store letters of string in a list# 2. Check to see if a letter appears more than once# 3. Return False if a letter appears at least twice# 4. Return True if a letter on appears once
def checkString(string):    letters = []    string = string.lower()        for char in string: #populates the letters list with characters        letters.append(char)        for char in string: #checks to see if two letters equal one another       i = 0       for letter in letters:            if char == "" "": #Passes if string has a space                pass            elif char == letter:                i += 1        1       if i > 1: # Checks to see if the character has two instances in the list           return False
    return True #String must be unique if for loop doesn't return false
        print(checkString(""Hello""))print(checkString(""abc defg""))","December Submission: Problem 4: Alieu	Komma

# Generate a random number# Ask user for guess# If guess to high, tell user it's lower# If guess to low, tell user it's higher# Run until user guesses number
import random
def guessingGame(number):    guessedNumber = False        while guessedNumber == False: #Allows user to keep playing the game until they guess the number            try: #Used to make sure the user is typing numbers into the input            guess = int(input(""Welcome to the guessing game! Guess a number between 1-100. ""))        except ValueError:            print(""Make sure you're typing numbers and not letters.\n"")                try: #Also used to continue program if the user type a letter on the first guess                    if guess >= 1 and guess <= 100: # Makes sure the number is inbetween 1 and 100                            if guess == number: # User guessed correct number                    print(f""\nCongratulations! The number was {number}"")                    guessedNumber = True                            elif guess > number: # User guessed a number that's bigger                    print(""\nTry guessing a smaller number\n"")                                elif guess < number: # User guessed a number that's smaller                    print(""\nTry guessing a bigger number\n"")                                else:                print(""Make sure you're typing numbers between 1-100.\n"")                        except UnboundLocalError: #            pass            
guessingGame(random.randint(1, 100))"
Jooheon	Lee,"December Submission: Problem 1: Jooheon	Lee

 
def check_palindrome(string):
# change the string into all uppercase so that the result isn't case sensitive
string = string.upper()
#then take the reverse of the string and check if it equals the original 
return string == string[::-1]
 
string = input(""Enter your string: "")
# prints the according results 
if check_palindrome(string):
print(""This string is a palindrome"")else:
print(""This string is not a palindrome"")","December Submission: Problem 2: Jooheon	Lee




# have a conditional for all the different shapes and ask for their according measurements 
def area_of_shape(shape):
    if shape==""circle"":
        radius = input(""Enter the radius: "").lower()
        print(""The area of the circle is: "" + radius*2*pi)
    elif shape==""rectangle"":
        length = input(""Enter the length: "").lower()
        width = input(""Enter the width: "").lower()
        print(""The area of the rectangle is: "" + length*width)
    elif shape==""square"":
        side_length = input(""Enter a side length: "").lower()
        print(""The area of the circle is: "" + side_length*side_length)
    elif shape==""triangle"":
        base = input(""Enter the base: "").lower()
        height = input(""Enter the height: "").lower()
        print(""The area of the triangle is "" + base*height)
    else:
        # if the shape inputted is none of the above, the user is prompted to enter one of these shapes
        print(""Please select a circle, rectangle, square or triangle."")

# get the shape that they want to calculate the area of and change it all to lowercase 
shape = input(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of?"").lower()
#call the function with the new input
area_of_shape(shape)","December Submission: Problem 3: Jooheon	Lee


def is_unique(string):
    # keep track of all the characters that have been seen already
    tracked_characters = set()

    # go through each character in the string and see if its new or not
    for char in string:
        # if the character has already been found in the set then we can just return false
        if char in tracked_characters:
            return False
        else: 
            tracked_characters.add(char)
    #if we were able to interate through the whole string without there being duplicates, return true
        return True

#get a string from the user
string = input(""Enter a string: "")
# prints out the result 
print(f""Are the characters in '{string} unique? {is_unique(string)}"")","December Submission: Problem 4: Jooheon	Lee


# import random so that we can generate the number
import random

def guessing_game():
    # generate the random number 
    random_number = random.randint(1,100)

    print(""This is the guessing game. I have chosen a random number between 1-100."")
   
    # loop through the guesses until they get it right 
    while True:
        guess = int(input(""Enter your guess: ""))

        # compare the user's guess to the actual number
        if guess < random_number:
            print(""Too low, try again."")
        elif guess > random_number:
            print(""Too high, try again."")
        else:
            # break out of the loop if they guessed it correctly 
            print(""Congratulations, you've guessed the correct number!"")
            break

guessing_game()"
Eesha Sutaria,"December Submission: Problem 1: Eesha Sutaria


#I use this library for the translate line
import string
#Creates the function. Takes a string input
def palindrome(str):
   #These 3 lines just make sure that capitalization, spaces, and punctuation have no effect on the result
    str = str.lower()
    str = str.replace("" "", """")
    str = str.translate(str.maketrans('', '', string.punctuation))
    match = True
    i = 0
    #Keeps going through the loop while characters as front and end match and it gets halfway through
    while (match== True and i <= len(str)/2):
        #When the character doesn't match the one in it's spot from the end it decides that the string is not a palindrome
        if (str[i]!=str[len(str)-1-i]):
            match = False
            return ""The string is not a palindrome.""
        i+=1
    #If it made it through the whole string without deciding match is false then it is a palindrome
    return ""The string is a palindrome.""
#Call the palindrome function and print what it returns
print(palindrome(input(""Hello. Enter a word and I will check if it is a palindrome: "")))","December Submission: Problem 2: Eesha Sutaria


#for pi
import math
#Float was adding on a random number at the end of calculations so I used the decimal type
from decimal import Decimal
go = True
#So it keeps going until the user is done giving shapes to find the area of
while go:
    shape = input(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of? (Enter circle, rectangle, square, or triangle): "")
    shape = shape.lower()
    #For circles, the user has to enter the radius and then it finds an area by doing pi times rad times rad
    if (shape == 'circle'):
        rad = float(input(""Enter the radius (Just the number): ""))
        print(""The area is "",  Decimal(math.pi * rad * rad))
    #For rectangles, the user has to enter the length and width and then it finds an area by multiplying them
    elif (shape == 'rectangle'):
        length = Decimal(input(""Enter the length (Just the number): ""))
        width = Decimal(input(""Enter the width (Just the nummber): ""))
        print(""The area is "", length*width)
    #For square, the user has to enter the sidelength and then it finds an area by multipling that side by itself
    elif (shape == 'square'):
        side = Decimal(input(""Enter the side length (Just the number): ""))
        print(""The area is "" , side*side)
    #For triangle, the user has to enter the base length and height and then it finds an area by doing one half times base times height
    elif (shape == 'triangle'):
        base = Decimal(input(""Enter the base length (Just the number): ""))
        height = Decimal(input(""Enter the height (Just the number): ""))
        print(""The area is "" , Decimal(0.5)*base*height)
    #For putting an invalid shape
    else:
        print(""That was an invalid input."")
    #Check if they want to get the area of another shape
    rep = int(input(""Would you like to get the area of another shape? Enter 1 for yes and 2 for no: ""))
    if rep == 2:
        go = False
        print(""Bye! I hope this helped."")","December Submission: Problem 3: Eesha Sutaria


#Creates function that takes a string input
def unique(str):
    #Gets rid of inconsistencies with capitalization and spaces
    str = str.lower()
    str = str.replace("" "","""")
    #Goes through each character and checks if it is different from all the charactes after it in the string
    for i in range(len(str)):
        for j in range(i+1,len(str)):
            #When it finds a repeat, it returns False
            if str[i] == str[j]:
                return False
    #If it never returned false then all the values are unique and it returns true
    return True
#Call the function with a string user input
print(unique(input(""Enter a word or phrase and I will check if all the characters are unique: "")))","December Submission: Problem 4: Eesha Sutaria


import random
#The computer picks the random number
num = random.randint(1, 100)
#boolean to keep track of whether they have guessed the correct number yet
wrong = True
print(""Hello! Welcome to my number guessing game. Here's how it works:\nThe computer picked a random number between 1 and 100. You will guess what the number is.\nIf you are wrong, I will tell you whether your guess is too high or too low until you guess the correct number.\nGood luck!\n"")
while wrong:
    guess = input(""Enter a guess. It must be a number between 1 and 100: "")
    #Checks that the guess is actually an integer between 1 and 100
    while guess.isnumeric() == False or int(guess)<1 or int(guess)>100:
        guess = input(""That was not an acceptable input. Please enter a number between 1 and 100: "")
    guess = int(guess)
    #Checks if the guess is right and if it is, tell them they won and change wrong to false to get out of the loop
    if (guess == num):
        print(""Congratulations! You won!"")
        wrong = False
    #Check if your guess is smaller than the number and if it is, tells them that
    elif (guess < num):
        print(""Your guess is too small. The number is bigger."")
    #Check if your guess is bigger than the number and if it is, tells them that
    elif (guess > num):
        print(""You guess is too big. The number is smaller."")"
Suhurrith Adhikari,"December Submission: Problem 1: Suhurrith Adhikari

# Basically in this question, we take in a String input and return a string
# Edge Cases 1: What happens if there is a space between ""race car"", does it still count as a palindrome#Edge Case 2: additionally the function is NOT case-sensitive seen in example ""Racecar"", which still counts as a palindrome
#Taking in a string input for the functiondef is_palindrome(s):        # Standardize the text by making everything lowercase    s = s.lower()        #even if there are spaces in the string, please remove the space and delete which standardizes the text    s = s.replace("" "", """")    s = s.replace("","", """")    s = s.replace(""."", """")    s = s.replace(""/"", """")        # This feature uses indexing feature in Python to check whether the string is the same as when it is reversed.    #Additionally if the string is empty it should not be a palindrome, therefore the length of the string must be greater than 0    if (s == s[::-1]) and (len(s) != 0):        return ""The string is a palindrome.""    else:        return ""The string is not a palindrome.""
#Testing:
print(is_palindrome(""racecar"")) #Output: The string is a palindrome
print(is_palindrome(""Racecar"")) #Output: The string is a palindrome
print(is_palindrome(""race car"")) #Output: The string is a palindrome
print(is_palindrome(""Hello""))#Output: The string is not a palindrome
print(is_palindrome("""")) #Output: The string is not a palindrome
print(is_palindrome(""race,car"")) #Output: The string is a palindrome","December Submission: Problem 2: Suhurrith Adhikari

# Function does takes in user input of the shape, and then based on the shape the function will get the area.
# using the math library to do so me calculations such as accessing the precise value of pi
# Edge case #1: The shape is not among the shapes that will get the area, we will use else to say that it is an invalid shape
#Edge case #2; the specifc values such as the radius, side length, width must be an actual number so used an if-else to suppress errorsimport math
def calculate_area():    print(""I can calculate the area of a shape for you."")    print(""Which shape do you want me to calculate the area of? (circle, rectangle, square, triangle)"")
    # With user input getting the shape by removing whitespace and standardizing text by lowercasing all inputs.    shape = input(""Enter the name of the shape: "").strip().lower()
    # Circle: the area is a pi * (radius) ^2    if shape == ""circle"":        radius = input(""Enter the radius of the circle: "")        if radius.isdigit() and float(radius) > 0:            radius = float(radius)            area = math.pi * radius**2            print(f""The area of the circle is {area:.2f}."")        else:            print(""Invalid radius. Please enter a positive number."")
    # Rectangle: area is length * width    elif shape == ""rectangle"":        length = input(""Enter the length of the rectangle: "")        width = input(""Enter the width of the rectangle: "")        if length.isdigit() and width.isdigit() and float(length) > 0 and float(width) > 0:            length = float(length)            width = float(width)            area = length * width            print(f""The area of the rectangle is {area:.2f}."")        else:            print(""Invalid length or width. Please enter positive numbers."")
    # the shape square's area is sidelength to the power of 2    elif shape == ""square"":        side = input(""Enter the side length of the square: "")        if side.isdigit() and float(side) > 0:            side = float(side)            area = side**2            print(f""The area of the square is {area:.2f}."")        else:            print(""Invalid side length. Please enter a positive number."")
    # the shape triangle's area is 1/2 * b * h    elif shape == ""triangle"":        base = input(""Enter the base of the triangle: "")        height = input(""Enter the height of the triangle: "")        if base.isdigit() and height.isdigit() and float(base) > 0 and float(height) > 0:            base = float(base)            height = float(height)            area = 0.5 * base * height            print(f""The area of the triangle is {area:.2f}."")        else:            print(""Invalid base or height. Please enter positive numbers."")
    # edge case else statement    else:        print(""Invalid shape. Please choose from circle, rectangle, square, or triangle."")
#testingcalculate_area()","December Submission: Problem 3: Suhurrith Adhikari

# Function takes in a string and returns a boolean
#Edge case #1: Make sure the function is not case-sensitive by standarizing all of the text by making everything lowercase
#Edge case #2: IF there are any spaces, replace them with no spaces.
#Edge case #3: Make sure that the length of the string is NOT 0, seen in the if statement below, Basically, avoiding empty strings.
#Main functionality is that set() will automatically remove all duplicated lettersdef unique_characters(s):        #Making all of the characters in the string lowercase    s.lower()        #Replace all of the spaces with NO spaces    s.replace("" "", """")        #Making sure that the string is NOT empty    if (len(s) != 0):
        # the set() functionality already removes duplicated letters of a string        reordered_str = set(s)        return len(s) == len(reordered_str)    else:        return ""Please retype the string with actual letters""
print(unique_characters(""abcdef""))  # Output: Trueprint(unique_characters(""hello"")) # Output: False","December Submission: Problem 4: Suhurrith Adhikari

#Getting user input which SHOULD be a number from 1 to 100
# edge case #1: include invalid input such as a letter, meaning we should check whether the input is a number or string
# edge case #2: What if the user's guess is less than 0 or greater than 100, we should tell them to retry and guess between 1-100
#We need to use the random library in order to the randin method which will allow us to get a random number from 1 to 100import random
def guessing_game():        #Using the ""random"" library    rand_num = random.randint(1,100)    print(""Welcome to the Number Guessing Game."")    print(""I am thinking of a number from 1 to 100, can you guess it?"")        while True:        #using user input and getting an integer from user_input as guess        user_input = input(""Enter your guess from 1 to 100: "")                # If the guess is not a digit, lets them guess again        if not user_input.isdigit():            print(""Invalid input. Please enter a number."")            continue # Let them try to guess again                #Conversting the user_input to an integer        guess = int(user_input)                #Making sure that the guess is in the range of 1 and 100        if guess < 1 or guess > 100:            print(""Out of range. Please enter a number between 1 and 100."")            continue # Let them try to guess again                # Now it actually checks the guess against the random number, if it is higher than to smaller        if guess < rand_num:            print(""Too low! Guess again!"")        elif guess > rand_num:            print(""Too high! Guess again!"")        else:            print(f""Nice! You guessed the right number which was: {rand_num}."")            break        
# testingguessing_game()"
Hansika	Perisetty,"December Submission: Problem 1: Hansika	Perisetty

public class Palindrome {
    private String word;
    public Palindrome(String w) {        word = w;    }
    // Method to reverse a string    public String reverse(String word) {        String reversed = """";        for (int i = word.length() - 1; i >= 0; i--) {            reversed += word.substring(i, i + 1); // Get each character        }        return reversed;    }
    // Method to check if the string is a palindrome    public String isPalindrome() {        String reversed = reverse(word); // Call the reverse method        if (word.equalsIgnoreCase(reversed)) { // Ignore case when comparing (uppercase, lowercase, etc.)            return ""The string is a palindrome."";        } else {            return ""The string is not a palindrome."";        }    }    }
 
public class Main {    public static void main(String[] args) {        Palindrome p = new Palindrome(""Racecar"");        System.out.println(p.isPalindrome());    }}","December Submission: Problem 2: Hansika	Perisetty

import java.util.Scanner;
public class AreaCalculator {    public static void main(String[] args) {        System.out.println(""I can calculate the area of a shape for you."");        System.out.println(""Which shape do you want me to calculate the area of?"");                Scanner scanner = new Scanner(System.in); // Create a scanner object        String shape = scanner.nextLine(); // Read the shape input                if (shape.equals(""circle"")) {            System.out.println(""Radius? "");            int radius = scanner.nextInt();            scanner.nextLine(); // Clear the buffer            System.out.println(""Area: "" + (Math.PI * Math.pow(radius, 2)));        } else if (shape.equals(""rectangle"")) {            System.out.println(""Length and Width? "");            int length = scanner.nextInt();            int width = scanner.nextInt();            scanner.nextLine(); // Clear the buffer            System.out.println(""Area: "" + (length * width));        } else if (shape.equals(""square"")) {            System.out.println(""Side Length? "");            int sideLength = scanner.nextInt();            scanner.nextLine(); // Clear the buffer            System.out.println(""Area: "" + (sideLength * sideLength));        } else if (shape.equals(""triangle"")) {            System.out.println(""Base and Height? "");            int base = scanner.nextInt();            int height = scanner.nextInt();            scanner.nextLine(); // Clear the buffer            System.out.println(""Area: "" + (0.5 * base * height));        } else {            System.out.println(""Invalid shape! Please enter 'circle', 'rectangle', 'square', or 'triangle'."");        }    }}","December Submission: Problem 3: Hansika	Perisetty

public class Unique {    private String word;
    // Constructor to initialize word    public Unique(String w) {        word = w;    }
    // Method to check if the string has unique characters    public boolean isUnique() {        for (int i = 0; i < word.length() - 1; i++) {            // Compare current character with the next character            if (word.substring(i, i + 1).equals(word.substring(i + 1, i + 2))) {                return false; // Return false if a duplicate is found            }        }        return true; // Return true if no duplicates are found after the loop    }        public static void main(String[] args) {        Unique string = new Unique(""hello"");        System.out.println(string.isUnique()); // Output: false (because 'l' repeats)
        Unique string2 = new Unique(""abc"");        System.out.println(string2.isUnique()); // Output: true (no duplicates)    }
}","December Submission: Problem 4: Hansika	Perisetty

import java.util.Scanner;import java.util.Random;
public class GuessingGame {        public static void main(String[] args) {        // Create an instance of the Scanner class to read user input        Scanner scanner = new Scanner(System.in);                // Create an instance of the Random class to generate a random number        Random random = new Random();                // Generate a random number between 1 and 100 (inclusive)        int numberToGuess = random.nextInt(100) + 1;                // Variable to hold the user's guess        int userGuess = 0;                // Introduce the game        System.out.println(""I have chosen a number between 1 and 100."");        System.out.println(""Guess? "");                // Loop until the user guesses the number correctly        while (userGuess != numberToGuess) {            // Ask the user for a guess            System.out.print(""Enter your guess: "");            userGuess = scanner.nextInt();                        // Provide feedback based on the user's guess            if (userGuess < numberToGuess) {                System.out.println(""The number is larger. Try again."");            } else if (userGuess > numberToGuess) {                System.out.println(""The number is smaller. Try again."");            } else {                System.out.println(""Congratulations! You guessed the correct number."");            }        }            }}"
Jaime Rodriguez,"December Submission: Problem 1: Jaime Rodriguez


#create a program that detects if a word is a palindrome#I remember doing this once using [start:stop:step] with some help#I'll try using the same strategy""""""input(word)if word == [::-1]print(This is a palindrome)""""""word = input(""Input a word: "")if word == word[::-1]:    print(f""{word} is a palindrome!"")else:    print(f""{word} is not a palindrome!"")    #solved in ~4 minutes","December Submission: Problem 2: Jaime Rodriguez


#Create a program the calculates the area of 2D shapes#The shapes will be: circle, rectangle, square, and triangle#lets begin with circle""""""if input == ""circle"":r = input radiusreturn(πr2)          #This will likely require the math module""""""#next is rectangle""""""if input == ""rectangle"":w = input widthh = input heightreturn(w*h)""""""#now square""""""if input == ""square"":l = input side lengthreturn(l*l)""""""#and lastly, triangle""""""if input == ""triangle"":b = input baseh = input heightreturn((b*h)/2)""""""import mathdef area_circle():    while True:        try:            r = int(input(""What is the radius?: ""))            print(f""Area: {math.pi * r**2}"")        except ValueError:            print(""Invalid input. Please input a number."")        else:            breakdef area_rectangle():    while True:        try:            w = int(input(""What is the width?: ""))            h = int(input(""What is the height?: ""))            print(f""Area: {w*h}"")        except ValueError:            print(""Invalid input. Please input a number."")        else:            breakdef area_square():    while True:        try:            l = int(input(""What is the side length?: ""))            print(f""Area:{l*l}"")        except ValueError:            print(""Invalid input. Please input a number."")        else:            breakdef area_triangle():    while True:        try:            b = int(input(""What is the base?: ""))            h = int(input(""What is the height?: ""))            print(f""Area: {(b*h)/2}"")        except ValueError:            print(""Invalid input. Please input a number."")        else:            breakwhile True:    shape = input(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of?: "")    print()    if shape.lower() == ""circle"":        area_circle()    elif shape.lower() == ""rectangle"":        area_rectangle()    elif shape.lower() == ""square"":        area_square()    elif shape.lower() == ""triangle"":        area_triangle()    else:        print(""Invalid shape. Please try: Circle, Rectangle, Square, or Triangle"")#Solved in ~25 minutes","December Submission: Problem 3: Jaime Rodriguez


#Create a program that detects if there are no repeating characters in a string#Okay, repeating characters in a string.#I can go through each character in the string and add it to a list#Using this, I can check past characters to see if same ones show up""""""characters = []for character in string:    if character in characters:        False    else:        character.append(characters)True""""""string = input(""Input a string: "")characters = []for character in string:    if character in characters:      #This checks if the same character is in that list        print(False)        break    elif character not in characters:        characters.append(character)  #I add each character to that listelse:    print(True)  #Used a bit of help from Google to the True to print correctly#Spaces are considered characters, so if there's multiple the program will print False#Empty inputs dont have repeating characters. It will just print True#Took ~30 minutes to solve","December Submission: Problem 4: Jaime Rodriguez


#Number guessing game where user guesses numbers between 1-100#We will give to user hints to higher or lower based on their guesses#I will use the Random module for this one""""""import randomnumber = random number(1, 100)input(user guess)if guess>number:    go lowerelif guess<number:    go higherelse:    invalid input""""""import randomnumber = random.randint(1,100)  #We get a random number between 1-100while True:    try:        while True:            print()            guess = int(input(""Guess a number between 1 and 100: ""))            if guess>100 or guess<1:                print(""Invalid input."")   #make sure the user doesn't input something invalid            else:                break    except ValueError:        print(""Invalid input. Please input a whole number."")    if guess>number:        print(""Guess lower"")    elif guess<number:             #These are the hints for the user        print(""Guess higher"")    else:        print(f""You got it! The number was {number}"")        break#Took ~20 minutes to solve"
Bennie-Nwei Fundoh,"December Submission: Problem 1: Bennie-Nwei Fundoh

I'm having a hard time solving the code. This was what I was stuck in. 
Steps:    - Asign four words to four variables    - Use a define function to check if each word is a palindrome or not         - If the words reads the same backwards             - Print ""The string is a palindrome""        - If the word doesn't read the same backwards             - Print ""The string isn't a palindrome""""""""
word_1 = ""racecar""word_2 = ""iceland""word_3 = ""world war""word_4 = ""yam in may""
def palindrome(word):  word.split()  word.reverse()  for letter in word:    if word == letter:      print(""The string is a palindrome"")    if word != letter:      print(""This string is not a palindrom"")palindrome(word_1)palindrome(word_2)palindrome(word_3)palindrome(word_4)","December Submission: Problem 2: Bennie-Nwei Fundoh

""""""I am tasked to create a program that calculates a shape's formula, and provide the correct answer. 
Steps     - Prompt the user for a shape. (circle, triangle, rectangle, square, ect)     - Create a define function that prompts the user for the sizes depending on the user's choosen shape         - Prompt for a radius for a circle         - Prompt for length and width for a rectangle         - Prompt for a side length for a square          - Prompt for a base and height for a triangle     - Calculate the shape using thier corresponding formula and sizes         - Circle Area formula - 3.14 * raduis^2          - Rectangle Area formula - length * width          - Triangle Area formula - 1/2(base*height)         - Square Area formula - side length * side length""""""""""""I am tasked to create a program that calculates a shape's formula, and provide the correct answer. 
Steps     - Prompt the user for a shape. (circle, triangle, rectangle, square, ect)     - Create a define function that prompts the user for the sizes depending on the user's choosen shape         - Prompt for a radius for a circle         - Prompt for length and width for a rectangle         - Prompt for a side length for a square          - Prompt for a base and height for a triangle     - Calculate the shape using thier corresponding formula and sizes         - Circle Area formula - 3.14 * raduis^2          - Rectangle Area formula - length * width          - Triangle Area formula - 1/2(base*height)         - Square Area formula - side length * side length""""""print(""I can calculate the area of a shape for you. Which of the followings do you want me to calculate the area of?"")user_shape = input(""circle, triangle, rectangle, square? "")
def shape():    if user_shape == 'circle':        radius = int(input(""What is your radius: ""))        circle_area = 3.14 * radius        print(f"" Your area will be {circle_area}"")    if user_shape == 'rectangle':        length = int(input(""What is your length: ""))        width = int(input(""What is your width: ""))        rectangle_area = length * width        print(f"" Your area will be {rectangle_area}"")    if user_shape == 'triangle':        base = int(input(""What is your base: ""))        height = int(input(""What is your height: ""))        triangle_area = 1/2 * base * height        print(f"" Your area will be {triangle_area}"")    if user_shape == 'square':        side_length = int(input(""What is the side length: ""))        square_area = side_length  * side_length        print(f"" Your are will be {square_area }"")shape()","December Submission: Problem 3: Bennie-Nwei Fundoh

""""""Steps:    - Assign ""abcdef"" to a variable, and ""hello"" to a variable    - Split both strings to a list    - Loop through each letter of the list to check for any unique characters        - If there are similar letters in the string             - Print False        - If there aren't similar letters in the string             - Print True"""""" 
word_1 = ""abcdef"" word_2 = ""hello""
def unique(word):  word.split()  for letter in word:    if letter != letter:      print(False)    if letter == letter:      print(True)unique(word_1)unique(word_2)
 
I have tried my best. I can't seem to understand this code","December Submission: Problem 4: Bennie-Nwei Fundoh

""""""I am tasked to program a guessing game that will prompt the user to guess a number from 1 to 100
Steps    - Prompt the program to generate a random number from 1 - 100    - Prompt the user for a number    - Repeat until user number equals to generated number        - If the number is greater than the generated number             - Print ""Your number is too high. Try a lower number""        - If the number is lower than the generated number            - Print ""Your number is too low. Try a higher number""        - If the number is equal to the generated number             - Print ""Congratulation you have guessed the correct number""""""""
import random as rd
number = rd.randint(1, 100)user_number = int(input(""Choose a number from 1 to 100: ""))
while user_number != number:  if user_number < number:    print(""Your number is too high. Try a lower number"")  if user_number > number:    print(""Your number is too low. Try a higher number"")  if user_number == number:    print(""Congratulation you have guessed the correct number"")  user_number = int(input(""Choose a number from 1 to 100: ""))"
Sebastian Esquivel,"December Submission: Problem 1: Sebastian Esquivel

https://codesandbox.io/p/devbox/december-problems-h2vv2z","December Submission: Problem 2: Sebastian Esquivel

https://codesandbox.io/p/devbox/december-problems-h2vv2z","December Submission: Problem 3: Sebastian Esquivel

https://codesandbox.io/p/devbox/december-problems-h2vv2z","December Submission: Problem 4: Sebastian Esquivel

https://codesandbox.io/p/devbox/december-problems-h2vv2z"
Derek Perkins,"December Submission: Problem 1: Derek Perkins

'''
Description:
Create a program that checks whether a given string is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forwards and backwards (ignoring spaces, punctuation, and capitalization).
Example:
Input: ""Racecar""
Output: ""The string is a palindrome.""
Input: ""Hello""
Output: ""The string is not a palindrome.""
'''
def main():  user_input = input('Input').lower().replace("" "", """").replace("":"", """").replace(""."", """").replace("","", """").replace("";"", """") # turns to lowercase then removes all spaces, ignoring uppercase/removing punctuation  if user_input == user_input[::-1]: # splicing, returns a reversed version of object/ string or list    print(""The string is a palindrome."")  else:    print(""The string is not a palindrome."")main()","December Submission: Problem 2: Derek Perkins

'''
Create a program that says: ""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of?"" and then asks the user to type in the name of a shape (e.g., triangle, rectangle, square, circle).
Then, depending on which shape the user types, the program will ask for the relevant measurements:
If they choose circle, prompt for the radius.If they choose rectangle, prompt for the length and width.If they choose square, prompt for the side length.If they choose triangle, prompt for the base and height.
'''import math # for pidef calculate(user_input):  print(""----CALCULATING----"")  if user_input == ""circle"": # checks between the four    while True: # repeats until it returns area      radius = input(""Enter a radius: "")      try:         rad = int(radius)        return math.pi*rad**2 # math      except ValueError: # error dealing with values of stuff like ints        print(""Make sure to use numbers."")  elif user_input == ""rectangle"":    while True: # repeats until it returns area      length = input(""Enter a length: "")      width = input(""Enter a width: "")      try:        total = int(length) * int(width) #math        return total      except ValueError:        print(""Make sure to use numbers."")  elif user_input == ""square"":    while True: # repeats until it returns area      length = input(""Enter the side length: "")      try:        total = int(length) ** 2 #math        return total      except ValueError:        print(""Make sure to use numbers."")  elif user_input == ""triangle"":    while True: # repeats until it returns area      base = input(""Enter a base: "")      height = input(""Enter a height: "")      try:        total = (int(base) * int(height))/2 #math        return total      except ValueError:        print(""Make sure to use numbers."")  else:    print(""Please enter a valid shape."")  print(""-------------------"")
def main():  end = False # condition for ending program  while not end: # checks if the program hasnt been ended    user_input = input(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of? (x to end) "").lower() # sets to lowercase    if user_input == ""x"": # ends if user inputs x      end = True    else:      area = calculate(user_input)      if area: # checks if something is returned        print(f'{user_input} area: {area}')main()","December Submission: Problem 3: Derek Perkins

'''
Description:
Create a function that determines whether all characters in a given string are unique. If the string has all unique characters, return True; otherwise, return False.
Example:
Input: ""abcdef""
Output: True
Input: ""hello""
Output: False
'''
def main():  counted_chars = '' # holds the characters that were already counted  is_unique = True # defaults to true unless changed  user_input = input('Enter an input').replace("" "","""") # removes spaces  for char in user_input:    if char in counted_chars: # checks if a character is in characters already counted      is_unique = False # not unqiue anymore      break    counted_chars += char # adds character to the counted characters  return is_uniquemain()","December Submission: Problem 4: Derek Perkins

'''
Create a program that plays a guessing game with the user. The program will choose a random number between 1 and 100, and then ask the user to guess the number.
If the user guesses correctly, the program congratulates the player and ends the game.If the user's guess is too high, the program tells them the answer is smaller and lets them guess again.If the user's guess is too low, the program tells them the answer is larger and lets them guess again
'''
import random # random module for random number
def check(number, guess): # takes in number and guess  if guess == number: # checks if guess and number are the same    return True  else: # otherwise check for bigger or smaller and print corresponding values    if guess > number:      print(""The answer is smaller..."")    elif guess < number:      print(""The answer is larger..."")    return False
def getGuess():  while True: # repeats until user enters valid number    try:      guess = int(input(""Guess the random number.. 1-100: "")) # sees if number is an int      return guess # returns the input    except Exception: # if. not the it tells user to enter a valid guess and reruns loop      print(""Enter a valid guess.."")
def main():  randomNum = random.randrange(1,101) # gets random number 1-100  guess = getGuess() # gets the user input as a number  while not check(randomNum, guess): # repeats until user guesses correctly    print(""Try again!"")    guess = getGuess() # prints try again message and tells user to re-guess  print('Correct!') # if they guess correctly then it prints correct, and the game endsmain()"
Azul Castillo,"December Submission: Problem 1: Azul Castillo


def is_palindrom(s):
    return s == s[::-1]

is_palindrom()
s = input(""Place your world to confirm it's a palindrom: "")
if len(s) <= 1:
    print(""This is considered a palindrom"")
else:
    False
A situation I still has was trying to get the user input to work. The purpose of this code was to gain the user's word to confirm if it was a palindrome.
If it came true, it would tell the user that it was correct. If not, it would tell them it was incorrect.","December Submission: Problem 2: Azul Castillo


user_input = input('I can calculate the area of a shape for you. Which shape do you want me to calculate the area of?: ')
if user_input == 'square':
    return square
if user_input == 'circle':
    return circle
if user_input == 'rectangle':
    return rectangle
if user_input == 'triangle':
    return triangle
elif user_input == "" "":
    print('That is not an option, please try again.')
else:
    print('That is not an option, try again')

def square():
    num1 = int(input('What will be your number? '))
    return 4 * num1

def rectangle():
    length = int(input('What is your length number? '))
    width = int(input('What would be your width number? '))
    return length * width

def circle():
    diameter = int(input('What is your diameter? '))
    radius = diameter / 2
    return 3.14 * radius

def triangle():
    height = int(input('What will be your height ?'))
    base = int(input('What is your base number? '))
    return height * base / 2","December Submission: Problem 3: Azul Castillo

def count_unique_chars(string):
  return len(set(string))
*The len() function counts the number of characters, and the set() function removes any duplicate letters.
 
string = input('Place one word: ')
unique_count = count_unique_chars(string)
 
print(unique_count)","December Submission: Problem 4: Azul Castillo


import random

low = 1
high = 100
user_guesses = 0
number = random.randint(low, high)
print(number)

while True:
    user_guess = input(f'Guess a number between {low} - {high}: ')
    user_guesses += 1

    if user_guess > number:
        print(f'{user_guess} is too high, try again:' )
    elif user_guess < number:
        print(f'{user_guess} is too low, try again')
    else:
        print(f'{user_guess} is correct. ')"
Yvaine Liew,"December Submission: Problem 1: Yvaine Liew

Here is the link: https://codesandbox.io/p/devbox/9p2r74 
Or you can look at the code:
* Note: couldn't do tabs

'''
Problem - Create a function to check if the given string is a palindrome

Need to get rid of capitalization, punctuation, and empty spaces.

function

make it lower
replace spaces and punctuation with empty from a string with it all

check if the string is equal to it reversed
if so return true else return false
'''

def is_palindrome(s):
# Making it all lowercase
 s = s.lower()

# All the things to replace
 replacing = ""''!()-[]{} ;:\""\,<>./?@#$%^&*_~''""

# Replacing it
for ele in replacing:
 s = s.replace(ele, """")

# Checking and returning if it is a palindrome
if s == s[::-1]:
return ""The string is a palindrome.""
else:
return ""The string is not a palindrome.""","December Submission: Problem 2: Yvaine Liew

This is the link. Same as before but in another file: https://codesandbox.io/p/github/yvaine8888/DecemberCodingPractice/main 
This is the code. Can ident now for some reason:

'''
Problem - Create a program that gets the area based on the shape.

function
get the shape

use if, elif, and else statements to calculate the area

then you return the area (I'm doing it as a string)
Make sure to return an error message if input is wrong like incorrect shape or not a number
'''

def get_area():
    # Asking for the shape to calculate the area
    shape = input(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of? "")
    shape = shape.lower()
    
    #Calculating the area based on shape and return error messages.
    area = 0
    if shape == ""circle"":
        radius = input(""Please enter the radius: "")
        if is_not_num(radius):
            return ""I'm sorry, but this is not valid.""
        radius = float(radius)
        area = radius*radius*3.14
    elif shape == ""rectangle"":
        length = input(""Please enter the length: "")
        if is_not_num(length):
            return ""I'm sorry, but this is not valid.""
        width = input(""Please enter the width: "")
        if is_not_num(width):
            return ""I'm sorry, but this is not valid.""
        length = float(length)
        width = float(width)
        area = length * width
    elif shape == ""square"":
        side_length = input(""Please enter the side-length: "")
        if is_not_num(side_length):
            return ""I'm sorry, but this is not valid.""
        area = side_length * side_length
    elif shape == ""triangle"":
        base = input(""Please enter the base: "")
        if is_not_num(base):
            return ""I'm sorry, but this is not valid.""
        height = input(""Please enter the height: "")
        if is_not_num(height):
            return ""I'm sorry, but this is not valid.""
        base = float(base)
        height = float(height)
        area = base * height / 2
    else:
        return ""I'm sorry, but it is an invalid shape. Please check spelling.""

    # Returning the area as a string.
    return f""The area of a {shape} is {area}.""

# This returns if it is not a num for error messages.
def is_not_num(str):
    try:
        str = float(str)
        return False
    except:
        return True","December Submission: Problem 3: Yvaine Liew

Same link as before but another file: https://codesandbox.io/p/github/yvaine8888/DecemberCodingPractice/main 
Code:

'''
Problem - Create a function that determines if all characters in a string are unique.

function

use a for loop through the string to check if it occurs more than once.
that means another for loop.
if it does return false
Note: I consider spaces to be a character so it will return false if there are multiple spaces.
I also consider captilization to be different letters and empty strings to be unique.
'''

def is_unique(s):
    # Going through each element to see if there is more than one of it
    for ele in s:
        count = 0
        #Checking it
        for char in s:
            if ele == char:
                count = count + 1
        # Returning false if more than one count
        if count > 1:
            return False
    # Returning true if okay
    return True","December Submission: Problem 4: Yvaine Liew

Link: https://codesandbox.io/p/github/yvaine8888/DecemberCodingPractice/draft/autumn-hill 
Code:

'''
Problem - Create a program to play a number guessing game.

get a random 1-100

create a while loop that keeps on asking the user for a number 1-100
inside the loop
if not a number say so then continue

if correct, break
if more than 100 or less than 1, tell so
if greater, tell smaller
if smaller, tell greater
'''
import random
# Getting the correct number
num = random.randint(1, 100)

# The while loop that allows the user to guess and prints when the input is incorrect or correct.
while True:
    print()
    # The user's guess
    guess = input(""Please guess a number 1-100: "")
    # Printing error if the input is not a number else make it an integer
    try:
        guess = int(guess)
    except:
        print(""Please guess a valid number next time."")
        continue
    
    # Tell if the number is corect or incorrect and print messages based on that.
    if guess == num:
        print(""Congratulations! You guessed the right number."")
        break
    elif guess > 100 or guess < 1:
        print(""Please guess a number 1-100 next time."")
    elif guess > num:
        print(""Your guess is too high. Try a smaller number."")
    else:
        print(""Your guess is too low. Try a larger number."")"
Shamah Amichoh,"December Submission: Problem 1: Shamah Amichoh

a = input(""enter a word "")reversed_a = a[::-1]if a == reversed_a:  print(""this is a palindrome"")else:  print(""this is not a palindrome"")",,"December Submission: Problem 3: Shamah Amichoh

# we need to create a function that determines if all the characters in a given string are unique
# we might have to use a dictionary to store the characters and their counts# we might need a for lop to iterate through the string and add each element to our dictionary
def checkUnique(a):  # define and empty list  in_string = []  #loop through the string  for character in a:    # if the certain index value is in my list then that means the character appeard twice return false    if character in in_string:      return False     #else add that value to my list and continue the loop     else:      in_string.append(character)      #added a print statement for debugging and for a visual representation       print(in_string)  # return true if return false didn't trigger   return True
print(checkUnique(""shamah""))","December Submission: Problem 4: Shamah Amichoh

# first we need to generate a  random number so we need to import randomimport random# get the random numbernumber = random.randint(1, 100)# set correct to false so i can keep looping the questioncorrect = Falsewhile  not correct:  guess = int(input(""Guess the number ""))  if guess > number:    print(""your guess is to high"")  elif guess < number:    print(""your guesse is to low"")  else:    correct = True          print(""Nice you guesed the number it was "" + str(number))"
Patrick Wilson,"December Submission: Problem 1: Patrick Wilson

def is_palindrome(s):    """"""    Check if a given string is a palindrome.    :param s: str, input string    :return: str, result message    """"""    # Step 4: Solve
    # Normalize the string: remove non-alphanumeric characters and convert to lowercase    normalized = ''.join(char.lower() for char in s if char.isalnum())
    # Compare the normalized string to its reverse    if normalized == normalized[::-1]:        return ""The string is a palindrome.""    else:        return ""The string is not a palindrome.""
# Test casesif __name__ == ""__main__"":    test_strings = [        ""Racecar"",  # Palindrome        ""Hello"",    # Not a palindrome        ""A man, a plan, a canal: Panama"",  # Palindrome        """",         # Palindrome (empty string)        ""No lemon, no melon""  # Palindrome    ]
    for test in test_strings:        print(f""Input: {test}\nOutput: {is_palindrome(test)}\n"")","December Submission: Problem 2: Patrick Wilson

import math
def calculate_area():    """"""    Calculate the area of a shape based on user input.    """"""    print(""I can calculate the area of a shape for you."")    print(""Which shape do you want me to calculate the area of?"")
    # Prompt user for the shape    shape = input(""Enter the shape (circle, rectangle, square, triangle): "").strip().lower()
    # Handle each shape and calculate the area    if shape == ""circle"":        try:            radius = float(input(""Enter the radius of the circle: ""))            if radius < 0:                print(""Radius cannot be negative. Please try again."")            else:                area = math.pi * radius ** 2                print(f""The area of the circle is: {area:.2f}"")        except ValueError:            print(""Invalid input. Please enter a number for the radius."")
    elif shape == ""rectangle"":        try:            length = float(input(""Enter the length of the rectangle: ""))            width = float(input(""Enter the width of the rectangle: ""))            if length < 0 or width < 0:                print(""Length and width cannot be negative. Please try again."")            else:                area = length * width                print(f""The area of the rectangle is: {area:.2f}"")        except ValueError:            print(""Invalid input. Please enter numbers for the length and width."")","December Submission: Problem 3: Patrick Wilson

def has_unique_characters(s):    """"""    Determine if a string has all unique characters.    :param s: str, input string    :return: bool, True if all characters are unique, False otherwise    """"""    # Use a set to track characters already seen    seen = set()
    for char in s:        if char in seen:            return False  # Duplicate character found        seen.add(char)
    return True  # All characters are unique","December Submission: Problem 4: Patrick Wilson

import random
def guessing_game():    """"""    A simple number guessing game.    The program chooses a random number between 1 and 100, and the user guesses until correct.    """"""    print(""Welcome to the SWAMP Guessing Game!"")    print(""I have selected a random number between 1 and 100."")    print(""Try to guess it!"")
    # Generate a random number between 1 and 100    target_number = random.randint(1, 100)
    while True:        try:            # Ask the user for their guess            guess = int(input(""Enter your guess: ""))
            if guess < 1 or guess > 100:                print(""Please enter a number between 1 and 100."")                continue
            # Check the guess            if guess < target_number:                print(""Too low! Try again."")            elif guess > target_number:                print(""Too high! Try again."")            else:                print(""Congratulations! You guessed the correct number."")                break
        except ValueError:            print(""Invalid input. Please enter a valid number."")
# Run the gameif __name__ == ""__main__"":    guessing_game()"
Krish Bhalani,"December Submission: Problem 1: Krish Bhalani


import java.util.*;
//imports scanner class needed for user input
public class palindrome {
    public static void main (String args[]){
        Scanner x = new Scanner(System.in);
        //allows for user to type there info
        System.out.println(""What is the word?"");
        //user input
        String a = x.nextLine();
        //stores user input and .nextLine() allows for a sentences rather then one word

        String b = new StringBuilder(a).reverse().toString();
        //Creates the orignal input which is stored in a and reverses it and puts as b

        //https://www.geeksforgeeks.org/stringbuilder-reverse-in-java-with-examples/

        if (a == b){
            System.out.println(a + "" is a palindrome"");
            //Checks if the orignal output is = to reverse output beacause if so, it is a palindrome
        }
        else{
            System.out.println(a + "" is not a palindrome"");
            //checks for non palindromes
        }

        

        

    }
}","December Submission: Problem 2: Krish Bhalani


import java.util.*;
public class area {
    public static void main(String[] args) {
        Scanner x = new Scanner(System.in);

        System.out.println(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of? Type c, r, s, or q"");
        String a = x.nextLine();
        //gives options to make easier on what to choose

        if (a == ""c""){
            //checks what input is and if it matches do the thing below
            System.out.println(""What is radius?"");
            int b = x.nextInt();
            System.out.println(""Area is "" + 3.14*b*b);
            //calculation done based on input

        }

        if (a == ""r""){
            //checks what input is and if it matches do the thing below
            System.out.println(""What is length?"");
            int c = x.nextInt();
            System.out.println(""What is width?"");
            int d = x.nextInt();
            System.out.println(""Area is "" + c*d);
            //calculation done based on input

        }

        if (a == ""s""){
            //checks what input is and if it matches do the thing below
            System.out.println(""What is side length?"");
            int e = x.nextInt();
            System.out.println(""Area is "" + e*e);
            //calculation done based on input

        }

        if (a == ""q""){
            //checks what input is and if it matches do the thing below
            System.out.println(""What is base?"");
            int f = x.nextInt();
            System.out.println(""What is height?"");
            int g = x.nextInt();
            System.out.println(""Area is "" + .5*f*g);
            //calculation done based on input

        }

    }
}","December Submission: Problem 3: Krish Bhalani


import java.util.*;
public class unique {
    public static void main(String[] args) {
        Scanner x = new Scanner(System.in);
        System.out.println(""What is the word?"");
        String a = x.nextLine();
        //ask user for word

        

        for(int b=0; b >= a.length(); b++){
            //for loop that chackes if letter has been found
            char c = a.charAt(b);
            //sees char at each letter
            if (c == b){
                System.out.println(""False"");
                //checks if charecter found is in word, if so, repeats so false
            }else{
            
                System.out.println(""True"");            
            }
        }

  

    }
}","December Submission: Problem 4: Krish Bhalani


import java.util.*;
//imports scanner and math.random (* imports everything)
public class numberguess {
    public static void main(String[] args) {
        Scanner x = new Scanner(System.in);
        Random random = new Random();
        //https://www.geeksforgeeks.org/generating-random-numbers-in-java/
        int a = random.nextInt(100) + 1;
        //chooses random number 0-99 and+1 ensures its 0-100

        System.out.println(""What is ur number?"");
        int b = x.nextInt();
        //asks user the number they guess

        if (a > b){
            System.out.println(""too low"");
            //shows number low then actual number by comparing real number with user input
        }
        if (a < b){
            System.out.println(""too high"");
            //shows number high then actual number by comparing real number with user input

        }
        else {
            System.out.println(""You got the number!"");

            //shows number exact by comparing real number with user input

        }

    }
}"
Elisha Elesho,"December Submission: Problem 1: Elisha Elesho

def is_palindrome(input_str):"""""" Check if a given string is a palindrome.Args:input_str (str): The string to be checked.Returns:str: Message indicating whether the string is a palindrome or not.""""""#Step 1: Pre-process string by removing non-alphanumeric characters and changing case to lowercleaned_str = ''.join(char.lower() for char in input_str if char.isalnum())#Step 2: Check whether pre-processed string is the same forwards and backwardsif cleaned_str == cleaned_str[::-1]:return ""The string is a palindrome.""else:return ""The string is not a palindrome.""# Unit testsif __name__ == ""__main__"":# Testing example casesprint(is_palindrome(""Racecar"")) # Output: ""The string is a palindrome.""print(is_palindrome(""Hello"")) # Output: ""The string is not a palindrome.""# Testing for edge casesprint(is_palindrome("""")) # Output: ""The string is a palindrome.""print(is_palindrome(""A man, a plan, a canal, Panama"")) # Output: ""The string is a palindrome.""print(is_palindrome(""12321"")) # Output: ""The string is a palindrome.""print(is_palindrome(""12345"")) # Output: ""The string is not a palindrome.""","December Submission: Problem 2: Elisha Elesho

def is_palindrome(input_str):""""""Check if a given string is a palindrome.Args:input_str (str): The string to check.Returns:str: Message indicating if the string is a palindrome.""""""# Remove non-alphanumeric characters and make everything lowercasecleaned_str = ''.join(char.lower() for char in input_str if char.isalnum())# Compare the cleaned string to its reverseif cleaned_str == cleaned_str[::-1]:return ""The string is a palindrome.""else:return ""The string is not a palindrome.""def calculate_area():""""""Ask the user for a shape and calculate its area.Returns:None""""""print(""I can calculate the area of a shape for you."")shape = input(""Which shape do you want me to calculate the area of? (circle, rectangle, square, triangle): "").strip().lower()if shape == ""circle"":try:radius = float(input(""Enter the radius of the circle: ""))if radius < 0:print(""Radius cannot be negative. Please try again."")returnarea = 3.14159 * (radius ** 2)print(f""The area of the circle is: {area:.2f}"")except ValueError:print(""Please enter a valid number for the radius."")elif shape == ""rectangle"":try:length = float(input(""Enter the length of the rectangle: ""))width = float(input(""Enter the width of the rectangle: ""))if length < 0 or width < 0:print(""Length and width cannot be negative. Please try again."")returnarea = length * widthprint(f""The area of the rectangle is: {area:.2f}"")except ValueError:print(""Please enter valid numbers for length and width."")elif shape == ""square"":try:side = float(input(""Enter the side length of the square: ""))if side < 0:print(""Side length cannot be negative. Please try again."")returnarea = side ** 2print(f""The area of the square is: {area:.2f}"")except ValueError:print(""Please enter a valid number for the side length."")elif shape == ""triangle"":try:base = float(input(""Enter the base of the triangle: ""))height = float(input(""Enter the height of the triangle: ""))if base < 0 or height < 0:print(""Base and height cannot be negative. Please try again."")returnarea = 0.5 * base * heightprint(f""The area of the triangle is: {area:.2f}"")except ValueError:print(""Please enter valid numbers for base and height."")else:print(""Invalid shape. Please choose circle, rectangle, square, or triangle."")# Main executionif __name__ == ""__main__"":calculate_area()","December Submission: Problem 3: Elisha Elesho

def has_unique_characters(input_str):""""""""Checks whether all the characters in the input string are unique.Args:input_str (str): The string to check.Returns:bool: True if all characters are unique, False otherwise.Using a set to keep track of seen charactersseen = set()for char in input_str:if char in seen:return Falseseen.add(char)return True# Example usageif __name__ == ""__main__"":print(has_unique_characters(""abcdef"")) # Expected: Trueprint(has_unique_characters(""hello"")) # Expected: False# Additional test casesprint(has_unique_characters("""")) # Expected: True (empty string has no duplicates)print(has_unique_characters(""12345"")) # Expected: Trueprint(has_unique_characters(""112345"")) # Expected: False","December Submission: Problem 4: Elisha Elesho

import randomdef number_guessing_game():""""""""Play a game where the user guesses a random number between 1 and 100.""""""# Generate a random numbertarget_number = random.randint(1, 100)print(""I've picked a number between 1 and 100. Can you guess it?"")while True:try:# Get the user's guessguess = int(input(""Enter your guess: ""))if guess < 1 or guess > 100:print(""Please guess a number between 1 and 100."")continue# Check the guesselif target guess < target_number:print(""Too low! Try again."")elif guess > target_number:print(""Too high! Try again."")else:print(""Congratulations! You guessed the number."")breakexcept ValueError:print(""Invalid input. Please enter an integer.""# Main executionif __name__ == ""__main__"":number_guessing_game()"
Noora Fashho,"December Submission: Problem 1: Noora Fashho


while True:
  #user input
  s = str(input(""Enter a word: "")).lower()

  #function that checks if the word is a palindrome
  def isPalindrome(s):
    #starts from the end towards the begginning, taking each element/reversing the word
    return s == s[::-1]

  #prints yes if palindrome
  if isPalindrome(s):
    print(""The string is a palindrome."")

  #prints no if not palindrome
  else:
    print(""The string is not a palindrome."")","December Submission: Problem 2: Noora Fashho


print(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of?"")
user_input = input(""Type in the name of a shape (e.g., triangle, rectangle, square, circle): "").strip().lower()

#checks if the user said circle
if user_input == ""circle"":
    radius = float(input(""Enter the radius of the circle: ""))
    #uses the users input of radius to find the area
    area1 = 3.14159 * radius ** 2
    #prints area
    print(f""The area of the circle is {area1}."")
    
#checks if the user said rectangle
elif user_input == ""rectangle"":
    #uses the users input of length and width to then calculate the area
    length = float(input(""Enter the length of the rectangle: ""))
    width = float(input(""Enter the width of the rectangle: ""))
    area2 = length * width
    #prints area
    print(f""The area of the rectangle is {area2}."")
    
#checks if the user said square
elif user_input == ""square"":
    #uses the users input of the side length to then calc the the area
    side = float(input(""Enter the side length of the square: ""))
    area3 = side ** 2
    #prints area
    print(f""The area of the square is {area3}."")
    
#checks if the user said triangle
elif user_input == ""triangle"":
    #uses the users input of the base and height to calc the triangle area
    base = float(input(""Enter the base of the triangle: ""))
    height = float(input(""Enter the height of the triangle: ""))
    area4 = 0.5 * base * height
    #prints area
    print(f""The area of the triangle is {area4}."")

#doesn't cal any other shape's area besides the ones given
else:
    print(""Sorry, I can only calculate the area for circle, rectangle, square, or triangle."")","December Submission: Problem 3: Noora Fashho


def unique_characters(string):
    # Uses a list to track the letters seen
    seen = []
    
    #iterates through every letter in the string and if letter in seen, returns false
    for letter in string:
        if letter in seen:
            return False
        #if letter in seen, then letter is appended to the list
        seen.append(letter)
    
    return True

#gets input from user
user_input = input(""Enter a string to check if all characters are unique: "").strip()

# Checks if all letters are unique and prints the answer
if unique_characters(user_input):
    print(""All characters in the string are unique."")
else:
    print(""The string has duplicate characters."")","December Submission: Problem 4: Noora Fashho


import random

def guessing_game():
    print(""Hello and welcome to the Guessing Game!"")
    print(""I have chosen a number between 1 and 100, can you guess what it is?"")
    
    # this generates a random number between 1 and 100
    number = random.randint(1, 100)
    attempts = 0  # this keeps track of the number of attempts
    
    while True:
        try:
            #user inputs their guess
            guess = int(input(""Enter your guess: ""))
            attempts += 1       #attempts increases every guess
            
            if guess == number:
                print(f""Congratulations! You guessed it in {attempts} attempt(s)."")
                break

            elif guess < number:
                #if user's guess is less than the random number generated then...
                print(""Too low! Try a larger number."")
            else:
                print(""Too high! Try a smaller number."")
        #if invalid number is guessed
        except ValueError:    
            print(""Please enter a valid number."")
            
#game starts
guessing_game()"
Gavin Hygh,"December Submission: Problem 1: Gavin Hygh

https://codesandbox.io/p/devbox/mfl3jz","December Submission: Problem 2: Gavin Hygh

https://codesandbox.io/p/devbox/mfl3jz","December Submission: Problem 3: Gavin Hygh

https://codesandbox.io/p/devbox/mfl3jz","December Submission: Problem 4: Gavin Hygh

https://codesandbox.io/p/devbox/mfl3jz"
lr32768@outlook.com,"December Submission: Problem 1: lr32768@outlook.com

https://codesandbox.io/p/devbox/ldvc2n","December Submission: Problem 2: lr32768@outlook.com

https://codesandbox.io/p/devbox/skx3vp","December Submission: Problem 3: lr32768@outlook.com

https://codesandbox.io/p/devbox/skrp3v","December Submission: Problem 4: lr32768@outlook.com

https://codesandbox.io/p/devbox/qtkv68"
Calum Cheah,"December Submission: Problem 1: Calum Cheah 

import sys

# Notes:
# Spaces, punctuation, and capitalization are ignored when checking palindromes

# Steps:
# 1. Take input from console or from the arguments passed to the script
# 2. Remove spaces & punctuation, make all characters lowercase
# 3. Check if reversed string == string
# 4. Print output

def main(*args):
    if len(args) < 1:
        string = input(""Enter string to check if it is a palindrome: "") # if no arguments were passed to the script, prompt user for input
    else:
        string = args[0] # if argument was provided to script, use the argument as the string

    string = """".join([char for char in string if char.isalpha()]) # remove all non-alphabetical characters
    string = string.lower() # make all characters lowercase
    
    isPalindrome = string == string[::-1] # check if string == reversed string
    
    if isPalindrome:
        print(""The string is a palindrome."") # if strings are the same, it is a palindrome
    else:
        print(""The string is not a palindrome."") # strings are not the same, it is not a palindrome

if __name__ == ""__main__"":
    main(*sys.argv[1:])","December Submission: Problem 2: Calum Cheah 


import math

# Notes:
# - Likely need to check to make sure user inputs a number
# - Need to reprompt user if they enter an invalid shape

# Formulas:
# Circle: pi * r ^ 2
# Rectangle: l * w
# Square: s ^ 2
# Triangle: (b * h) / 2

# Steps:
# 1. Prompt user for shape (check that a valid shape is input)
# 2. Prompt for shape dimensions (check that a valid number is input)
# 3. Calculate area
# 4. Output area

def promptForDimension(prompt: str) -> float:
    """"""
    This function prompts the user until they enter a valid dimension (positive floating point number)

    @param prompt:  this is the string that the user will be prompted with
    @return:        returns the dimension that the user enters
    """"""
    
    num = -1
    while num < 0 or not isinstance(num, float): # repeatedly prompt user until they enter a positive float
        try:
            num = float(input(prompt)) # attempt to read input and convert to float
        except:
            print(""Please enter a valid number"") # remind user if they enter an invalid string
            
    return num

def main():
    shape = """"
    
    # Repeatedly prompt user for shape until they enter a valid shape
    while not shape in (""circle"", ""rectangle"", ""square"", ""triangle""):
        shape = input(""I can calculate the area of a shape for you (circle, rectangle, square, or triangle). Which shape do you want me to calculate the area of? "")
        shape = shape.lower().strip() # make shape string lowercase and remove trailing whitespace
    
    if shape == ""circle"":
        # if circle, we want to prompt for radius and use the formula for the area of a circle (pi * r^2)
        radius = promptForDimension(""Enter the radius of the circle: "")
        area = math.pi * (radius ** 2)
    elif shape == ""rectangle"":
        # if rectangle, we want to prompt for length and width and use the formula for the area of a rectangle (length * width)
        length = promptForDimension(""Enter the length of the rectangle: "")
        width = promptForDimension(""Enter the width of the rectangle: "")
        area = length * width
    elif shape == ""square"":
        # if square, we want to prompt for side length and use the formula for the area of a square (length^2)
        length = promptForDimension(""Enter the side length of the square: "")
        area = length ** 2
    elif shape == ""triangle"":
        # if triangle, we want to prompt for base and height and use the formula for the area of a triangle (base * height / 2)
        base = promptForDimension(""Enter the length of the base of the triangle: "")
        height = promptForDimension(""Enter the height of the triangle: "")
        area = (base * height) / 2
    
    print(f""The area of your {shape} is {area:.5f}"") # output area to user

if __name__ == ""__main__"":
    main()","December Submission: Problem 3: Calum Cheah 

 

import sys

# Notes:
# - Check if string has all unique characters - i.e. there are no duplicate characters, may be able to use a set
# - Should probably ignore spaces?
# - Empty string should return true

# Steps:
# 1. Take input from console or from the arguments passed to the script
# 2. Remove spaces in string
# 3. Convert string to set to remove duplicates
# 4. Check if len(string) == len(set)
#   - If they are equivalent, there were no duplicates
# 5. Output result to user

def main(*args):    
    if len(args) < 1:
        string = input(""Enter string to check if all characters are unique: "") # if no arguments were passed to the script, prompt user for input
    else:
        string = args[0] # if argument was provided to script, use the argument as the string

    string = string.replace("" "", """") # remove spaces in string

    stringSet = set(string) # convert string to a set to remove duplicates
    unique = len(stringSet) == len(string) # if the length of the set is the same, no duplicates were found
    
    # if the string is unique, print True, else False
    if unique:
        print(True)
    else:
        print(False)

if __name__ == ""__main__"":
    main(*sys.argv[1:])","December Submission: Problem 4: Calum Cheah 


import random

# Notes:
# - Randomly selected number from 1-100
# - Likely need to check to ensure that user enters a valid integer
# - Need to compare user's guess with the selected answer and return high or low

# Steps:
# 1. Randomly select answer as an integer from 1-100
# 2. Prompt user for guess
# 3. Compare guess with answer
#   - If guess is correct, exit loop, congratulate user
#   - If guess is incorrect, tell user higher/lower and reprompt for guess

def promptInteger(prompt: str, min: int, max: int) -> int:
    """"""
    This function prompts the user until they enter a valid integer from [min, max]

    @param prompt:  this is the string that the user will be prompted with
    @param min:     minimum value that the user is allowed to input
    @param max:     maximum value that the user is allowed to input
    @return:        returns the integer entered by the user
    """"""
    
    num = min-1
    while not min < num < max or not isinstance(num, int): # repeatedly prompt user until they enter a valid integer
        try:
            num = int(input(prompt)) # attempt to read input and convert to int
        except:
            pass
        
        if not min < num < max:
            print(f""Please enter a valid number from [{min}, {max}]"") # remind user if they enter an invalid string
            
    return num

def main():
    MIN = 1
    MAX = 100
    answer = random.randint(MIN, MAX) # select random integer from 1-100
    
    print(""Welcome to my number guessing game! I will select a random number and you have to try to guess it!"")
    
    guess = None
    while guess != answer: # Keep prompting user until they guess correctly
        guess = promptInteger(""Enter a guess: "", MIN, MAX) # prompt user for guess from [MIN, MAX]
        
        if guess < answer:
            print(""Your guess was too low!"") # inform user if the guess is too low
        elif guess > answer:
            print(""Your guess was too high!"") # inform user if the guess is too high
    
    print(""Congratulations! You guessed correctly!"") # Loop exited - user guessed correctly, congratulate them

if __name__ == ""__main__"":
    main()"
Anthony	Aguilera,"December Submission: Problem 1: Anthony	Aguilera

https://codesandbox.io/p/devbox/g4cf5m","December Submission: Problem 2: Anthony	Aguilera

https://codesandbox.io/p/devbox/ggj26k","December Submission: Problem 3: Anthony	Aguilera

https://codesandbox.io/p/devbox/5vk44t","December Submission: Problem 4: Anthony	Aguilera

https://codesandbox.io/p/devbox/36jnw8"
David Chinea,"December Submission: Problem 1: David Chinea

def plainderomeChecker(word):
    isPalindrome = False
   #probably want to iterate through each character in the string in half
   #compare the first and last and check if their equal
   for i in range(len(word) / 2):
      if word[i] == word[len(word)-1-i]:
          isPalindrome = True
      else: 
          isPalindrome = False
          print(""The string is not a palindrome"")
          return
   if isPalindrome:
      print(""The string is a palindrome"")","December Submission: Problem 2: David Chinea

shape = input(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of?"")
area = areaCalculator(shape)
print(f""The area of your {shape} is {area}"")
def areaCalculator(shape):
    area = 0
    if shape = ""circle"":
       radius = input(""Input a radius: "")
       area = math.pi * pow(radius, 2) #area of a circle is (pi)(r^2)
    elif shape = ""rectangle"":
       length = input(""Input a length: "")
       width = input(""Input a width: "")   
       area = length * width #area of a rectangle is w*l
    elif shape = ""square"":
       side = input(""Input a side length: "")
       area = pow(side, 2) #area of a square is s^2
    elif shape = ""triangle"":
       base = input(""Input a base: "")
       height = input(""Input a height: "")
       area = .5 * base * height #area of a triangle is (1/2)(b*h)
    else:
       print(""Not a shape."")
       return area","December Submission: Problem 3: David Chinea

def uniqueCharacters(string):
   #nested for loop
   for i in range(len(string)):  #for each character
      for j in range(i + 1, len(string)):  #for each character only after index i
         if string[i] == string[j]:
         return False
   return True","December Submission: Problem 4: David Chinea

import random
def numberGuessingGame():
   random_number = random.randint(1, 100)
   while user_guess != random_number:
         user_guess = int(input(""Guess the number: ""))
         try: #allows to check if the guess is non-interger 
             if user_guess > random_number:
               print(""Too high."")
             elif user_guess < random_number:
                print(""Too low."")
            else:
                print(""That's right! Congratulations!"")
 
      except ValueError:
             print(""Not a valid number."")  #handles non-integer inputs"
Lizbeth	Ramirez,"December Submission: Problem 1: Lizbeth	Ramirez


def is_palindrome_with_spaces(s, a):
    cleaned = ''.join(s.split())
    return cleaned == cleaned[::-1]

s = ""madam""
a = ""ab ba""
if palindrome(s):
    print(""The string is palindrome"")
else:
    print(""The string is not palindrome"")","December Submission: Problem 2: Lizbeth	Ramirez


def calculator():  
    print(""I can calculate the area of a shape for you.\nWhich shape do you want me to calculate the area of?"")  

def shapes():  
    shape = input(""1. triangle\n2. rectangle\n3. square\n4. circle\nPlease select a shape: "")  
    
    if shape == ""triangle"":  
        h = float(input(""Please provide the height: ""))  
        b = float(input(""Please provide the base: ""))  
        print(""Area of the triangle:"", h * b / 2)  
    elif shape == ""rectangle"":  
        l = float(input(""Please provide the length: ""))  
        w = float(input(""Please provide the width: ""))  
        print(""Area of the rectangle:"", l * w)  
    elif shape == ""square"":  
        s = float(input(""Please provide the size of a side: ""))  
        print(""Area of the square:"", s * s)  
    elif shape == ""circle"":  
        r = float(input(""Please provide the radius of the circle: ""))  
        print(""Area of the circle:"", 3.14 * r * r)  
    else:  
        print(""Not a possible answer"")  
        shapes()   

calculator()  
shapes()",,
Piya Verma,"December Submission: Problem 1: Piya Verma

#Function that takes in word to see if palindrome. Returns a string indicating whether or not it is.
 
def palindrome_checker(inpstr):
 
    # U: Understand the problem
    # uniform string creation
    filtstr = ''.join(char.lower() for char in inpstr if char.isalnum())
 
    # C: Create a plan
    # compare the filtered string with its reverse = check for palindrome 
    return filtstr == filtstr[::-1]
 
#A: Algorithm implementation
if __name__ == ""__main__"":
    # Example inputs
    test_cases = [
        ""Racecar"",
        ""Hello"",
        ""A man, a plan, a canal, Panama"",
        """",
        ""No lemon, no melon"",
        ""12321"",
        ""12345""
    ]
 
    for test in test_cases:
        # S: Solve by applying the function
        if palindrome_checker(test):
            print(f""Input: \""{test}\""\nOutput: The string is a palindrome.\n"")
        else:
            print(f""Input: \""{test}\""\nOutput: The string is not a palindrome.\n"")
 
#E: Edge cases
#empty string: ret true
#strings with spaces/punctuation are ignored
#case = should not matter in the comparison","December Submission: Problem 2: Piya Verma

def calcarea():
#program calculates the area of a shape chosen by the user.
    print(""I can calculate the area of a shape for you."")
    print(""Which shape do you want me to calculate the area of?"")
 
    #U: Understand the problem
    #shape input
    shape = input(""Enter the shape (circle, rectangle, square, triangle): "").strip().lower()
 
    #C: Create a plan
    #depending on the shape, prompt for measurements and calculate area
    if shape == ""circle"":
        try:
            radius = float(input(""Enter the radius of the circle: ""))
            if radius < 0:
                print(""Radius cannot be negative."")
            else:
                area = 3.14159 * radius ** 2
                print(f""The area of the circle is {area:.2f}."")
        except ValueError:
            print(""Invalid input. Please enter a numeric value for the radius."")
 
    elif shape == ""rectangle"":
        try:
            length = float(input(""Enter the length of the rectangle: ""))
            width = float(input(""Enter the width of the rectangle: ""))
            if length < 0 or width < 0:
                print(""Length and width cannot be negative."")
            else:
                area = length * width
                print(f""The area of the rectangle is {area:.2f}."")
        except ValueError:
            print(""Invalid input. Please enter numeric values for length and width."")
 
    elif shape == ""square"":
        try:
            side = float(input(""Enter the side length of the square: ""))
            if side < 0:
                print(""Side length cannot be negative."")
            else:
                area = side ** 2
                print(f""The area of the square is {area:.2f}."")
        except ValueError:
            print(""Invalid input. Please enter a numeric value for the side length."")
 
    elif shape == ""triangle"":
        try:
            base = float(input(""Enter the base of the triangle: ""))
            height = float(input(""Enter the height of the triangle: ""))
            if base < 0 or height < 0:
                print(""Base and height cannot be negative."")
            else:
                area = 0.5 * base * height
                print(f""The area of the triangle is {area:.2f}."")
        except ValueError:
            print(""Invalid input. Please enter numeric values for base and height."")
 
    else:
        #handle invalid shape input
        print(""Sorry, I can't calculate the area of that shape. Please choose circle, rectangle, square, or triangle."")
 
#A: Algorithm implementation
if __name__ == ""__main__"":
    calcarea()
 
#E: Edge cases handled
#invalid shape input = provide a message and terminate
#bad measurements handles with error messages","December Submission: Problem 3: Piya Verma

def uniqchars(input_string):
#determines if all characters in the given string are unique.
    #U: Understand the problem
    #uniform string if not specified
    input_string = input_string.strip()
 
    #C: Create a plan
    #set to track seen characters
    seen = set()
 
    #loop through each character in the string
    for char in input_string:
        if char in seen:
            return False  #duplicate character found
        seen.add(char)  #add character to the set
 
    return True  #all unique
#A:Algorithm implementation
if __name__ == ""__main__"":
    # Example inputs
    test_cases = [
        ""abcdef"",  # Unique characters
        ""hello"",   # Duplicate 'l'
        "" "",       # Single space, unique
        """",        # Empty string, unique by definition
        ""12345"",   # Unique digits
        ""123451""   # Duplicate '1'
    ]
 
    for test in test_cases:
        result = uniqchars(test)
        print(f""Input: \""{test}\""\nOutput: {result}\n"")
 
#E: Edge cases handled
# empty returns true
#spaces are characters
#case sensitive","December Submission: Problem 4: Piya Verma

import random
 
def guessing_game():
#plays a guessing game with the user.
    #U: Understand the problem
    print(""I'm thinking of a number between 1 and 100."")
    print(""Guess what it is?"")
 
    #generate a random number between 1 and 100
    guessnum = random.randint(1, 100)
 
    #initialize variables for the game loop
    guesscorrectly = False
 
    while not guesscorrectly:
        try:
            # Ask the user for their guess
            user_input = input(""Enter your guess: "").strip()
 
            # Check if the input is a valid integer
            user_guess = int(user_input)
 
            # Check if the guess is within range
            if user_guess < 1 or user_guess > 100:
                print(""Please enter a number between 1 and 100."")
                continue
 
            #C: Create a plan
            #compare the user's guess to the target number
            if user_guess < guessnum:
                print(""Too low! Try guessing a larger number."")
            elif user_guess > guessnum:
                print(""Too high! Try guessing a smaller number."")
            else:
                #correctly guessed
                print(f""Congratulations! You've guessed the number {guessnum} correctly!"")
                guesscorrectly = True
 
        except ValueError:
            # Handle invalid (non-integer) inputs
            print(""Invalid input. Please enter a numeric value."")
 
#A: Algorithm implementation
if __name__ == ""__main__"":
    guessing_game()
 
#E: Edge cases handled
#noninteger-prompt user
#outside range-warning"
Karina	Gonzalez-Martinez,"December Submission: Problem 1: Karina	Gonzalez-Martinez

def palindrome:
  #make everything lowercase and ignore capitalization
  s = s.lower()
  #remove anything that's not a character or number 
  #create string of ONLY alphanumeric characters
  cleaned = """"
    for char in s:
      if char.insalnum():
      cleaned += char
  #check for cleaned string
  if cleaned == cleaned[::-1]:
    return ""The string is a palindrome.""
  else:
    return ""The string is not a palindrome.""","December Submission: Problem 2: Karina	Gonzalez-Martinez

# Display the introduction message and explain the options to the userprint(""I can calculate the area of a shape for you."")print(""Which shape do you want me to calculate the area of?"")print(""Options: circle, rectangle, square, triangle"")
# Ask the user to input the shape they wantshape = input(""Enter the shape: "")
# Check if the shape is a circle and calculate the areaif shape.lower() == ""circle"":    # Prompt the user for the radius and calculate the area using the formula A = pi * r^2    radius = input(""Enter the radius of the circle: "")    area = 3.14159 * (float(radius) ** 2)    print(""The area of the circle is"", round(area, 2))
# Check if the shape is a rectangle and calculate the areaif shape.lower() == ""rectangle"":    # Prompt the user for length and width, then calculate the area using A = length * width    l = input(""Enter the length of the rectangle: "")    w = input(""Enter the width of the rectangle: "")    area = float(l) * float(w)    print(""The area of the rectangle is"", area)
# Check if the shape is a square and calculate the areaif shape.lower() == ""square"":    # Prompt the user for the side length and calculate the area using A = side^2    side = input(""Enter the side length of the square: "")    area = float(side) * float(side)    print(""The area of the square is"", area)
# Check if the shape is a triangle and calculate the areaif shape.lower() == ""triangle"":    # Prompt the user for base and height, then calculate the area using A = 0.5 * base * height    b = input(""Enter the base of the triangle: "")    h = input(""Enter the height of the triangle: "")    area = 0.5 * float(b) * float(h)    print(""The area of the triangle is"", area)
# Handle invalid shape inputselse:    # If the input does not match any shape, display an error message    if shape.lower() not in [""circle"", ""rectangle"", ""square"", ""triangle""]:        print(""Sorry, I can't calculate the area of that shape."")
# End the program with a thank you messageprint(""Thanks for using the calculator!"")","December Submission: Problem 3: Karina	Gonzalez-Martinez

# Function to check if all characters in a string are uniquedef has_unique_characters(string):    # Create an empty set to store characters we have seen    seen_characters = set()
    # Loop through each character in the string    for char in string:        # If the character is already in the set, return False        if char in seen_characters:            return False        # Add the character to the set        seen_characters.add(char)
    # If no duplicates were found, return True    return True
# Prompt the user to input a stringuser_input = input(""Enter a string to check if it has all unique characters: "")
# Check if the input string is emptyif user_input.strip() == """":    print(""You entered an empty string. Please provide a valid input."")else:    # Call the function and display the result    if has_unique_characters(user_input):        print(""The string has all unique characters."")    else:        print(""The string does not have all unique characters."")","December Submission: Problem 4: Karina	Gonzalez-Martinez

import random  # Import random module to generate random numbers
# Function to play the number guessing gamedef guessing_game():    print(""Welcome to the Number Guessing Game!"")    print(""I have chosen a number between 1 and 100. Can you guess what it is?"")
    # Generate a random number between 1 and 100    secret_number = random.randint(1, 100)
    # Variable to track if the game is over    game_over = False
    while not game_over:        try:            # Prompt the user for their guess            guess = int(input(""Enter your guess: ""))
            # Check if the guess is correct            if guess == secret_number:                print(""Congratulations! You guessed the correct number."")                game_over = True  # End the game            elif guess < secret_number:                print(""Too low! Try a larger number."")            elif guess > secret_number:                print(""Too high! Try a smaller number."")
        except ValueError:            # Handle invalid input (e.g., non-integer input)            print(""Invalid input. Please enter a valid number between 1 and 100."")
# Call the game function to start the gameguessing_game()"
Ronit Katikaneni,"December Submission: Problem 1: Ronit Katikaneni


#UCASE
#U: The problem requires checking if the string is the same backward as it is forwards while only looking at letters
#C: Some hints are that we have to check only items that are letters and that we have to check if characters match the character in its reversed positions
#A: Step1: Create function and input word, Step2: Remove all spaces and punctuation, Step3, loop through string and check if each character matches its reversed position, Step4 return true or False
#S: The S is my solution below
#E: I tested without multiple edge cases and inputs and received proper results

#define a function with a string parameter
def palindrome(word):
    #lowercase the input word
    word = word.lower()
   
    #create a newword variable that will contain the word without spaces or punctuation
    newWord = """"
    #loop through each character
    for char in word:
        #check if it is a letter
        if char.isalpha():
            #if it is add it to the newWord function
            newWord = newWord + char
    #loop through half the size of the string
    for i in range(len(newWord)//2):
        #check if the current letters matches the opposite letter
        if(newWord[i] != newWord[len(newWord) - i - 1]):
            #if it doesn't return false
            return ""This string in not a palindrome""
    #if it loops through then it is a palindrome
    return ""This string is a palindrome""

word = input(""Enter a word: "")

print(palindrome(word))","December Submission: Problem 2: Ronit Katikaneni


#UCASE
#U: The problem requires to calculate an area depending on the shape the user inputs
#C: Some clues are that since we have to check the shape, we must use if statements to differentiate between shapes
#A: Step1: create function and take in string input, Step2: check what shape the user inputted, Step3: Take in proper measurements depending on the shape, Step4: calculate area depending on the shape and return the area
#S: The S is my solution below
#E: I tested without multiple edge cases and inputs and received proper results

#define function with string parameters
def calculatearea(word):
    #lowercase the input word
    word = word.lower()
    if(word == ""circle"" ):#check if it is a circle
        #define pi and take in input for radius and return area
        pi = 3.14
        radius = float(input(""Please input the radius: ""))
        #check if radius is negative
        if(radius < 0):
            return ""Radius cannot be less than zero, try again""
        area = pi * radius**2
        return ""The area of the circle is "" + str(area)
    elif(word == ""rectangle""):#check if rectangle
        #take in length and width and return area
        length = float(input(""Enter the length: ""))
        width = float(input(""Enter the width: ""))
        #check if length or width is negative
        if(length < 0 or width < 0):
            return ""length and width cannot be less than zero, try again""
        area = length * width
        return ""The area of the circle is "" + str(area)
    elif(word == ""square""):# check if square
        #take in side_length and return the area

        side_length = float(input(""Enter the side length: ""))
        #check if side_length is negative
        if(side_length < 0):
            return ""side_length cannot be less than zero, try again""
        area = length * width
        area = side_length**2
       
        return ""The area of the circle is "" + str(area)
    elif(word == ""triangle""):
        #check if it is a triangle
        #take in height and base and return area
        height = float(input(""Enter the height: ""))
        base = float(input(""Enter the base: ""))
        #check if base or height is negative
        if(base < 0 or height < 0):
            return ""base and height cannot be less than zero, try again""
        area = .5 * base * height
        return ""The area of the circle is "" + str(area)
    #return this if their input was incorrect
    return ""You did not type in an acceptable shape""
shape = input(""Enter a shape(circle, rectangle, square, or triangle) to calculate the area: "")

print(calculatearea(shape))","December Submission: Problem 3: Ronit Katikaneni


#UCASE
#U: The problem requires us to check if each letter is unique in the given string
#C: Some clues are that since each character has to be unique we can just create a set since they only contain unique characters
#A: Step1: Create a function and take in a string input, Step2: Create an empty step, Step3, loop through the string and add items to the set while checking if they are in the set, Step4:if they are already in the set return false, if not return true at the end 
#S: The S is my solution below
#E: I tested without multiple edge cases and inputs and received proper results

#define function with string parameters
def uniqueCharacters(word):
    #create a set that contains each seen characters
    character_occurences = set()

    for char in word:
        #if the character is in the set return false
        if(char in character_occurences):
            return False
        #add the character to the set
        character_occurences.add(char)
    #if it looped through then return true
    return True
word = input(""Enter a word: "")

print(uniqueCharacters(word))","December Submission: Problem 4: Ronit Katikaneni


#UCASE
#U: The problem requires us to create a random number and have the user guess it providing higher or lower messages
#C: Some clues are that the user has to keep guessing, so we can use a while loop to keep going till they guess correctly
#A: Step1: Create a function Step2: Create a while true loop with a try and Exception to validate inputs, Step3: Check if the number is between 1-100, Step4: check if the number if correct guess, higher, or lower, and display the proper message, Step5: End the game if the number is guess properly
#S: The S is my solution below
#E: I tested without multiple edge cases and inputs and received proper results

#impor random
import random

# Generate a random number between 1 and 100
random_number = random.randint(1, 100)

def guessNumber():
    while True:  # Keep looping until the correct guess
        try:
            #take in the users guess
            num = int(input(""Please input a number from 1-100: ""))
            #check if the number is from 1-100 and if not make them retry
            if num < 1 or num > 100:
                print(""Your number is out of range. Please try again."")
                continue
            #check if their guess was correct and print correct and break
            if num == random_number:
                print(""Correct Guess!"")
                break
            #if their guess is higher tell them they are too high
            elif num > random_number:
                print(""Your guess is too high, try again."")
            #if their guess is lower, tell them it is too low and try again
            else:
                print(""Your guess is too low, try again."")
        #check if they inputed something that wasnt a number and make them redo
        except ValueError:
            print(""Invalid input"")

# Start the game
guessNumber()"
Ayaan	Imran,"December Submission: Problem 1: Ayaan	Imran

#Questions I have#1: is it case sensitive?(asumming no)#2: does it include puncuation?(assuming yes)#3: do you want the user to interact with the program(assuming yes)#4: do numbers count?(assuming no)word = input(""What word do you want to check?:"")word = word.lower()  # Convert to lowercaseword = ''.join(char for char in word if char.isalnum())  # Remove letter characters
is_palindrome = Truefor i in range(len(word) // 2):  # Only iterate through the first half of the string    if word[i] != word[len(word) - 1 - i]:  # Compare symmetric characters        is_palindrome = False        break # stops loop if it isnt a palindrome
if is_palindrome:    print(""This word is a Palindrome"")else:    print(""This word is not a Palindrome"")","December Submission: Problem 2: Ayaan	Imran

#questions#1 should I allow Decimals(assumming yes)#2 should I allow negative numbers(assuming no)#3 should I allow the user to interact with the program(assuming yes)print(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of?"")print(""option 1: Circle"")print(""option 2: Rectangle"")print(""option 3: Square"")print(""option 4: Triangle"")#informs the user of what shapes they can entershape = input()#lets use pick the shapeshape = shape.lower()#lowecases the name to get rid of case-sensativenessif shape == ""circle"":#calculates circle    radius = float(""what is the radius?:"")    area = 3.14 * radius * radius    print(""The area of the circle is"", area)if shape == ""rectangle"":#calculates rectangle    length = float(""what is the length?:"")    width = float(""what is the width?:"")    area = length * width    print(""The area of the rectangle is"", area)if shape == ""square"":#calculates square    side = float(""what is the side length?:"")    area = side * side    print(""The area of the square is"", area)if shape == ""triangle"":#calculates triangle    base = float(""what is the base?:"")    height = float(""what is the height?:"")    area = base * height / 2else:#informs the user that they chose an invalid shape    print(""please try again, that is not a valid option"")","December Submission: Problem 3: Ayaan	Imran

#questions#1 is a capital A the same as a lowercase a(assuming yes)#3 should I allow the user to interact with the program(assuming yes)string = input(""what string do you want to check?:"")characters = list(string)#turns the input into a listindividual = []duplicate = True#auto-assumes there are no dupesfor char in characters:    if not individual:        individual.append(char)#adds the indicidual characters that were in the string to list    for i in range(len(individual)):        if char == individual[i]:            duplicate = False#if there is a duplicate, it will be set to falseprint(duplicate)","December Submission: Problem 4: Ayaan	Imran

#questions#1 are decimals allowed(hopefully not)#2 are negative numbers allowed(assuming no)import randomrandom_int = random.randint(1, 100)guessed = Falsewhile guessed == False:    user_input = int(input(""Guess a number between 1 and 100: ""))    if user_input == random_int:        guessed = True        print(""You guessed the number"")    elif user_input > random_int:        print(""Your guess is too high"")    elif user_input < random_int:        print(""Your guess is too low"")"
Zephan	Ofori,"December Submission: Problem 1: Zephan	Ofori

word = input(""Enter a word: "") ##This is the input that receives the word
edgeCases = ["";"", ""."", "","", ""{"", ""["", ""}"", ""]"", ""|"", "" ""] #Creating a possible edgecase list
for edgeCase in edgeCases: #for each element in the list    while edgeCase in word: #while there is an edgecase in the word        print(""Make sure there are no spaces or punctuations in your word. Please try again."") #print warning        word = input(""Enter a word: "")#ask for another input until input is acceptable
newWord = """" ##Creating a new string to put the reverse version of the word
for i in range(len(word)): ##running a for loop to get the index of every letter in the word    index = len(word) - i - 1 ##accurately tracks the index of the last letter all the way to the first    newWord += word[index] ## puts the reversed letters into the new String    if word == newWord:    print(""The string is a palindrome."")  ## print if string is a palindromeelse:    print(""The string is not a palindrome."") ## print if string is not a palindrome","December Submission: Problem 2: Zephan	Ofori

import math
# Welcome messageprint(""Welcome to the Area Calculator!"")print(""I can calculate the area of a shape for you."")print(""Which shape do you want me to calculate the area of?"")print(""Options: circle, rectangle, square, triangle"")
# Get the shape from the usershape = input(""Enter the name of the shape: "").lower()
# Calculate the area based on the shapeif shape == ""circle"":    # Ask for radius    try:        radius = float(input(""Enter the radius of the circle: ""))        if radius < 0:            print(""Radius cannot be negative. Please restart and try again."")        else:            area = math.pi * radius ** 2            print(f""The area of the circle with radius {radius} is {area:.2f}"")    except ValueError:        print(""Invalid input! Please enter a numeric value for the radius."")
elif shape == ""rectangle"":    # Ask for length and width    try:        length = float(input(""Enter the length of the rectangle: ""))        width = float(input(""Enter the width of the rectangle: ""))        if length < 0 or width < 0:            print(""Length and width cannot be negative. Please restart and try again."")        else:            area = length * width            print(f""The area of the rectangle is {area:.2f}"")    except ValueError:        print(""Invalid input! Please enter numeric values for length and width."")
elif shape == ""square"":    # Ask for side length    try:        side = float(input(""Enter the side length of the square: ""))        if side < 0:            print(""Side length cannot be negative. Please restart and try again."")        else:            area = side ** 2            print(f""The area of the square is {area:.2f}"")    except ValueError:        print(""Invalid input! Please enter a numeric value for the side length."")
elif shape == ""triangle"":    # Ask for base and height    try:        base = float(input(""Enter the base of the triangle: ""))        height = float(input(""Enter the height of the triangle: ""))        if base < 0 or height < 0:            print(""Base and height cannot be negative. Please restart and try again."")        else:            area = 0.5 * base * height            print(f""The area of the triangle is {area:.2f}"")    except ValueError:        print(""Invalid input! Please enter numeric values for base and height."")
else:    # Handle unknown shapes    print(""Sorry, I don't recognize that shape. Please restart and try again."")
# Goodbye messageprint(""Thanks for using the Area Calculator! Goodbye!"")","December Submission: Problem 3: Zephan	Ofori

# Prompt the user to enter a wordword = input(""Enter a word: "")
# Keep prompting if the input is empty or contains spaceswhile word == """" or "" "" in word:    word = input(""Enter a word: "")
# Initialize a counter to track repeated letterssameCounter = 0
# Loop through each letter in the wordfor letter in word:    # Iterate through each index of the word    for i in range(len(word)):        # Check if the letter matches another character in the word        # Ensure the match is not at the same index         if letter == word[i] and word.index(letter) != i:            sameCounter += 1  # Increment the counter for each match found
if sameCounter == 0:    print(True)  # No duplicate letters, print Trueelse:    print(False)  # Duplicate letters found, print False","December Submission: Problem 4: Zephan	Ofori

import random
# Welcome messageprint(""Welcome to the Number Guessing Game!"")print(""I have chosen a number between 1 and 100. Can you guess what it is?"")
# Generate a random number between 1 and 100secret_number = random.randint(1, 100)
# a variable to track the number of attemptsattempts = 0
# Game loop: keep asking the user for guesses until they guess correctlywhile True:    try:        # Ask the user for their guess        guess = int(input(""Enter your guess: ""))        attempts += 1  # Increment the attempt counter
        # Check if the guess is correct        if guess == secret_number:            print(f""Congratulations! You guessed the number in {attempts} attempts."")            break  # Exit the loop when the user guesses correctly        elif guess > secret_number:            print(""Too high! Try a smaller number."")        else:            print(""Too low! Try a larger number."")    except ValueError:        # Handle invalid input        print(""Oops! Please enter a valid number."")
# Goodbye messageprint(""Thanks for playing! Goodbye!"")"
Shreya Sreekant,"December Submission: Problem 1: Shreya Sreekant


#TASK: Check whether a string is a palindrome.

#EDGE CASE: Empty string

#PSUEDOCODE:
# word var to take as input
# IF string is empty
#   print ('not a palindrome')
# ELSE
#   check word with reversed version of the word
#   IF letters match
#     print ('palindrome')
#   ELSE
#      print ('not a palindrome') 

word = input(""Enter a word: "")  
reversed_word = word[::-1] #reversed version of the word by iterating through it backwards

if word == ' ': #checking if the word is an empty string
    print(""This is not a palindrome; the input is an empty string."")
else:
    if word == reversed_word: #if the word is the same as the reversed version, it is a palindrome
        print(""This is a palindrome."")
    else:
        print(""This is not a palindrome."")","December Submission: Problem 2: Shreya Sreekant


#TASK: Calculate the area for a circle, square, rectangle, and triangle.

#EDGE CASE: Any other shape, or an empty string as an input.

#PSUEDOCODE:
# String var shape takes the user's input for the shape
# IF circle
#   ask for radius
#   use pi*r^2 for area
# ELIF square
#    ask for side length
#    use sidelength^2 for area
# ELIF rectangle
#     ask for length
#     ask for width
#     use length*width for area
# ELIF triangle
#     ask for base 
#     ask for height
#     use 0.5*base*height for area
# ELSE
#    print: this is not a valid input. please try again!

shape = input(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of? "").lower()
#made the value of shape lowercase to avoid other errors
if shape == 'circle': #area of circle
    radius = int(input(""Please enter the radius of the circle: ""))
    print(""The area of this circle is"", (3.14 * (radius*radius)),""."")
elif shape == 'square': #area of square
    side_length = int(input(""Please enter the side length of this square: ""))
    print(""The area of this square is"", (side_length * side_length), ""."")
elif shape == 'rectangle': #area of rectangle
    length = int(input(""Please enter the length of this rectangle: ""))
    width = int(input(""Please enter the width of this rectangle: ""))
    print(""The area of this rectangle is"", (length * width), ""."")
elif shape == 'triangle': #area of triangle
    base = int(input(""Please enter the base of this triangle: ""))
    height = int(input(""Please enter the height of this triangle: ""))
    print(""The area of this triangle is"", (0.5*base*height), ""."")
else:
    print(""This is not a valid input. Please try again! You can ask for a circle, square, rectangle, or triangle."")","December Submission: Problem 3: Shreya Sreekant


#TASK: Determine if all the characters in a string are unique.

#EDGE CASE: Empty string as an input.

#PSUEDOCODE:
# String var word takes input 
# FOR letter in word
#  FOR next letter in word
#   IF letter and next letter are not equal
#     return True
#   return False

string = input(""Enter a word: "")

if string != '':
    for i in range(len(string)):
        for j in range(i + 1, len(string)):
            if string[i] == string[j]:
                return False
    return True","December Submission: Problem 4: Shreya Sreekant


#TASK: Play a guessing game with the user using numbers from 1-100.

#EDGE CASE: Empty string as an input or guessing out of the 1-100 range.

#PSUEDOCODE:
# int var num takes input 
# int var comp_guess contains computer input
# IF num > comp_guess
#   print ('guess too high')
# ELIF num < comp_guess
#   print ('guess too low')
# ELIF num = comp_guess
#   print ('correct guess')
# ELIF num < 0 or num > 100
#   print ('guess is outside of range')
# ELIF num = ''
#   print('please guess a valid number)

import random

print('Let\'s play a guessing game! Try to guess the same number as me, in the range 1-100:')
comp_guess = random.randint(1, 100)

while True:
    try:
        #Get the user's guess
        num = input(""Enter your guess: "")
        if num == '':  #Check for empty string
            print(""Please guess a valid number."")
            continue
        num = int(num)
        
        #Check if the guess is within the 1-100 range
        if num < 1 or num > 100:
            print(""Please enter a number that is within the 1-100 range."")
            continue
        
        #Check if the guess is correct, too high, or too low
        if num == comp_guess:
            print(""Congrats, you guessed the right number!"")
            break
        elif num < comp_guess:
            print(""Your guess is too low, try again!"")
        else:
            print(""Your guess is too high, try again!"")
    
    except ValueError:
        print(""Please enter a number between 1 and 100."")"
Raifah Mubin,"December Submission: Problem 1: Raifah Mubin

# Understand:# - Summarize: We need to check if a string reads the same forwards and backwards, ignoring spaces, punctuation, and capitalization.# - Inputs: A string (e.g., ""Racecar"", ""Hello"").# - Outputs: Message indicating whether the string is a palindrome.# - Edge cases: Empty string, strings with punctuation, mixed case.# - Clarifying questions: Should we handle non-alphabetic characters? Yes.
import string
def is_palindrome(input_string):    # Clues:    # - A palindrome reads the same forwards and backwards.    # - Tools: string methods for cleaning (lowercase, remove spaces/punctuation).
    # Assemble: Step 1 - Normalize the string.    # - Remove spaces and punctuation, convert to lowercase.    cleaned_string = ''.join(        char.lower() for char in input_string if char in string.ascii_letters    )        # Step 2: Compare the cleaned string with its reverse.    is_palindrome = cleaned_string == cleaned_string[::-1]
    # Solve: Return result based on the comparison.    if is_palindrome:        return ""The string is a palindrome.""    else:        return ""The string is not a palindrome.""
# Test cases:# 1. Normal casesprint(is_palindrome(""Racecar""))  # Output: ""The string is a palindrome.""print(is_palindrome(""Hello""))    # Output: ""The string is not a palindrome.""
# 2. Edge casesprint(is_palindrome(""""))          # Output: ""The string is a palindrome."" (Empty string is technically a palindrome)print(is_palindrome(""A man, a plan, a canal, Panama""))  # Output: ""The string is a palindrome.""print(is_palindrome(""Was it a car or a cat I saw?""))    # Output: ""The string is a palindrome.""
# Examine:# - Result: The outputs match expected values.# - Performance: Efficient string cleaning and comparison.# - Comments: Added comments at each step to demonstrate thought process.","December Submission: Problem 2: Raifah Mubin

import math
def calculate_area():    # UCASE: Understand    # Prompt the user with the purpose of the program and ask for a shape name.    print(""I can calculate the area of a shape for you."")    print(""Which shape do you want me to calculate the area of? (circle, rectangle, square, triangle)"")    shape = input(""Enter the shape: "").strip().lower()
    # Clues: Identify what inputs are required and use the correct formula.    if shape == ""circle"":        # Assemble: Prompt for radius and calculate the area of the circle.        try:            radius = float(input(""Enter the radius of the circle: ""))            if radius < 0:                print(""Radius cannot be negative. Please try again."")                return            area = math.pi * radius ** 2        except ValueError:            print(""Invalid input. Please enter a numeric value."")            return            elif shape == ""rectangle"":        # Assemble: Prompt for length and width and calculate the area.        try:            length = float(input(""Enter the length of the rectangle: ""))            width = float(input(""Enter the width of the rectangle: ""))            if length < 0 or width < 0:                print(""Length and width cannot be negative. Please try again."")                return            area = length * width        except ValueError:            print(""Invalid input. Please enter numeric values."")            return            elif shape == ""square"":        # Assemble: Prompt for side length and calculate the area of the square.        try:            side = float(input(""Enter the side length of the square: ""))            if side < 0:                print(""Side length cannot be negative. Please try again."")                return            area = side ** 2        except ValueError:            print(""Invalid input. Please enter a numeric value."")            return            elif shape == ""triangle"":        # Assemble: Prompt for base and height and calculate the area of the triangle.        try:            base = float(input(""Enter the base of the triangle: ""))            height = float(input(""Enter the height of the triangle: ""))            if base < 0 or height < 0:                print(""Base and height cannot be negative. Please try again."")                return            area = 0.5 * base * height        except ValueError:            print(""Invalid input. Please enter numeric values."")            return            else:        # Handle invalid shape input gracefully.        print(""Sorry, I cannot calculate the area of that shape."")        return
    # Solve: Output the calculated area.    print(f""The area of the {shape} is {area:.2f}."")
    # Examine: Add final check and performance analysis in comments.    # Check the correctness of results by matching outputs to test inputs.
# Run the program for user interaction.calculate_area()","December Submission: Problem 3: Raifah Mubin

def has_unique_characters(input_string):    # Understand:    # - Problem: Determine if all characters in the string are unique.    # - Input: A string (e.g., ""abcdef"", ""hello"").    # - Output: True if all characters are unique, False otherwise.    # - Edge cases: Empty string, strings with spaces, non-alphanumeric characters.
    # Clues:    # - Use a data structure like a set to check uniqueness.    # - Sets store unique values and can help identify duplicates efficiently.
    # Assemble:    # Step 1: Normalize the string.    # - Remove spaces (if we consider them ignorable) and keep as is for case sensitivity.    normalized_string = input_string.replace("" "", """")
    # Step 2: Use a set to track seen characters.    seen_characters = set()
    # Step 3: Loop through the string and check for duplicates.    for char in normalized_string:        if char in seen_characters:            # A duplicate is found, so return False.            return False        seen_characters.add(char)
    # If no duplicates are found, return True.    return True
# Test cases to verify the solution:# Solve and Examine:# - Check outputs with example inputs and edge cases.print(has_unique_characters(""abcdef""))  # Expected: Trueprint(has_unique_characters(""hello""))   # Expected: Falseprint(has_unique_characters(""""))        # Expected: True (empty string has no duplicates)print(has_unique_characters(""123 321"")) # Expected: False (space and digits repeated)print(has_unique_characters("" !@#""))     # Expected: True (unique special characters)
# Examine:# - Results match expectations.# - Comments explain thought process at every step.","December Submission: Problem 4: Raifah Mubin

import random
def number_guessing_game():
    # Understand:    # - Problem: The program generates a random number between 1 and 100.    #   The user needs to guess the number. Provide feedback if their guess is too high or low.    # - Inputs: User guesses.    # - Outputs: Feedback for each guess and a congratulatory message if correct.    # - Edge cases: Invalid inputs, such as non-numeric entries.
    # Clues:    # - Use random.randint for generating the random number.    # - Use a loop for repeated guesses until the correct one.    # - Handle invalid inputs with error messages.
    # Assemble:    # Step 1: Generate a random number.    random_number = random.randint(1, 100)
    print(""Welcome to the Number Guessing Game!"")    print(""I have chosen a number between 1 and 100. Try to guess it!"")
    while True:        # Step 2: Prompt the user for a guess.        try:            user_guess = int(input(""Enter your guess: ""))
            # Check if the guess is within range.            if user_guess < 1 or user_guess > 100:                print(""Your guess is out of range. Please enter a number between 1 and 100."")                continue
            # Step 3: Compare the guess with the random number.            if user_guess > random_number:                print(""Too high! Try a smaller number."")            elif user_guess < random_number:                print(""Too low! Try a larger number."")            else:                # Correct guess ends the game.                print(f""Congratulations! You guessed the number {random_number} correctly."")                break
        except ValueError:            # Handle invalid input.            print(""Invalid input. Please enter a valid number."")
# Solve:# Call the function to start the game.number_guessing_game()
# Examine:# - Results:#   - If the user inputs valid guesses, the game guides them to the correct answer.#   - Invalid inputs provide an error message without crashing the program.# - Performance:#   - Efficiently generates a random number and handles all edge cases with a simple loop."
Morganne Thompson,"December Submission: Problem 1: Morganne Thompson

https://codesandbox.io/p/devbox/qpztn4","December Submission: Problem 2: Morganne Thompson

https://codesandbox.io/p/devbox/4y84xf","December Submission: Problem 3: Morganne Thompson

https://codesandbox.io/p/devbox/t22z9p","December Submission: Problem 4: Morganne Thompson

https://codesandbox.io/p/devbox/vshgzt"
Abhiram Nair,"December Submission: Problem 1: Abhiram Nair


def palindrome_checker(word1):
    # Create an empty string to store the reversed word
    word2 = """"
    
    # Loop through word1 in reverse order
    # Start from the last index and go down to 0
    for i in range(len(word1) - 1, -1, -1):
        # Append each character to word2
        word2 += word1[i]
    
    # Check if the original word is the same as the reversed word
    if word1 == word2:
        # If they are the same, it is a palindrome
        print(f'""{word1}"" is a palindrome.')
    else:
        # If they are different, it is not a palindrome
        print(f'""{word1}"" is not a palindrome.')

# Call the function with a test word
palindrome_checker(""racecar"")","December Submission: Problem 2: Abhiram Nair


#Understand
# We need to create a program that calculates the area of different shapes based on user input.
# This can be either a circle, rectangle, square, or triangle.

#Create
def calculate_area():
    # Introduction message
    print(""I can calculate the area of a shape for you."")
    print(""Which shape do you want me to calculate the area of? (circle, rectangle, square, triangle)"")

    # Get user input for the shape
    shape = input(""Please enter the name of the shape: "").lower()

    # Based on the shape, we will ask for the relevant measurements
    if shape == ""circle"":
        # Prompt for radius
        radius = float(input(""Please enter the radius of the circle: ""))
        area = 3.14 * (radius ** 2)  # Area formula for circle: πr^2
        print(f""The area of the circle is: {area}"")

    elif shape == ""rectangle"":
        # Prompt for length and width
        length = float(input(""Please enter the length of the rectangle: ""))
        width = float(input(""Please enter the width of the rectangle: ""))
        area = length * width  # Area formula for rectangle: length * width
        print(f""The area of the rectangle is: {area}"")

    elif shape == ""square"":
        # Prompt for side length
        side = float(input(""Please enter the side length of the square: ""))
        area = side ** 2  # Area formula for square: side^2
        print(f""The area of the square is: {area}"")

    elif shape == ""triangle"":
        # Prompt for base and height
        base = float(input(""Please enter the base of the triangle: ""))
        height = float(input(""Please enter the height of the triangle: ""))
        area = 0.5 * base * height  # Area formula for triangle: 0.5 * base * height
        print(f""The area of the triangle is: {area}"")

    else:
        # Handle invalid shape input
        print(""Invalid shape entered. Please enter one of the following: circle, rectangle, square, triangle."")

calculate_area()","December Submission: Problem 3: Abhiram Nair


#Understand
# We need to create a function that checks if all characters in a given string are unique.
# If all characters are unique, the function should return True, otherwise, it should return False.
# We should also consider edge cases like empty strings and strings with spaces.

#Create
def has_unique_characters(input_string):
    # If the input string is empty, we can consider it as having all unique characters
    if len(input_string) == 0:
        return True
    
    # Create a list to keep track of characters we have seen
    seen_characters = list()
    
    # Iterate through each character in the input string
    for char in input_string:
        # Ignore spaces
        if char == ' ':
            continue
        
        # Check if the character is already in the list
        if char in seen_characters:
            # If it is, we have a duplicate character
            return False
        else:
            # If not, add the character to the set
            seen_characters.add(char)
    
    # If we finish the loop without finding duplicates, return True
    return True

print(has_unique_characters(""abcdef""))  # Output: True
print(has_unique_characters(""hello""))    # Output: False","December Submission: Problem 4: Abhiram Nair


import random

#Understand
# We need to create a guessing game where the program randomly selects a number between 1 and 100.
# The user will guess the number, and the program will tell the user whether the guess is too high, too low, or correct.

#Create
def guessing_game():
    # Generate a random number between 1 and 100
    secret_number = random.randint(1, 100)
    print(""Welcome to the Guessing Game!"")
    print(""I have selected a number between 1 and 100. Can you guess it?"")
    
    while True:
        # Prompt the user for their guess
        user_input = input(""Enter your guess (or type 'exit' to quit): "")
        
        # Handle exit command
        if user_input.lower() == 'exit':
            print(""Thanks for playing! Goodbye!"")
            break
        
        # Validate user input
        try:
            guess = int(user_input)  # Convert input to an integer
        except ValueError:
            print(""Invalid input! Please enter a number between 1 and 100."")
            continue  # Skip to the next iteration of the loop
        
        # Check if the guess is within the valid range
        if guess < 1 or guess > 100:
            print(""Please guess a number between 1 and 100."")
            continue  # Skip to the next iteration of the loop
        
        # Compare the guess to the secret number
        if guess == secret_number:
            print(""Congratulations! You've guessed the correct number!"")
            break  # End the game if the guess is correct
        elif guess < secret_number:
            print(""Too low! Try again."")
        else:
            print(""Too high! Try again."")

# Call the function to start the game
guessing_game()"
Rafael Calderon,"December Submission: Problem 1: Rafael Calderon


def check_palindrome(string: str):
        #creates a string that is the reverse of the original
        revstring = """"
        for i in range(0, len(string)):
            revstring += string[len(string)-(i+1)]
        #compares the reverse string to the original string then returns a boolean
        return revstring.lower() == string.lower()","December Submission: Problem 2: Rafael Calderon


from math import pi #import to access the value of pi

#set of methods that return a numerical value that represents the calculated area for the respective shape
def square(side):
    return side ** 2

def rectangle(length, width):
    return length * width

def triangle(base, height):
    return  (base * height)/2

def circle(radius):
    return pi * radius ** 2

def main():
    shape = input(""For what shape (square, rectangle, circle, or triangle) would you like to calculate the area? "").lower()
    #switch-case for each shape
    #each case prevents an error from occuring from casting the user's input and displays the calculated area
    match shape:
        case 'square':
            try:
                side = int(input(""Enter the measure of the side lengths of the square: ""))
            except ValueError:
                print(""Invalid input."")
                return
            #sting format for the superscript was found at https://www.geeksforgeeks.org/how-to-print-superscript-and-subscript-in-python/
            print(f""The area of the square is {square(side)} units\u00b2"")
        case 'rectangle':
            try:
                width = int(input(""Enter the measure of the width: ""))
                length = int(int(input(""Enter the measure of the length; "")))
            except ValueError:
                print(""Invalid input."")
                return
            print(f""The area of the rectangle is {rectangle(length, width)} units\u00b2"")
        case 'circle':
            try:
                radius = int(input(""Enter the radius of the the circle: ""))
            except ValueError:
                print(""Invalid input"")
                return
            print(f""The area of the circle is {circle(radius)} units\u00b2"")
        case 'triangle':
            try:
                base = int(input(""Enter the measure of the base: ""))
                height = int(int(input(""Enter the measure of the height: "")))
            except ValueError:
                print(""Invalid input."")
                return
            print(f""The area of the triangle is {triangle(base, height)} units\u00b2"")
        case _: #base case that runs when none of the above cases are true
            print(""Invalid input."")

if __name__ == ""__main__"":
    main()","December Submission: Problem 3: Rafael Calderon


def check_string(string):
    #removes ALL whitespaces from the given string
    string = string.replace("" "","""")
    #for each letter goes through the rest of the string to find a duplicate
    for i in range(0, len(string)):
        for j in range(i+1, len(string)):
            #if there is a duplicate the function will immediately return false
            if string[i] == string[j]:
                return False
    #if no duplicate is found then the function will default to true
    return True","December Submission: Problem 4: Rafael Calderon


from random import randint #import to access the randint() function

def main():
    print(""Try to guessa number between 1 and 100!"")
    correct_num = randint(1, 100) #generates a random integer between 1 and 100 (inclusive)
    print(correct_num)
    guess = 0
    while guess != correct_num: #keeps going until player has guessed correctly
        #prevents errors in casting; goes onto the next iteration if error is caught
        try:
            guess = int(input(""Guess a number: ""))
        except ValueError:
            print(""Invalid input"")
            continue
        #if-else chain to determine what to print to the user or whether the user has won
        if guess > correct_num:
            print(""Correct answer is smaller than that!"")
        elif guess < correct_num:
            print(""Correct answer is larger than that!"")
        else:
            break
    print(""You won!"")

if __name__ == ""__main__"":
    main()"
Faraja Athanas,"December Submission: Problem 1: Faraja Athanas

Problem 1 Palindrome Checker
UNDERSTANDING:
# Create a program that checks if a given string is a palindrome.
# Inputs:  A string entered by the user.  
#Outputs:  A message indicating whether the input is a palindrome.  
#Edge Cases:  Empty string: Should return True (it’s trivially a palindrome).  • #Case differences: “Racecar” should count as a palindrome.  • Ignore spaces and special characters (if needed).
 
Clues:
 #To check for a palindrome:\
Normalize the input by converting it to lowercase.
  Reverse the string and compare it to the original.
   #Tools:
 Use .lower() to make the string lowercase.
 Use slicing ([::-1]) to reverse the string.
 
Assemble:
Accept user input.
Convert to lowercase.
remove spaces and special characters for strict palindrome checking.]
Reverse the string.
Compare the original and reversed strings.
Output whether it’s a palindrome.
 
 
Solve:
 
Real working code:
def is_palindrome(s):
  # Normalize the string: convert to lowercase
  s = s.lower()
  # Reverse the string using slicing
  reversed_s = s[::-1]
  # Check if the original string is the same as the reversed string
  return s == reversed_s
 
#mainn 
user_input = input(""Enter a string to check if it's a palindrome: "").strip()
if is_palindrome(user_input):
  print(f""'{user_input}' is a palindrome!"")
else:
  print(f"" '{user_input}' is not a palindrome."")
Examine 
Test Cases:  
Simple Palindrome:  Input: ""madam""  
Output: 'madam' is a palindrome!  
—-------------------------------
Mixed Case:   Input: ""Racecar""  
Output:  'Racecar' is a palindrome!
 
Fail case: input “Hello Word”
Ouput: “'hello' is not a palindrome.”
Improvement: 
none  needed.","December Submission: Problem 2: Faraja Athanas

https://replit.com/@farajaathanas75/Area-Calculator?v=1","December Submission: Problem 3: Faraja Athanas

UNDERSTANDING:
# We need to create that determines whether all characters in a given string are unique
#input: a string entered by the user 
#A boolean true or false is all the char in the given strings are unique or return false if their are duplicate 
Clues:
#we might need to use an empty list to check for duplicate
#we might need to remove space 
Assemble:
Make an emply list
Let the user enter a string 
Run a for loop for each char i  the string 
If the given string char  apparent in the emply string return false
Else add the char the emply list 
Return true if the return false was never triggered 
 
Solve:
 
Real working code:
def checkIfStringContainsUpperCase(s):  check = []  for i in s:    if i.upper() in check:      return False    else:      check.append(i)    return True      
input = input(""Enter something: "")print(checkIfStringContainsUpperCase(input))
 
Examine:
“ ” return True
“A” Returns True 
“aA” Returns false
“abcd” return true
“Faraja” return false
Improvement:
We can use a set() instead of the list the that the program runs faster
 
Why use UCASE:Following the UCASE ensures that i full understand the problem before solving it","December Submission: Problem 4: Faraja Athanas

UNDERSTANDING:
# We need to create ask the user to guess a number that the computer gussed
#input: a int entered by the user 
Clues:
 #we migh need to use an if statement to check
 # a while loop for the user to keep guessing 
#we might need to remove space 
Assemble:
 Import the random madual
 Let the computer choose a number ranging from a specific range
 Ask the user to enter their guess within then range 
 Use an if statement to check if the numbers are the same 
 
Solve:
 
Real working code:
import random
 
computer_choice = random.randint(1,100)
 
while True:
  user_input = input(""Enter a number "")
  try:
    user_input = int(user_input)
    if user_input == computer_choice:
      print(f""The user input {user_input} equals the computer choice {computer_choice}"")
      break
    elif user_input < computer_choice:
      print(""------------------------"")
      print(f""{user_input} Is too low "")
      
    elif user_input > computer_choice:
      print(""------------------------"")
      print(f""{user_input} Is too high "")
      
  except ValueError:
    user_input = input(""You entered a nun numeric value try again"")
  
 
 
Examine:
Computer  = 5 and user = 5:
 Breaks 
Otherwise, check if the user input is either low or high then aks the user to enter the value again 
Improvement:
We can add a if statement to insure the use enter a value that is in the right range(1-100) in this case 
Refined code 😐
import random
 
computer_choice = random.randint(1,100)
 
while True:
  user_input = int(input(""Enter a number ""))
  if user_input >= 1 and user_input <= 100:
    pass
  else:
    user_input = input(""Enter a value within the range of 1-100"" )
  try:
    user_input = int(user_input)
    if user_input == computer_choice:
      print(f""The user input {user_input} equals the computer choice {computer_choice}"")
      break
    elif user_input < computer_choice:
      print(""------------------------"")
      print(f""{user_input} Is too low "")
      
    elif user_input > computer_choice:
      print(""------------------------"")
      print(f""{user_input} Is too high "")
      
  except ValueError:
    user_input = input(""You entered a nun numeric value try again"")"
Christian	Phillips,"December Submission: Problem 1: Christian	Phillips

https://codesandbox.io/p/devbox/4x58vw","December Submission: Problem 2: Christian	Phillips

https://codesandbox.io/p/devbox/lwn88p","December Submission: Problem 3: Christian	Phillips

https://codesandbox.io/p/devbox/december-coding-practice-3-5xdyk5","December Submission: Problem 4: Christian	Phillips

https://codesandbox.io/p/devbox/yktw48"
Keyton Goff,"December Submission: Problem 1: Keyton Goff


# Check if a string is a palindrome.

# Compares the reverse of a string to itself
def check_pal(string: str):
    return string[::-1] == string

# Get a string to check from the user
uin = input(""Enter a string: "")

# Use a ternary operator in a print statement to print the result
print(""String is a palindrome"" if check_pal(uin) else ""String is not a palindrome"")","December Submission: Problem 2: Keyton Goff


# Calculate the area of a variety of 2D shapes.

# Import the math library for the pi constant
import math

# Define a function to get valid numerical input from the user (a number or expression)
def get_num(variable: str) -> float:
    while True:
        try:
            uin = eval(input(f""enter a number or literal expression for {variable}: ""))
            return uin
        except:
            input(""invalid input: enter only a number or literal expression"")
    
# Define some calculation functions
# Return the area of a circle given radius r
def area_circle() -> float:
    r = get_num(""radius"")
    return math.pi * math.pow(r, 2)

# Return the area of a square given side x
def area_square() -> float:
    x = get_num(""square side"")
    return math.pow(x, 2)

# Return the area of a rectangle given side x and y
def area_rect() -> float:
    x = get_num(""side 1"")
    y = get_num(""side 2"")
    return x*y

# Return the area of a triangle given base b and height h
def area_tri() -> float:
    b = get_num(""base"")
    h = get_num(""height"")
    return .5 * b * h

# Define a function to allow the user to select the given shape they want to calculate for
def shape_select():
    # Define two lists with corresponding indexes 
    shapes = [""circle"", ""rectangle"", ""square"", ""triangle""]
    functions = [area_circle, area_rect, area_square, area_tri]
    # Print the options
    print(""select a shape to calculate for: "")
    for i,s in enumerate(shapes):
        print(i,s)
    
    while True: # Enter an input loop so we can continuously ask the user for input incase of invalid inputs
        try: # Use a try-catch statement to catch the ValueError raised by int() when non-numerical characters are provided
            uin = int(input(""enter the index of the shape to calculate: "")) # Get the input and convert it to an integer
            if uin > 3 or uin < 0: # Ensure the input is within the acceptable range 0-3
                input(""out of range: input only 0-3"")
                continue
            break # Exit the input loop if we have a valid input
        except: # Warn the user about non-numerical inputs
            input(""invalid input: input numbers only"")
            continue

    # Calculate the area of the requested shape using the user's selection to index the functions list and run the corresponding function
    print(""the area of the shape is"", functions[uin]())

# Run the main function shape_select
shape_select()","December Submission: Problem 3: Keyton Goff


# Determine whether all characters of a string are unqiue.

# Define the function
def is_string_unique(string: str) -> bool:
    uniques = [] # Create a list to store unique letters
    for _, letter in enumerate(string): # Iterate through every character in the given string
        if letter in uniques: # Check if the character has already been found in the string
            return False # If so, return false, the character has repeated once
        else: # Otherwise, add the string to the list and continue:
            uniques.append(letter) 
            continue 

    return True # Return true if we did not find any repeated letters","December Submission: Problem 4: Keyton Goff


# Number Guessing Game

# Import the random library to get the random number we will have the player guess
import random

# Define a constant for our random number the player will try to guess
goal = random.randint(1,100)

# Define a function to check the player's answer
def check_answer(n: int):
    if n == goal: # Return a number to indicate the player's guess is high, low, or equal to the goal
        return 0  # 0 = correct, 1 = low, 2 = high
    if n > goal:
        return 1
    if n < goal:
        return 2
    
# Define a function to get and validate user inputs
def get_valid_uin():
    while True: # Enter an input loop so we can continuously ask the player for input incase they enter something invalid
        try: # Use a try-catch statement to catch the ValueError
            uin = int(input(""Guess the number (1-100): "")) # Get the input
            if uin > 100 or uin < 1: # Ensure the input is within the acceptable range 1-100
                input(""Out of range: select only numbers 1-100! Press enter to continue..."")
                continue
            return uin # Return the input if it is valid
        except: # Warn the user about non-numerical characters
            input(""Value error: select only numerical characters! Press enter to continue..."")
            continue

# Define the program's main function
def main():
    while True: # Enter an input loop to continuously check numbers until the correct one is selected
        uin = get_valid_uin() # Get the user's input
        check = check_answer(uin) # Check if it is correct, high, or low
        if check == 0: # Inform the user about their input
            break
        elif check == 1:
            print(""The number is lower!"")
            continue
        elif check == 2:
            print(""The number is higher!"")
            continue
    print(""You win! The number was"", goal)

# Run the main function
if __name__ == ""__main__"":
    main()"
Mary Offei,"December Submission: Problem 1: Mary Offei

(wasn't sure how to approach the problem in actual code so wrote out what i thought needed to be done)
Def  is_palindrome(input_string):
##Define a function is_palindrome(input_string):
Create function that goes through all the characters in word
Create function that reverses word
Check if original_word == reversed word
If reversed word is == original_word then reversed word = is_palindrome
If is_palondrome:
 print(“this word is a palindrome”)
Else:
 print(“this is not a palindrome”)",,"December Submission: Problem 3: Mary Offei

https://codesandbox.io/p/devbox/4gsm3n","December Submission: Problem 4: Mary Offei

https://codesandbox.io/p/devbox/sw3ph6"
Hoang Tin Nguyen,"December Submission: Problem 1: Hoang Tin Nguyen

def is_palindrome(s):
    s = ''.join(c.lower() for c in s if c.isalnum())  # Clean the string
    return ""The string is a palindrome."" if s == s[::-1] else ""The string is not a palindrome.""
 
# Test cases
print(is_palindrome(""Racecar""))
print(is_palindrome(""Hello""))
print(is_palindrome(""A man, a plan, a canal, Panama""))
print(is_palindrome(""No 'x' in Nixon""))
print(is_palindrome(""""))
print(is_palindrome(""12321""))
print(is_palindrome(""12345""))","December Submission: Problem 2: Hoang Tin Nguyen

def area_calculator():    shape = input(""I can calculate areas! What shape? (circle, rectangle, square, triangle): "").lower()
    if shape == ""circle"":        r = float(input(""Enter the radius: ""))        print(f""Circle area: {3.14 * r**2:.2f}"")    elif shape == ""rectangle"":        l = float(input(""Enter the length: ""))        w = float(input(""Enter the width: ""))        print(f""Rectangle area: {l * w:.2f}"")    elif shape == ""square"":        s = float(input(""Enter the side length: ""))        print(f""Square area: {s**2:.2f}"")    elif shape == ""triangle"":        b = float(input(""Enter the base: ""))        h = float(input(""Enter the height: ""))        print(f""Triangle area: {0.5 * b * h:.2f}"")    else:        print(""Sorry, I can only calculate circle, rectangle, square, or triangle."")
area_calculator()","December Submission: Problem 3: Hoang Tin Nguyen

def has_unique_chars(s):    s = s.replace("" "", """")  # Remove spaces if any    return len(s) == len(set(s))  # Compare length of string and unique characters
# Test casesprint(has_unique_chars(""abcdef""))  # Trueprint(has_unique_chars(""hello""))   # Falseprint(has_unique_chars(""""))        # True (empty string has no duplicates)print(has_unique_chars(""a b c d"")) # True (spaces ignored)print(has_unique_chars(""aa bb""))   # False","December Submission: Problem 4: Hoang Tin Nguyen

import random
def guessing_game():    number = random.randint(1, 100)    print(""I've picked a number between 1 and 100. Can you guess it?"")        while True:        try:            guess = int(input(""Your guess: ""))            if guess < 1 or guess > 100:                print(""Please pick a number between 1 and 100."")            elif guess < number:                print(""Too low! Try again."")            elif guess > number:                print(""Too high! Try again."")            else:                print(""Congratulations! You guessed it!"")                break        except ValueError:            print(""Invalid input. Please enter a number."")
guessing_game()"
Richard (Ricky) Rivera,"December Submission: Problem 1: Richard (Ricky) Rivera

Created the Code for this challenge in Google Colab:
https://colab.research.google.com/drive/1x_cCDJxOHVCTsghG02G8FKeCom2zi1uc?usp=sharing","December Submission: Problem 2: Richard (Ricky) Rivera

https://colab.research.google.com/drive/1oS9cJd2FrAkePnpeWhRT_kM5zxqYqxdd?usp=sharing","December Submission: Problem 3: Richard (Ricky) Rivera

https://colab.research.google.com/drive/1nxOCJMlY0VS3Q5brgnIWlRT8stN0sVnW?usp=sharing","December Submission: Problem 4: Richard (Ricky) Rivera

https://colab.research.google.com/drive/1Ri3WyYbi1U9ES4NFoRDt5idZF19Q252a?usp=sharing"
Salama Daudi,"December Submission: Problem 1: Salama Daudi


#create a function that checks if a word/phrase is a palindrome
#INPUT: STRING // OUTPUT: STRING
#what if string = empty? prompt again?
#use a loop to check string... slice word and reorgranize by using [::-1] (i used this once in a previous class *evil laugh*)

##BETA
#FUNC palindromeCheck():
# userWord = input(""Input a word, phrase, number to see if it is a palindrome! "")
# IF userWord is blank: reprompt, otheriwse cont
# newWord = userWord[::1]
# IF newWord == userWord,, print (""yes palindrome""), otherwise print (""no"")

def palindromeCheck(): #couldnt figure out how to do the first check for a blank string.. :(
 userWord = input(""Input a sequence to check if it is a palindrome: "") #user input for sequence
 newWord = userWord[::-1] #slicing and reordering the previous word to reverse it
print(userWord, newWord)

if userWord == newWord: #confirm/deny palindrome
print(""this is a palindrome!"")
else:
print(""not a palindrome :("")

palindromeCheck()","December Submission: Problem 2: Salama Daudi


#create a program that asks for a shape, and then takes the area of it based on its dimensions
#INPUTS: STRING, INT? FLOAT? // OUTPUT: INT? FLOAT?
##accomodate for decimals? or stick with whole numbers?

#process seems simple, just ask for a shape then inputs, then plug into formula to return...
##inputs and if statements seem to be the way to go!

#FORMULAS:
#areaTriangle = 0.5(b * h)
#areaCircle = 3.14(r * r)
#areaSquare = s * s
#areaRectangle = l * w

def area():
 userShape = input(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of: Circle, triangle, square, or rectangle? "")
if userShape == ""Rectangle"" or userShape == ""rectangle"":
 l = float(input(""Enter length: "")) #ask for inputs, i decided to accomodate for decimal measurements!
 w = float(input(""Enter width: ""))
 area = l * w #formula to solve
print(f""The area is {area}!"") #answer

if userShape == ""Triangle"" or userShape == ""triangle"": #rinse and repeat for other shapes!
 b = float(input(""Enter base: ""))
 h = float(input(""Enter height: ""))
 area = 0.5(b*h)
print(f""The area is {area}!"")

if userShape == ""Circle"" or userShape == ""circle"":
 r = float(input(""Enter radius: ""))
 area = 3.14(r * r)
print(f""The area is {area}!"")

if userShape == ""Square"" or userShape == ""square"":
 s = float(input(""Enter side length: ""))
 area = s * s
print(f""The area is {area}!"")

area()","December Submission: Problem 3: Salama Daudi


#create a function that checks if all characters in a sequence are unique
#INPUT: STRING // OUTPUT: bool

#definitely use a loop.. FOR?
#how to check for individual characters and compare them? list??? array??? not sure.. research later, try alone for now

def uniqueCharas():
 userString = input(""Give me a sequence, I will see if all characters are unique! "") #collect string
for character in userString:
#not sure how to fully implement...
#loop through the string and collect the characters... possibly in an array to compare each index with it's letter?
#not sure how else.. but I got this far at least.","December Submission: Problem 4: Salama Daudi


#number guessing game.. computer recieves random number, the user guesses. if too high == ""too high!"", too low == ""too low!""
#correct guess == game end... accomodate for invalid inputs (ie, letters, symbols...)
#INPUT: INT // OUTPUT: STRING (varies on situation)

#IMPORT RANDOM to choose the number!
#keep game running... while loop? then exit if chosen correctly

import random

def guessNumber():
 compNumb = random.randint(1, 100) #computer number
 playerGuess = 0 #initialize guess

print(""Try to guess my number!"")
while playerGuess != compNumb: #keep game running
 playerGuess = int(input(""Guess! "")) #ask for input, specifically a whole number

if playerGuess > compNumb: #check if high, low, or correct
print(""Too high, try again!"")
elif playerGuess < compNumb:
print(""Too low, try again!"")

print(f""Correct, my number was {compNumb}! Congrats!"") #if number is correct, leave loop and congratulate!

guessNumber()"
Iris Liu,"December Submission: Problem 1: Iris Liu

https://codesandbox.io/p/devbox/cgclg3","December Submission: Problem 2: Iris Liu

https://codesandbox.io/p/devbox/32pxtl","December Submission: Problem 3: Iris Liu

https://codesandbox.io/p/devbox/fwpyz2","December Submission: Problem 4: Iris Liu

https://codesandbox.io/p/devbox/n2jnjr"
joseichiromendez@gmail.com,"December Submission: Problem 1: joseichiromendez@gmail.com

def palindrome(str1, str2):  # Making an empty string to store the second string in reverse  string = '' ""  # Looping through the second string and assigning the current index  for i in range(len(str2)):    # Adding the character to the string    string += str2[len(str2) - 1 - i]  # If string 1 == to our creating string in reverse...  if str1.lower() == string.lower():    return ""The string is a palindrome""  # if it is not...  else:    return ""The string is not a palindrome""","December Submission: Problem 2: joseichiromendez@gmail.com

import math
# ask the user what type of shape they want to calculate area of
def area_calc(shape):
# if it is a circle
    if shape.lower() == 'circle':
    # ask for radius
        radius = float(input('Whats the radius? '))
    # calculate area
        return math.pi * radius * radius
# if it is a rectangle
    elif shape.lower() == 'rectangle':
   # ask for length
           length = float(input('Whats the length? '))
   # ask for height
           height = float(input('Whats the height? '))
   # calculate area
           return length*height
# if it is a square
    elif shape.lower() == 'square':
    # ask for length
        length = float(input('Whats the length? '))
    # calculate area
        return length*length
# if it is a triangle
   elif shape.lower() == 'triangle':
    # ask for base
        base = float(input('Whats the base? '))
    # ask for height
        height = float(input('Whats the height? '))
    # calculate area 
        return .5 * base * height
    # if the user entered a invalid shape 
    else:
        # return invalid shape
        return 'Invalid shape'","December Submission: Problem 3: joseichiromendez@gmail.com

# defining function
def unique_chrs(string):
    # add a set of letters that have been already checked
    letters = set()
        #loop through string
         for letter in string:
             # if the letter is in the set of letters ie has already beeen seen in the string
             if letter in letters:
                    # return false
                    return False
             # otherwise just add the letter
             set.add(letter)
         # if there are no repeats return True
    return True","December Submission: Problem 4: joseichiromendez@gmail.com

import random
# generate random number between 1 and 100
num = random.randint(1,100)
# get the user guess
guess = int(input('Guess a number between 1 and 100: '))
# while the user has not guessed correctly create a loop
while guess != num:
   # if the guess is too high tell the user
   if guess > num:
       print('Too high')
   # if the guess is too low tell the user
   elif guess < num:
        print('Too low')
   # get another guess if the user guessed incorrectly
   guess = int(input('Guess again: '))
# exit the loop and congratulate the user if they got it correctly
print('Congrats you got it')"
Russell Umukoro,"December Submission: Problem 1: Russell Umukoro

import string
def is_palindrome(s):    # Clean the string: convert to lowercase, remove punctuation and spaces    cleaned_s = ''.join(char.lower() for char in s if char.isalnum())
    # Check if the cleaned string is equal to its reverse    return cleaned_s == cleaned_s[::-1]
# Get user inputinput_string = input(""Enter a string: "")
# Check if it is a palindromeif is_palindrome(input_string):    print(""The string is a palindrome."")else:    print(""The string is not a palindrome."")","December Submission: Problem 2: Russell Umukoro

def calculate_area():  # Greet the user  print(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of?"")  shape = input(""Please type in the name of the shape (circle, rectangle, square, triangle): "").strip().lower()
  if shape == 'circle':      radius = float(input(""Enter the radius of the circle: ""))      area = 3.14159 * radius ** 2      print(f""The area of the circle is: {area:.2f}"")
  elif shape == 'rectangle':      length = float(input(""Enter the length of the rectangle: ""))      width = float(input(""Enter the width of the rectangle: ""))      area = length * width      print(f""The area of the rectangle is: {area:.2f}"")
  elif shape == 'square':      side = float(input(""Enter the side length of the square: ""))      area = side ** 2      print(f""The area of the square is: {area:.2f}"")
  elif shape == 'triangle':      base = float(input(""Enter the base of the triangle: ""))      height = float(input(""Enter the height of the triangle: ""))      area = 0.5 * base * height      print(f""The area of the triangle is: {area:.2f}"")
  else:      print(""Sorry, I don't recognize that shape. Please try again."")
# Run the area calculation programcalculate_area()","December Submission: Problem 3: Russell Umukoro

def are_all_characters_unique(s):    # Convert the string into a set to eliminate duplicates    unique_chars = set(s)
    # If the length of the set is equal to the length of the string, all characters are unique    return len(unique_chars) == len(s)
# Ask the user for inputuser_input = input(""Please enter a string of characters: "")
# Check if all characters are unique and print the resultresult = are_all_characters_unique(user_input)print(result)  # Output will be True or False","December Submission: Problem 4: Russell Umukoro

import random
def guessing_game():    # Generate a random number between 1 and 100    secret_number = random.randint(1, 100)
    print(""Welcome to the Guessing Game!"")    print(""I have selected a number between 1 and 100. Can you guess it?"")
    while True:        try:            # Ask the user for their guess            guess = int(input(""Enter your guess: ""))
            if guess < 1 or guess > 100:                print(""Please guess a number between 1 and 100."")            elif guess < secret_number:                print(""Too low! Try again."")            elif guess > secret_number:                print(""Too high! Try again."")            else:                print(f""Congratulations! You've guessed the number {secret_number} correctly!"")                break
        except ValueError:            print(""Invalid input. Please enter a valid integer."")
# Start the guessing gameguessing_game()"
Layla	Baltazar,"December Submission: Problem 1: Layla	Baltazar

#this function checks to see if the string is a palindronedef s_palindrone(text):  text = text.lower() #makes the text lowercase
  text = """".join(text.split())  reversed_text = text[::-1] #reverses the text
  #comparing the orginal and the new text  return text == reversed_text
#example tests to see if the code works or notwords = [""Racecar"", ""Hello"", ""lemons"", ""Tress"", ""Oceans""]
for word in words:  if s_palindrone(word):    print(f'""{word}"" is a palindrome.')  else:    print(f'""{word}"" is not a palindrome.')","December Submission: Problem 2: Layla	Baltazar

#code calculates the area of different shapesdef calculate_area():  print(""Hello, I can calculate the area of a shape for you."")  print(""Which shape do you want me to calculate the area of?"")
  shape = input(""Enter the shape: "").strip().lower()
  #calculates the shapes area  if shape == ""circle"":    radius = float(input(""Enter the radius: ""))    area = 3.14 * (radius ** 2)    print (""The area of the circle is"", area)
  elif shape == ""rectangle"":    length = float(input(""Enter the length: ""))    width = float(input(""Enter the width: ""))    area = length * width    print(""The area of the rectangle is"", area)
  elif shape == ""square"":    side = float(input(""Enter the side length: ""))    area = side ** 2    print(""The area of the square is"", area)
  elif shape == ""triangle"":    base = float(input(""Enter the base: ""))    height = float(input(""Enter the height: ""))    area = 0.5 * base * height    print(""The area of the triangle is"", area)
  else:    print(""Invalid shape. Please try again."") 
#starts the code to workcalculate_area()","December Submission: Problem 3: Layla	Baltazar

def unique_characters(text):  s_chars = set() #to keep track of seen characters
  #looks at all characters in the string  for char in text:    if char in s_chars:      return False    s_chars.add(char)
  return True #the charaters are unique
#examples tests to see if the code worksinputs = [""abcdef"", ""Hello"", """", ""Flowers""]for test in inputs:  result = unique_characters(test)  print(f'Input: ""{test}"" = Output: {result} ')","December Submission: Problem 4: Layla	Baltazar

def number_guess():  print(""Welcome to the Number Guessing Game!"")  print(""Try to guess! I'm thinking of a number between 1 and 100."")
  #generates a random number  hidden_number = random.randint(1, 100)
  while True:    guess = input (""Enter your guess: "")
        if not guess.isdigit():      print(""Invalid input. Please choose a number between 1 and 100."")      continue
    guess = int(guess)
    #checks to see if the guess is right    if guess == hidden_number:      print(""Congratulations! You guessed my number."")
    elif guess < hidden_number:      print(""Too low! Try a higher number"")
    else:      print(""Too high! Try a lower number."")
number_guess()"
Thomas,"December Submission: Problem 1: Thomas

""""""# we need check whether or not a given string is a palindrome# which means is the word the same word spelled backwards as it is #forwards
# use this string as our inputword = ""car""
# we can slice the string to get its reverse formnewWord = word[::-1]
# testing if new word print out reverseprint(newWord)
#then we can compare the intial string with the new string and# determine if it is equal or notif(word == newWord):    print(""is true"") # quick test print
else:    print(""is false"") # quick test print""""""","December Submission: Problem 2: Thomas

#formulas:#circle = pi * radius^2#rectangle = length * width#square = side * side#triangle = 0.5 * base * height""""""
# will need to use input to get userinputsshape = input(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of? "")
# will need to use if statments to get what the shape the user is #asking for as well as what values we need to ask for
# inside each loop we will ask the user for the values for each part
# calculate for circleif(shape == ""circle""):
    radius = float(input(""enter the radius ""))    answer = 3.14 * radius * radius    print(answer)# calculate for rectangleelif(shape == ""rectangle""):    length = int(input(""enter the length ""))    width = int(input(""enter the width ""))    answer = length * width    print(answer)# calculate for squareelif(shape == ""square""):    sideLength = int(input(""enter the side length ""))    answer = sideLength * sideLength    print(answer)    # calculate for triangleelif(shape == ""triangle""): baseLength = float(input(""enter the base length "")) heightLength = float(input(""enter the height length "")) answer = 0.5 * baseLength * heightLength print(answer)","December Submission: Problem 3: Thomas

# we need to determine whether or not a string does not have#repeating characters
# need to use string for inputinput = ""abcb""
# boolean to track whether or word is unique or notisTrue = True
# we may need to use an array to store the charcaters that we have #looped through and are already present in the stringchars = []# we will need to use a for loop to ierate through the string
# loop through each letter in inputfor i in input:        # add second loop to check if i is in chars                      # check if i is equal to j in chars    if(i in chars):        # if i is in chars is then print false                     isTrue = False                 else:        # add it to the list for later        chars.append(i)                       
if(isTrue == True):    print(""word is unique"")elif(isTrue == False):    print(""word is not unique"")","December Submission: Problem 4: Thomas

# create program that asks user for number and keeps asking them while# they have not guess it. also rpvoide hints by telling them if if# there guess is to low or to high# will need to use randomimport random
# need to get random numberrandomNum = random.randint(1,100)
# need to use input to get inputguess = int(input(""guess a number between 1 and 100 ""))
# need to use while loop to keep asking user for inputwhile guess != randomNum:     # if num greater than randomNum tell user        if(guess > randomNum):        print(""num to high"")    # if num less than randomNum tell user        elif(guess < randomNum):        print(""num to low"")    else:        print(""you got it"")        break    # ask user again to enter a guess    guess = int(input(""guess a number between 1 and 100 ""))"
Jacob	Deckert,"December Submission: Problem 1: Jacob	Deckert

https://codehs.com/sandbox/id/new-sandbox-program-NMHI6N","December Submission: Problem 2: Jacob	Deckert

https://codehs.com/sandbox/id/december-submission-2-KEuyRJ","December Submission: Problem 3: Jacob	Deckert

https://codehs.com/sandbox/id/december-submission-3-MWWH32",
Veda Rabishanker,"December Submission: Problem 1: Veda Rabishanker

https://codehs.com/sandbox/id/new-sandbox-program-cS9DX6","December Submission: Problem 2: Veda Rabishanker

https://codehs.com/sandbox/id/new-sandbox-program-KUV6Ph","December Submission: Problem 3: Veda Rabishanker

https://codehs.com/sandbox/id/new-sandbox-program-WEIfc7","December Submission: Problem 4: Veda Rabishanker

https://codehs.com/sandbox/id/new-sandbox-program-hzoGkr"
Joseph Aderinto,"December Submission: Problem 1: Joseph Aderinto

def is_palindrome(s):  # Remove non-alphanumeric characters and convert to lower case  filtered_chars = [char.lower() for char in s if char.isalnum()]  # Check if the filtered list is equal to its reverse  return filtered_chars == filtered_chars[::-1]
# Get user inputuser_input = input(""Enter a string to check if it's a palindrome: "")
# Check if the input string is a palindrome and print the resultif is_palindrome(user_input):  print(""The string is a palindrome."")else:  print(""The string is not a palindrome."")","December Submission: Problem 2: Joseph Aderinto

def calculate_area():    print(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of?"")    shape = input(""Please type in a shape (circle, rectangle, square, triangle): "").lower()
    if shape == ""circle"":        radius = float(input(""Enter the radius of the circle: ""))        area = 3.14159 * radius * radius        print(f""The area of the circle is {area}"")
    elif shape == ""rectangle"":        length = float(input(""Enter the length of the rectangle: ""))        width = float(input(""Enter the width of the rectangle: ""))        area = length * width        print(f""The area of the rectangle is {area}"")
    elif shape == ""square"":        side = float(input(""Enter the side length of the square: ""))        area = side * side        print(f""The area of the square is {area}"")
    elif shape == ""triangle"":        base = float(input(""Enter the base of the triangle: ""))        height = float(input(""Enter the height of the triangle: ""))        area = 0.5 * base * height        print(f""The area of the triangle is {area}"")
    else:        print(""Sorry, I can only calculate the area of a circle, rectangle, square, or triangle."")
calculate_area()","December Submission: Problem 3: Joseph Aderinto

def has_unique_characters(string):    seen_characters = set()
    for char in string:        if char in seen_characters:            return False        seen_characters.add(char)
    return True
user_input = input(""Enter a string to check if it has all unique characters: "")result = has_unique_characters(user_input)
if result:    print(""True"")else:    print(""False."")",
Zoë	Bryant,"December Submission: Problem 1: Zoë	Bryant

'''understand: check if a string is a palindrome (the same forwards and backwards)
clues: the string reversed should be the same as the original string
assemble: INPUT stringFOR letter in string, original_order.append()reverse_order = original_order.reverse()IF reverse_order == original order, the string is a palindromeELSE the string is not a palindrome'''
#possible edge cases: numbers, capitalization
original_order = []reverse_order = []
possible_palindrome = input(""Enter your string: "")
#turn the string into a list#add to 2 listsfor letter in possible_palindrome:    original_order.append(letter)    reverse_order.append(letter)
#reverse the order of one of the listsreverse_order.reverse()
#if the original order list and the reverse order list are the same, the string is a palindromeif original_order == reverse_order:    print(""The string is a palindrome"")
#if they arent the same, the string is not a palindromeelse:    print(""The string is not a palindrome"")","December Submission: Problem 2: Zoë	Bryant

'''understand: find the area of different shapes
clues: find out what the shape is; each shapes will need different attibutes and use different equations to calculate the area
assemble: INPUT type of shape    IF shape is a square, a triangle, a rectangle or a circle        INPUT needed attributes of shape (ex. base and height of the triangle)        calculate the area with the equation (ex. base*height*0.5 )        PRINT area    ELSE        invalid input'''
#possible edge cases: different units
print(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of?"")shape_type = input(""What shape would you like to find the area of? "")
if shape_type == 'circle':    radius = float(input(""What is the radius of the circle? ""))    circle_area = 2*3.1415962*radius    print(f'circle area = {circle_area} units squared')
elif shape_type == 'rectangle':    length = float(input(""What is the length of the rectangle? ""))    width = float(input(""What is the width of the rectangle? ""))    rectangle_area = length*width    print(f'rectangle area = {rectangle_area} units squared')
elif shape_type == 'square':    side_length = float(input(""What is the length of the square's sides? ""))    square_area = side_length*side_length    print(f'sqaure area = {square_area} units squared')
elif shape_type == 'triangle':    base = float(input(""What is the base of the triangle? ""))    height = float(input(""What is the height of the triangle? ""))    triangle_area = base*height*0.5    print(f'triangle area = {triangle_area} units squared')
else:    print(""Sorry, your input is invalid. Please try again."")","December Submission: Problem 3: Zoë	Bryant

'''understand: find duplicate letters in the string
clues: count of the letter in the string would be greater than one if the letter is duplicated
assemble: INPUT stringFOR letter in string    IF count of letter is > one, add to duplicates list    IF letter is already in duplicates list, dont add againPRINT duplicate list'''
duplicates = []string = input(""Enter your phrase: "")for letter in string:    #if the letter appears more than once and is not already in the duplicate list    if string.count(letter) > 1 and letter not in duplicates:        #add the letter to the duplicates list        duplicates.append(letter)#print the duplicatesprint(f'duplicates: {duplicates}')","December Submission: Problem 4: Zoë	Bryant

'''understand: generate a random number and take in a users guess. see if the guess is higher, lower or equal to the random number
clues: if the guess is greater than the random number, the guess is too high (tell the user they are too high), if the guess is lesser than the random number, the guess is too low (tell the user they are too low)
assemble: GENERATE random numberWHILE guess is not equal to the random number    INPUT guess        IF guess is less than random number            PRINT guess is too low        ELIF guess is greater than random number            PRINT guess is too highPRINT you win!'''
import randomrandom_number = random.randint(1, 100)
#take users guessguess = int(input('What is the number? '))print()
#as long as the guess is incorrectwhile guess != random_number:  print(f'Nope! {guess} is not the number. ')  #if the guess is larger than the random number  if guess > random_number:    #tell the user, and prompt them to guess again    print('Your guess is too high')    print()  #if the guess is less than the random number  elif guess < random_number:    #tell the user, and prompt them to guess again    print('Your guess is too low')    print()  guess = int(input('Try again: '))  print()
#if the guess is correct, tell the user and end the gameprint('You win!')exit()"
Gabriela	Avendano,"December Submission: Problem 1: Gabriela	Avendano

def is_palindrome(string):  #ignored/refined version: keeps only numbers and letters and ignores puncuation and capitalization  ignored = ''.join(c.lower() for c in string if c.isalnum())  # checks if ignored string is equal to its reverse  return ignored == ignored[::-1]
# recieve user input and print resultstring = input(""Enter a string: "")print(""The string is a palindrome."" if is_palindrome(string) else ""The string is not a palindrome."")","December Submission: Problem 2: Gabriela	Avendano

#ask user about the shapedef calculate_area():  #print/ask fir input about shapes  print(""I can calculate the area of a shape for you."")  shape = input(""Which shape do you want me to calculate the area of? (circle, rectangle, square, triangle): "").strip().lower()
  if shape == ""circle"":  #if circle solve for radius      area = 3.14159 * float(input(""Please enter the radius of the circle: "")) ** 2  elif shape == ""rectangle"":#if rectangle propmpt for length and width      area = float(input(""Please enter the length of the rectangle: "")) * float(input(""Please enter the width of the rectangle: ""))  elif shape == ""square"":  #if square  peompt for length      area = float(input(""Please enter the side length of the square: "")) ** 2  elif shape == ""triangle"":  #if triangle prompt for base and height      area = 0.5 * float(input(""Please enter the base of the triangle: "")) * float(input(""Please enter the height of the triangle: ""))  else:      print(""I don't recognize that shape, sorry."")      return
  print(f""The area of the {shape} is: {area:.2f}"")
# Run the programcalculate_area()","December Submission: Problem 3: Gabriela	Avendano

def are_all_unique(string):  #convert string to a set and compare length with original string length  return len(set(string)) == len(string)
#ask the user for input/worduser_input = input(""Enter a string to check if all characters are unique: "")
#check if the characters are unique and reply true or falseif are_all_unique(user_input):  print(""true"")else:  print(""false"")","December Submission: Problem 4: Gabriela	Avendano

import random
def guess_number():    #generate random number between 1 and 100    number = random.randint(1, 100)
    print(""Welcome to the number guessing game!"")    print(""I have chosen a random number between 1 and 100. Can you guess it?"")
    while True:# user inpu/guess        guess = int(input(""Enter your guess: ""))
        if guess < number:#if guess is lower than number let user try again            print(""The number is larger. Try again!"")        elif guess > number:#if guess is higher than number let user try again            print(""The number is smaller. Try again!"")        else:            print(""Congratulations! You guessed the number correctly!"")            break  # End the game if  users guess is correct
# Start the gameguess_number()"
Oritsedamire	Omabuwa,"December Submission: Problem 1: Oritsedamire	Omabuwa


#palindrome checker

#user input
word = input(""Enter your word: "")

#making lowercase so no issues with punctuations
word.lower()

#less than two cant be flipped
if len(word) < 2:
print(""Word length too short"")

#setting up for while loop
newWord = """"
count = len(word)-1

#while loop to loop thru the input backwards and then add it to a new string
while count >= 0:
 newWord += word[count]
 count = count-1
#check if out new, reversed string is equal to the og input
if newWord == word:
print(""This word is a palindrome!"")
else:
print(""That word is not a palindrome"")","December Submission: Problem 2: Oritsedamire	Omabuwa


import math
#area calculator

#print and input
print(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of?"")
print()
shape = input(""Type in your shape: "") 

#just in case
shape.lower()

#check if shape is circle, triangle, square, or rectangle. find side lengths and do math
if(shape == 'circle'):
 radius = int(input(""What's the radius?""))
 area = math.pi * pow(radius,2)
if(shape == 'rectangle'):
 length = int(input('Whats the length?'))
 width = int(input('Whats the width?'))
 area = length * width
if(shape == 'triangle'):
 base = int(input('Whats the base?'))
 height = int(input('Whats the height?'))
 area = .5 * base * height
if(shape == 'square'):
 side = int(input('What is the side length?'))
 area = side * 4

#didnt return so i could test it but would be return area
print(area)","December Submission: Problem 3: Oritsedamire	Omabuwa


#unique characters

word = input('Type your word: ')

word.lower()

#boolean to keep check if true or false and counter
unique = True
#going to add letters to this list and compare against word to check duplicates
word_list = []
count = 0

#counts each letter and also stops when its false
while unique == True and count<len(word)-1:
#must be false if that word is already in the list. also dont include spaces
if word[count] in word_list and word[count] != ' ':
 unique = False
else:
#add the letter to the list to iterate thru again
 word_list.append(word[count])
 count+=1

#print!
print(unique)","December Submission: Problem 4: Oritsedamire	Omabuwa


import random
#number guessing gamne

#computers number
num = random.randint(1,100)

#users number
guess = int(input(""Guess my number: ""))

#checks invalid
if(guess<1 or guess>100):
print(""Your number must be between 1 and 100"")

#loops until the user guesses, checks if smaller or bigger, breaks when user guesses the number
while(guess!=num):
if(guess > num):
print(""My number is smaller. Guess again"")
 guess = int(input(""Guess my number: ""))
if(guess < num):
print(""My number is bigger. Guess again"")
 guess = int(input(""Guess my number: ""))
if(guess==num):
print(""Congrats! Game over!"")
break"
Harshita	Singh,"December Submission: Problem 1: Harshita	Singh

def ispalindrome(string):  if(string==string[::-1]):    print(""The string is a palindrome"")    else:    print(""The string is not a palindrome"")  
ispalindrome(""mom"")ispalindrome(""hello"")","December Submission: Problem 2: Harshita	Singh

import math
whatarea=input(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of?\n Circle \n Rectangle \n Square \n Triangle\n"")
if whatarea.lower() == ""circle"":    rofcircle=int(input(""What is the radius of your circle? ""))    circlearea=(math.pi)*(rofcircle*rofcircle)    print(f""The area of the circle is {circlearea}."")
elif whatarea.lower() == ""rectangle"":    length=int(input(""What is the length of your rectangle? ""))    width=int(input(""What is the width of your rectangle? ""))    rectanglearea=length*width    print(f""The area of the rectangle is {rectanglearea}."")
elif whatarea.lower() == ""square"":    sidelength=int(input(""What is the side length of your square? ""))    squarearea=sidelength**2    print(f""The area of the square is {squarearea}."")
elif whatarea.lower() == ""triangle"":  base=int(input(""What is the base length of your triangle?""))  height=int(input(""What is the height of your triangle?""))  trianglearea=base*(height/2)  print(f""The area of the triangle is {trianglearea}."")","December Submission: Problem 3: Harshita	Singh

def isunique(string):       return len(set(string)) == len(string)
if __name__ == ""__main__"":    test_string = input(""Enter a string: "")    result = isunique(test_string)    print(f""All characters are unique: {result}"")","December Submission: Problem 4: Harshita	Singh

import random
random_int = random.randint(1, 100)print(""You have 10 guesses to guess the random number between 1 to 100"")for i in range(10):    guess = int(input(f""Guess {i+1}: ""))    if guess < random_int:        print(""The answer is larger guess again"")    elif guess > random_int:        print(""The answer is smaller guess again"")    else:        print(f""You guessed {random_int} good job!"")        break    if i == 9:        print(f""Game over! The number was {random_int}"")"
Paris	Lagrange,"December Submission: Problem 1: Paris	Lagrange

https://replit.com/@parisllagrange/problem1#main.py","December Submission: Problem 2: Paris	Lagrange

https://replit.com/@parisllagrange/problem1#main.py","December Submission: Problem 3: Paris	Lagrange

https://replit.com/@parisllagrange/problem1#main.py","December Submission: Problem 4: Paris	Lagrange

https://replit.com/@parisllagrange/problem1#main.py"
Benjamin DeGraff,"December Submission: Problem 1: Benjamin DeGraff

#Create a program that checks whether a given string is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forwards and backwards (ignoring spaces, punctuation, and capitalization).
#Palindrome is spelled the same forwards and backwards.#Need to compare orignal string with reversed string #Need to find a way to reverse a string --> Splicing#Inputs: string#Outputs: string (Pring a string saying if true/false)
def is_palindrome(s):    if s.lower() == s[::-1].lower(): #Compare orignal with reversed using splicing        print(""The string is a palindrome."")    else:        print(""The string is not a palindrome."")
is_palindrome(""Racecar"")is_palindrome(""Hello"")","December Submission: Problem 2: Benjamin DeGraff

#Create a program that says: ""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of?"" and then asks the user to type in the name of a shape (e.g., triangle, rectangle, square, circle).#Then, depending on which shape the user types, the program will ask for the relevant measurements:#If they choose circle, prompt for the radius.#If they choose rectangle, prompt for the length and width.#If they choose square, prompt for the side length.#If they choose triangle, prompt for the base and height.#Use the correct formula to calculate and return the area of the chosen shape.
#User input needed to get answers from user#Based on answers, calculate the area using the chosen formula#Input: string/int#Output: int
PI = 3.14159 #Constant for PI
def area_calc():    #Get the shape    shape = input(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of?\n[1] Circle\n[2] Rectangle\n[3] Square\n[4] Triangle\n> "")        #Check which shape, if none then return invalid input (Could also use try/catch system instead)    if shape == ""1"":        radius = int(input(""Radius? ""))        return radius * radius * PI    elif shape == ""2"":        length = int(input(""Length? ""))        width = int(input(""Width? ""))        return length * width    elif shape == ""3"":        length = int(input(""Length? ""))        return length * length    elif shape == ""4"":        base = int(input(""Base? ""))        height = int(input(""Height? ""))        return 0.5 * base * height    else:        return ""invalid input""
area = area_calc()print(f""The area is {area}."")","December Submission: Problem 3: Benjamin DeGraff

#Create a function that determines whether all characters in a given string are unique. If the string has all unique characters, return True; otherwise, return False.
#Need to check if all characters in a string are different#Sets --> Only contain unique characters#Make a set using the string, and compare them#If they have the same length, then the string is unique because no characters were removed in the set
def unique_string(s):    string = list(s)    check = set(string)    if len(string) == len(check):        return True    else:        return False
test = unique_string(""Hello my name is Ben"")    print(f""Is the string unique? {test}"")","December Submission: Problem 4: Benjamin DeGraff

#Create a program that plays a guessing game with the user. The program will choose a random number between 1 and 100, and then ask the user to guess the number.#If the user guesses correctly, the program congratulates the player and ends the game.#If the user's guess is too high, the program tells them the answer is smaller and lets them guess again.#If the user's guess is too low, the program tells them the answer is larger and lets them guess again.
#Generate a random number, then use a while loop to continue playing until user guesses the number
import random
def guessing_game():    number = random.randint(1,100) #Generate random number    PLAYING = True #Create check varaible    while PLAYING == True:         try: #Making sure user inputs a number            guess = int(input(""Enter a number between 1 and 100: ""))            if guess == number: #If guess is correct                print(""Congrats! You win!"")                PLAYING = False            elif guess > number: #If guess is too high                print(""Lower!"")            elif guess < number: #If guess is too low                print(""Higher!"")        except:             print(""Please enter a number"")            guessing_game()"
Juliet Davis,"December Submission: Problem 1: Juliet Davis

#Palindrome is a word that reads the same forward and backward.
print(""Palindrome Checker!""); #In this program we are checking to see if the word is a Palindrome
user_word = input(""Enter a word: ""); #On line 5 we are asking the user to type a word
user_word = user_word.lower(); #On line 7 we are ignoring capitalization
backwards_word = user_word[::-1];  #On line 9 we reversed the user word
if user_word == backwards_word: # On line 11 we are comparing user and backwards    print(""The string is a palindrome.""); #if they are equal than its a palindromeelse:    print(""The string is not a palindrome""); #If not equal than its not palindrome","December Submission: Problem 2: Juliet Davis

# In this program we are calculating the area of the shape
print(""I can calculate the area of a shape for you."");# Asking the user what shape they want to calculateshape = input(""Which shape do you want me to calculate the area of? (circle, rectangle, square, triangle): "");
pi = 3.14;
if shape == ""circle"":    radius = float(input(""Enter the radius of the circle: "")); #Asking the user for the radius of the circle    area = pi * radius * radius  # Area of circle formula: pi * r^2    print(""The area of the circle is:"", area); #Print the area of the circle    elif shape == ""rectangle"":    length = float(input(""Enter the length of the rectangle: "")); #Asking the user for the length of the rectangle    width = float(input(""Enter the width of the rectangle: "")); #Asking the user for the width of the rectangle    area = length * width  # Area of rectangle formula: length * width    print(""The area of the rectangle is:"", area); #print the area of the rectangle    elif shape == ""square"":    side = float(input(""Enter the side length of the square: "")); #Asking the user for the length of the square    area = side * side  # Area of square formula: length*length    print(""The area of the square is:"", area); #Print the area of the square    elif shape == ""triangle"":    base = float(input(""Enter the base of the triangle: "")); #Asking the user for the base of the triangle    height = float(input(""Enter the height of the triangle: "")); #Asking the user for the height of the triangle;    area = 0.5 * base * height  # Area of triangle formula: 0.5 * base * height    print(""The area of the triangle is:"", area); #Print the area of the triangle    else:    print(""Incorrect shape""); #This is when the user does not choose any of the shapes","December Submission: Problem 3: Juliet Davis

#Intrduction and explaning what the program doesprint(""This program checks if all characters in a given word are unique."")
word = input(""Please enter a word: ""); #Asing the user to type a word
if len(word) == len(set(word)): #This checks if all characters are unique    print(""True""); #Yes all characters are uniqueelse:    print(""False""); #All charcters are not unique","December Submission: Problem 4: Juliet Davis

import random
number = random.randint(1, 100); # This picks a random number between 1 and 100
while True: #A loop that keeps going until the user guess correctly    #Asing the user to pick a number between 1 and 100    guessNumber = int(input(""Guess a number between 1 and 100: ""));        # This is when the guess is correct you exit the loop    if guessNumber == number:        print(""Congratulations!!! You guessed it!"");        break; #This exits the loop and ends the game            # This is when the guess is to high    elif guessNumber > number:        print(""Guess Again! Number is to high!""); # This tells the user to guess lower            else:        print(""Guess Again! Number is to low!""); # This tells the user to guess higher"
Wisdom	Walker,"December Submission: Problem 1: Wisdom	Walker

# Palindrome Checker
# This program checks if a word or phrase is a palindrome (reads the same forwards and backwards).# It ignores spaces, punctuation, and capitalization.
import re  # For cleaning up the input string
def is_palindrome(string):    # Clean the string: remove non-letters and numbers, and make it lowercase    cleaned = re.sub(r'[^A-Za-z0-9]', '', string).lower()        # Check if the cleaned string is the same backwards    return cleaned == cleaned[::-1]
def main():    # Ask the user for a string    user_input = input(""Type something to see if it's a palindrome: "").strip()
    # Check for an empty input    if not user_input:        print(""You didn't type anything! Try again."")        return
    # Check if it's a palindrome and print the result    if is_palindrome(user_input):        print(""Yep, that's a palindrome!"")    else:        print(""Nope, not a palindrome."")
if __name__ == ""__main__"":    main()","December Submission: Problem 2: Wisdom	Walker

# Area Calculator
# This program calculates the area of different shapes (circle, rectangle, square, triangle).# It asks the user for the shape and the relevant measurements, then calculates the area.
def calculate_area():    print(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of?"")    shape = input(""Type 'circle', 'rectangle', 'square', or 'triangle': "").strip().lower()
    if shape == ""circle"":        # Ask for the radius        radius = float(input(""Enter the radius of the circle: ""))        area = 3.14159 * radius ** 2  # Circle area formula        print(f""The area of the circle is {area:.2f}"")
    elif shape == ""rectangle"":        # Ask for length and width        length = float(input(""Enter the length of the rectangle: ""))        width = float(input(""Enter the width of the rectangle: ""))        area = length * width  # Rectangle area formula        print(f""The area of the rectangle is {area:.2f}"")
    elif shape == ""square"":        # Ask for the side length        side = float(input(""Enter the side length of the square: ""))        area = side ** 2  # Square area formula        print(f""The area of the square is {area:.2f}"")
    elif shape == ""triangle"":        # Ask for base and height        base = float(input(""Enter the base of the triangle: ""))        height = float(input(""Enter the height of the triangle: ""))        area = 0.5 * base * height  # Triangle area formula        print(f""The area of the triangle is {area:.2f}"")
    else:        # Handle invalid shape input        print(""Sorry, I don't know how to calculate the area of that shape."")
if __name__ == ""__main__"":    calculate_area()","December Submission: Problem 3: Wisdom	Walker

# Unique Characters in a String
# This program checks if all characters in a given string are unique.# It returns True if all characters are unique and False otherwise.
def has_unique_characters(string):    """"""    Determines if a string has all unique characters.
    Args:        string (str): The input string to check.
    Returns:        bool: True if all characters are unique, False otherwise.    """"""    # Create an empty set to store seen characters    seen_characters = set()
    # Iterate over each character in the string    for char in string:        # If the character is already in the set, return False        if char in seen_characters:            return False        # Otherwise, add the character to the set        seen_characters.add(char)
    # If we finish the loop without finding duplicates, return True    return True
def main():    # Ask the user for a string input    user_input = input(""Enter a string to check if all characters are unique: "").strip()
    # Check for an empty input    if not user_input:        print(""You didn't type anything! Try again."")        return
    # Check if the input string has unique characters    if has_unique_characters(user_input):        print(""All characters are unique!"")    else:        print(""Some characters are repeated."")
if __name__ == ""__main__"":    main()","December Submission: Problem 4: Wisdom	Walker

# Number Guessing Game
import random  # To generate random numbers
def number_guessing_game():    """"""    Plays a number guessing game with the user.    The program selects a random number between 1 and 100,    and the user guesses until they get it right.    """"""    # Generate a random number between 1 and 100    target_number = random.randint(1, 100)        print(""Welcome to the Number Guessing Game!"")    print(""I've picked a number between 1 and 100. Can you guess what it is?"")
    while True:        try:            # Ask the user for their guess            guess = int(input(""Enter your guess: ""))
            # Check if the guess is correct            if guess == target_number:                print(""Congratulations! You guessed the number!"")                break            # Provide hints if the guess is incorrect            elif guess < target_number:                print(""Too low! Try guessing a larger number."")            else:                print(""Too high! Try guessing a smaller number."")
        except ValueError:            # Handle invalid input (e.g., non-integer values)            print(""Please enter a valid number."")
if __name__ == ""__main__"":    number_guessing_game()"
Shayla Blackston,"December Submission: Problem 1: Shayla Blackston

string = input(""Enter a word: "") 
s = ''.join(string.lower().split()) # this function would remove the spaces and make it lowercase.
if s == s[::-1]: #this would check if the word is the same reversed.
            print(""This is a palindrome."")else:
           print(""This is not a palindrome."")","December Submission: Problem 2: Shayla Blackston

Import math # to use the value of pi
 
Def calculate_area(shape, dimensions):
 If shape == “triangle”:
  Return 0.5 * dimensions[0] * dimensions[1]
 Elif shape == “square”:
  Return dimensions[0] ** 2
 Elif shape == “rectangle”:
  Return dimensions[0] * dimensions[1]
 Elif shape == “circle”:
  Return math.pi * (dimensions[0] ** 2)
 
def main(): 
    print(""I can calculate the area of a shape for you."")
    shape = input(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of?  (circle, rectangle, square, triangle): "")
 
 
 
#prompts
 
Prompts = {  
""circle"": ""Please enter the radius of the circle: "",
        ""rectangle"": ""Please enter the length and width of the rectangle (separated by a space): "",
        ""square"": ""Please enter the side length of the square: "",
        ""triangle"": ""Please enter the base and height of the triangle (separated by a space): ""
    }
  

If shape in prompts:
 Try:
  If shape in [“Rectangle” , “triangle”]:  # we have to do rectangle and triangle separately because there are going to be two inputs.
  Dimensions = list(map(float, input(prompts[shape]).split()))
            else:
                # circle and square have one input
                dimensions = [float(input(prompts[shape]))]

#now we have to get the areas
 
Area = area(shape, dimensions) Print(f”The area of this {shape} is {area:.2f}”)
Except ValueError: print( Invalid Input. Please enter one of the corresponding shapes and numeric value.”)

if __name__ == ""__main__"":
    main()","December Submission: Problem 3: Shayla Blackston

def unique_characters:        unique_char = set() #the set is to store the unique characters
for char in s: # a for loop is to check through each letter to see if it was said already.      if char in unique_chars: # if a letter was already in the set it would return false
            return False
     unique_chars.add(char) # this function adds the characters back into the set. 
return True
# If there are no repeat letters it would return true.","December Submission: Problem 4: Shayla Blackston

import random # for the random number 
def guessing_game():       secret_number = random.randint(1, 100)
       attempts = 0 # to keep check of the number of attempts from the user
   
       print(""Welcome to my Guessing Game !"")
       print (""I'm thinking of a number between 1 and 100. Try and guess it!"")
while Tretrue:
    try:
          guess = int(input(""Enter your guess: ""))            attempts += 1 # adding to the number of attempts
           if guess < secret_number:
               print(""Your answer is to low, try again."")           elif guess > secret number:
               print(""Your answer is to high, try again"")
               break # break the while loop, if the answer is correct.
            else: 
              print(f"" Congrats! You guessed the correct number. It took you {attempts} attempts."")
except ValueError:
      print(""Invalid number, please provide a number between 1 and 100"")
 
if __name__ == ""__main__"":    guessing_game()"
Nasir Colon,"December Submission: Problem 1: Nasir Colon


#make a function to create a string from an input

string = input(""write your string here:"")

#reverse the string using slicing
#code referenced from https://www.w3schools.com/python/python_howto_reverse_string.asp

text = f""{string}""[::-1]

#make a function to check for a plaindrome 
def plaindrome_checker():
    if text == string: #if the string and the reversed string are the same then its a plaindrome 
        print(""this is a palindrome"")
        print(f""{string}"")
        print(f""{text}"")
    else: #if not say that it isnt a palindrome
        print(""this string is not a plaindrome"")
        print(f""{string}"")
        print(f""{text}"")

plaindrome_checker()","December Submission: Problem 2: Nasir Colon


#make a mini menu for choosing a shape 
from math import pi
def shape_menu():
   shape_choice = input(""choose the shape to calculate the area for: \n 1.circle \n 2.rectange \n 3.square \n 4.triangle \n please input your shape(1-4) here:"")
  #make an if statment to do the math for every type of shape
   if shape_choice == ""1"":
      area = float(input(""please input your radius:""))
      circle_area = pi * area**2
      print(circle_area)
   elif shape_choice == ""2"":
      area = float(input(""please input your length:""))
      area2 = float(input(""please input your width:""))
      rectangle_area = area * area2
      print(rectangle_area)
   elif shape_choice == ""3"":
    area = float(input(""please input your side length""))
    square_area = area**2
    print(square_area)
   elif shape_choice == ""4"":
    area = float(input(""please input your base:""))
    area2 = float(input(""please input your height:""))
    triangle_area = 0.5 * area * area2
    print(triangle_area)
   else:
    print(""please input a valid choice."")  #for invalid inputs it will say to choose a valid one   
shape_menu()","December Submission: Problem 3: Nasir Colon


##make a function to imput a string
string = input(""put a string in here:"")

#code referenced from https://www.geeksforgeeks.org/python-program-to-check-if-a-string-contains-all-unique-characters/

letter_check = """" #empty string to check for letters 

for character in string:
    if character not in letter_check: #adds to letter check when the character is not in it already
        character+= letter_check

if string == letter_check: #looks to see if both strings made are the same 
    print(""all characters unique"") # they are the same
else:
    print(""all characters not unique"") #they are not the same","December Submission: Problem 4: Nasir Colon




import random 

number = range(1,100) #making a range of numbers to choose from

def guessing_game():
    correct_number = random.choice(number)#picking a random number from the range
    guess = int(input(""pick a number:"")) #pick a numebr
    try:  # trys to see if the input was a number
        val = int(guess)
    except ValueError: # if isnt a number it will ask for a number
        print(""Not an number."")
        guess = int(input(""pick a number:""))

    while guess != correct_number: # keep the game going until the player wins
        if guess == correct_number:
            print(""You got it"") #win condition met and the game ends
        elif guess > correct_number:
            print(""too high"") #adding extra information for the player to guess right
            guess = int(input(""pick a number:"")) #lets the player guess again and also to prevent an infininte loop
        elif guess < correct_number:
            print(""too low"")    
            guess = int(input(""pick a number:""))
guessing_game()"
Eliakim Latte,"December Submission: Problem 1: Eliakim Latte


def is_palindrome(word):
# Check if the word is equal to its reverse
return word == word[::-1]

# User input
word = input(""Write a word: "")

# Check if the word is a palindrome and print the result
if is_palindrome(word):
print(""The string is a palindrome."")
else:
print(""The string is not a palindrome."")","December Submission: Problem 2: Eliakim Latte


def calculate_area():
while True:
print(""\nI can calculate the area of a shape for you."")
 shape = [
""1. triangle"",
""2. rectangle"",
""3. square"",
""4. circle""
 ]

# Display the shape options
for option in shape:
print(option)

# Input validation loop
 calculate = """"
while calculate not in [""1"", ""2"", ""3"", ""4""]:
 calculate = input(""\nWhich shape do you want me to calculate the area of (1-4): "")

# Process based on the user's choice
if calculate == ""1"":
 base = float(input(""Please enter the base of the triangle: ""))
 height = float(input(""Please enter the height of the triangle: ""))
 area = 0.5 * base * height
print(f""The area of the triangle is: {area:.2f} square units."")
elif calculate == ""2"":
 length = float(input(""Please enter the length of the rectangle: ""))
 width = float(input(""Please enter the width of the rectangle: ""))
 area = length * width
print(f""The area of the rectangle is: {area:.2f} square units."")
elif calculate == ""3"":
 side = float(input(""Please enter the side length of the square: ""))
 area = side ** 2
print(f""The area of the square is: {area:.2f} square units."")
elif calculate == ""4"":
 radius = float(input(""Please enter the radius of the circle: ""))
 area = 3.14159 * radius ** 2
print(f""The area of the circle is: {area:.2f} square units."")

# Ask if the user wants to calculate again
 again = input(""\nDo you want to calculate the area of another shape? (yes/no): "").lower()
if again != ""yes"":
print(""Goodbye!"")
break # Exit the loop and end the program

# Call the function to start the program
calculate_area()","December Submission: Problem 3: Eliakim Latte


def has_unique_characters(s):
# Use a set called column_chars to track characters we have seen
 column_chars = set()
for char in s:
# If the character is already in the set, it's a duplicate
if char in column_chars:
return False
# Otherwise, add the character to the set
 column_chars.add(char)
# If no duplicates were found, return True
return True

# Main loop to get user input
while True:
# Get user input
 s = input(""Write a word (or type 'exit' to quit): "")

# Exit the loop if the user types 'exit'
if s.lower() == 'exit':
print(""Exiting the program."")
break
# Call the function to check if the characters are unique
if has_unique_characters(s):
print(""All characters are unique!"")
else:
print(""There are duplicate characters."")","December Submission: Problem 4: Eliakim Latte


import random
def guess_game():
print(""Welcome to Guess the predictory!"")
print(""I thinking of a number between 1 and 100 you guess it."")
# The program randomly selects a number between 1 and 100.
 operater_guess = random.randint(1 , 100)
while True:
# Player inputs their guess and converts to integer
try:
 player_guess = int(input(""\nGuess a number between 1 and 100: ""))
except ValueError:
print(""Please enter a valid number!"")
continue
# Check if the guess is correct.
if player_guess == operater_guess :
print(""congratulation you won. "")
break # Ends the game if the guess is correct.
elif player_guess < operater_guess :
print(""Too low! Try again."")
else:
print(""Too high! Try again."")

# Call the function to start the game
guess_game()"
Thenuka	Wickramanayake,"December Submission: Problem 1: Thenuka	Wickramanayake

 
    # Check to see if its lower case
    s = s.lower()
    # Check to see if code can be read backward
    return s == s[::-1]
 
input_string = input(""Enter a string: "")
if is_palindrome(input_string):
    print(""The string is a palindrome!"")
else:
    print(""The string is not a palindrome."")","December Submission: Problem 2: Thenuka	Wickramanayake

import math
    print(""I can calculate the area of a shape for you."")
    shape = input(""Which shape do you want me to calculate the area of? (circle, rectangle, square, triangle): "").lower()
 
    if shape == ""circle"":
        radius = float(input(""Enter the radius of the circle: ""))
        area = math.pi * radius**2
        print(""The area of the circle is"", area)
    
    elif shape == ""rectangle"":
        length = float(input(""Enter the length of the rectangle: ""))
        width = float(input(""Enter the width of the rectangle: ""))
        area = length * width
        print(""The area of the rectangle is"", area)
    
    elif shape == ""square"":
        side = float(input(""Enter the side length of the square: ""))
        area = side**2
        print(""The area of the square is"", area)
    
    elif shape == ""triangle"":
        base = float(input(""Enter the base of the triangle: ""))
        height = float(input(""Enter the height of the triangle: ""))
        area = 0.5 * base * height
        print(""The area of the triangle is"", area)
    
    else:
        print(""Sorry, I don't recognize that shape."")","December Submission: Problem 3: Thenuka	Wickramanayake

def are_all_characters_unique(s): 
return len(s) == len(set(s)) 
 
print(are_all_characters_unique(""abcdef""))
print(are_all_characters_unique(""hello""))","December Submission: Problem 4: Thenuka	Wickramanayake

import random
 
def guessing_game():
    number_to_guess = random.randint(1, 100)
    print(""Guess the number (between 1 and 100):"")
    
    while True:
        guess = int(input(""Your guess: ""))
        if guess < number_to_guess:
            print(""Too low! Try again."")
        elif guess > number_to_guess:
            print(""Too high! Try again."")
        else:
            print(""Congratulations! You guessed the number!"")
            break
 
guessing_game()"
Sebastian Escobar Jaimes,"December Submission: Problem 1: Sebastian Escobar Jaimes

https://replit.com/join/bbdssojjge-seesja08","December Submission: Problem 2: Sebastian Escobar Jaimes

I really don't know how I would solve this problem but what I think I would do in simple terms is I will use something to import something like math then I will my introduction and an input statement saying to put the shape then after them putting the shape it would put the shapes info like their size or radius to calculate their area and after I put the import it will do the math and in the output will show the area with a message to end the program or put another shape.","December Submission: Problem 3: Sebastian Escobar Jaimes

https://replit.com/join/etyaiwmwsm-seesja08","December Submission: Problem 4: Sebastian Escobar Jaimes

https://replit.com/join/vovacqcmmn-seesja08"
Ashrita Mahadevu,"December Submission: Problem 1: Ashrita Mahadevu

def is_palindrome(input_string):
#converts to lower case so punctuation doesn't matter    input_string = input_string.lower()
    clean_string = """"    index = 0
#removes special characters and spaces    while index < len(input_string):        if ('a' <= input_string[index] <= 'z') or ('0' <= input_string[index] <= '9'):            clean_string += input_string[index]        index += 1
#checks if string is same both ways
    if clean_string == clean_string[::-1]:        return ""The string is a palindrome.""    else:        return ""The string is not a palindrome.""","December Submission: Problem 2: Ashrita Mahadevu

def calculate_area():    print(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of?"")
    shape = input(""Enter the shape (circle, rectangle, square, triangle): "")
    #based on input shape different conditions    if shape == ""circle"":        radius = float(input(""Enter the radius of the circle: ""))        area = 3.14159 * radius * radius        print(f""The area of the circle is {area:.2f}"")
    elif shape == ""rectangle"":        length = float(input(""Enter the length of the rectangle: ""))        width = float(input(""Enter the width of the rectangle: ""))        area = length * width        print(f""The area of the rectangle is {area:.2f}"")
    elif shape == ""square"":        side = float(input(""Enter the side length of the square: ""))        area = side * side        print(f""The area of the square is {area:.2f}"")
    elif shape == ""triangle"":        base = float(input(""Enter the base of the triangle: ""))        height = float(input(""Enter the height of the triangle: ""))        area = 0.5 * base * height        print(f""The area of the triangle is {area:.2f}"")","December Submission: Problem 3: Ashrita Mahadevu

def all_unique_characters(input_string):     for char in input_string:        if input_string.count(char) > 1:            return False    return True","December Submission: Problem 4: Ashrita Mahadevu

import random
def guessing_game():    number_to_guess = random.randint(1, 100)    print(""Guess the number (between 1 and 100):"")
    while True:        guess = input(""Your guess: "")                if not guess.isdigit():            print(""Please enter a valid number."")            continue
        guess = int(guess)                if guess < number_to_guess:            print(""Too low! Try again."")        elif guess > number_to_guess:            print(""Too high! Try again."")        else:            print(f""Congratulations! The correct number was {number_to_guess}."")            break"
Nithin Gali,"December Submission: Problem 1: Nithin Gali

import string
def is_palindrome(input_string):    #Remove spaces and punctuation    cleaned_string = """"    for char in input_string:       # Add the character to the cleaned string only if it's alphanumeric        if char.isalnum():            cleaned_string += char        #Convert the string to uppercase (for edge case situations)    cleaned_string = cleaned_string.lower()        #Check if the string is equal to its reverse    reversed_string = """"    for i in range(len(cleaned_string) - 1, -1, -1):        reversed_string += cleaned_string[i]        #Compare the cleaned string with its reversed version    if cleaned_string == reversed_string:        return ""The string is a palindrome.""    else:        return ""The string is not a palindrome.""
 
word = input(""enter a word here"")print(is_palindrome(word))","December Submission: Problem 2: Nithin Gali

# Main programshape = input(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of?"")
# Convert the input shape to lowercase shape = shape.strip().lower()
# If the shape is a circleif shape == ""circle"":    radius = input(""Enter the radius of the circle:"")    if radius.isdigit():         radius = float(radius)  # Convert to float        area = 3.14159 * radius * radius  # Calculate area of circle        print(f""The area of the circle is {area:.2f} square units."")    else:        print(""Invalid input for radius. Please enter a number."")
# If the shape is a rectangleelif shape == ""rectangle"":    length = input(""Please enter the length of the rectangle:"")    width = input""Please enter the width of the rectangle:"")        if length.isdigit() and width.isdigit():  # Check if both are numbers        length = float(length)  # Convert to float        width = float(width)  # Convert to float        area = length * width  # Calculate area of rectangle        print(f""The area of the rectangle is {area:.2f} square units."")    else:        print(""Invalid input for length or width. Please enter numbers."")
# If the shape is a squareelif shape == ""square"":    side = input(""Enter the side length of the square:"")    if side.isdigit():          side = float(side)  # Convert to float        area = side * side  # Calculate area of square        print(f""The area of the square is {area:.2f} square units."")    else:        print(""Invalid input for side length. Please enter a number."")
# If the shape is a triangleelif shape == ""triangle"":    base = input(""Enter the base of the triangle:"")    height = input(""Enter the height of the triangle:"")        if base.isdigit() and height.isdigit():  # Check if both are numbers        base = float(base)  # Convert to float        height = float(height)  # Convert to float        area = 0.5 * base * height  # Calculate area of triangle        print(f""The area of the triangle is {area:.2f} square units."")    else:        print(""Invalid input for base or height. Please enter numbers."")
# If the shape is not recognizedelse:    print(""Sorry, I don't recognize that shape. Please enter a valid shape."")","December Submission: Problem 3: Nithin Gali

def are_all_characters_unique(input_string):    #Create an empty list to store characters     seen_characters = []        #Loop through each character in the string    for char in input_string:        #Return false if the character is already in the list        if char in seen_characters:            return False        #Otherwise add the character to the list        seen_characters.append(char)        #Return True if no duplicates were found    return True","December Submission: Problem 4: Nithin Gali

import random  
#Generate a random number between 1 and 100random = random.randint(1, 100)
print(""I have chosen a number between 1 and 100. Try to guess it."")
#Loop to keep asking the user for guesseswhile True:    #Ask the user to enter a guess    guess = input(""Enter your guess: "")        #Try to convert the guess to an integer    if guess.isdigit():        guess = int(guess)                #Check if the guess is correct        if guess == random:            print(""You guessed the number correctly"")            break                 #If the guess is too high        elif guess > random:            print(""Your guess is too high. Try again."")                #If the guess is too low        else:            print(""Your guess is too low. Try again."")        else:        print(""Please enter a valid number."")"
Dagem Abraham,"December Submission: Problem 1: Dagem Abraham


test1 = ""Racecar""test2 = ""Hello""# Possible outputs include ""The string is a palindrome."", and ""The string is not a palindrome.""def pChecker(word: str):    # Left and Right pointer    l = 0    r = len(word) - 1    # Initial value until you find it's not a palindrome    result = ""The string is a palindrome.""    # Check half of the word to match first half with second    for i in range(len(word) // 2):        # Check for Palindrome condition and if there isn't a match set result accordingly and break        if word[l + i].lower() != word[r-i].lower():            result = ""The string is not a palindrome.""            break        else:            continue    #Return the result    return result#Test Casesprint(pChecker(test1))print(pChecker(test2))","December Submission: Problem 2: Dagem Abraham


import math# Functions for calculating area of each shapedef calculate_circle_area(radius):    """"""Calculate the area of a circle given its radius.""""""    return math.pi * radius ** 2def calculate_rectangle_area(length, width):    """"""Calculate the area of a rectangle given its length and width.""""""    return length * widthdef calculate_square_area(side):    """"""Calculate the area of a square given its side length.""""""    return side ** 2def calculate_triangle_area(base, height):    """"""Calculate the area of a triangle given its base and height.""""""    return 0.5 * base * heightdef calculate_area():    # Prompt    print(""I can calculate the area of a shape for you. \n"" + ""Which shape do you want me to calculate the area of? \n"" +""Options: circle, rectangle, square, triangle \n"")    while True: #Handle Main function        # Prompting user for shape choice        shape = input(""Enter the name of the shape: "").strip().lower()        try:            # Check exit and break            if shape == ""exit"":                break            if shape == ""circle"":                # Prompt for circle radius                radius = float(input(""Enter the radius of the circle: ""))                if radius < 0:                    print(""Radius cannot be negative. Please enter a valid number."")                else:                    area = calculate_circle_area(radius)                    print(f""The area of the circle is: {area:.2f}"")            elif shape == ""rectangle"":                # Prompt for rectangle length and width                length = float(input(""Enter the length of the rectangle: ""))                width = float(input(""Enter the width of the rectangle: ""))                if length < 0 or width < 0:                    print(""Length and width cannot be negative. Please enter valid numbers."")                else:                    area = calculate_rectangle_area(length, width)                    print(f""The area of the rectangle is: {area:.2f}"")            elif shape == ""square"":                # Prompt for square side length                side = float(input(""Enter the side length of the square: ""))                if side < 0:                    print(""Side length cannot be negative. Please enter a valid number."")                else:                    area = calculate_square_area(side)                    print(f""The area of the square is: {area:.2f}"")            elif shape == ""triangle"":                # Prompt for triangle base and height                base = float(input(""Enter the base of the triangle: ""))                height = float(input(""Enter the height of the triangle: ""))                if base < 0 or height < 0:                    print(""Base and height cannot be negative. Please enter valid numbers."")                else:                    area = calculate_triangle_area(base, height)                    print(f""The area of the triangle is: {area:.2f}"")            else:                # Handle invalid shape input                print(""Sorry, I can only calculate the area of a circle, rectangle, square, or triangle."")        except ValueError:            # Handle non-number inputs for measurements            print(""Invalid input. Please enter numeric values for the measurements."")if __name__ == ""__main__"":    calculate_area()","December Submission: Problem 3: Dagem Abraham


test1 = ""abcdef""test2 = ""hello""def uniqueCheck(word: str):    character_cache = []    #Check every character    for i in range(len(word)):        #see if it has already occured and return false if that evaluates to true        if word[i] in character_cache:            return False        # Add new character to the list        character_cache.append(word[i])    #Check Edge Cases    if word == """":        return None    #Return True if no matches    return Trueprint(uniqueCheck(test1))print(uniqueCheck(test2))print(uniqueCheck(""""))","December Submission: Problem 4: Dagem Abraham


import random  # Importing random module to generate a random number# Function to play the guessing gamedef play_guessing_game():    # Generate a random number between 1 and 100    secret_number = random.randint(1, 100)      print(""Welcome to the Number Guessing Game!"")    print(""I'm thinking of a number between 1 and 100."")    print(""Try to guess it!"")    while True:        try:            # Ask the user for their guess            guess = int(input(""Enter your guess: ""))            # Validate the guess is within range            if guess < 1 or guess > 100:                print(""Please enter a number between 1 and 100."")                continue            # Check if the guess is correct            if guess == secret_number:                print(f""Congratulations! You guessed the correct number: {secret_number}"")                break            # Provide hints if the guess is incorrect            elif guess < secret_number:                print(""Too low! Try guessing a larger number."")            else:                print(""Too high! Try guessing a smaller number."")        except ValueError:            # Handle invalid (non-numeric) inputs gracefully            print(""Invalid input. Please enter a valid number between 1 and 100."")# Start the gameplay_guessing_game()"
Shounauk Ganguli,"December Submission: Problem 1: Shounauk Ganguli

def isPalindrome(s):    slower = s.lower() #Convert everything to lowercase to ignore capitalization    removethis = "" !?,.;:()&[]/-"" #List of punctuation to ignore    sready = """" #Empty string that will become the string that will be reversed after removing punctuation    for char in slower:        if char not in removethis:            sready += char #Loop that iterates through the word and creates a new word from what isn't ignored    sreverse = sready[::-1] #Reverse the final string    if sreverse == sready: #Compares strings        print(""This string is a palindrome"")    else:        print(""This string is not a palindrome"") #Prints results
isPalindrome(""!R ace?.. C!aR!"") #Returns true","December Submission: Problem 2: Shounauk Ganguli

import math #For pi
def shapeAreaMenu():    shape = input(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of? \n1. Circle\n2. Rectangle\n3. Square\n4. Triangle\n5. Exit"")    if shape not in [""1"", ""2"", ""3"", ""4"", ""5""]: #Checking if input is valid        print(""Please try again"")        shapeAreaMenu()    if shape == ""5"":        exit()    if shape == ""1"":        circleArea()    if shape == ""2"":        rectangleArea()    if shape == ""3"":        squareArea()    if shape == ""4"":        triangleArea() #Calls corrosponding function
def circleArea():    try: #Checks if theres an error        radius = int(input(""What is the radius?""))    except:         print(""Please try again"")        shapeAreaMenu()    area = (math.pi) * (radius) * (radius) #Calculates area    print(f""The area is {area}"")
def rectangleArea():    try:        l = int(input(""What is the length?""))        w = int(input(""What is the width?""))     except:        print(""Please try again"")        shapeAreaMenu() #Returns to menu if an error arises    area = l*w    print(f""The area is {area}"")
def squareArea():    try:        s = int(input(""What is the side length?""))    except:        print(""Please try again"")        shapeAreaMenu()    area = s*s    print(f""The area is {area}"") #Prints area
def triangleArea():    try:        b = int(input(""What is the base?""))        h = int(input(""What is the height?""))    except:        print(""Please try again"")        shapeAreaMenu()    area = 0.5 * b * h    print(f""The area is {area}"")
shapeAreaMenu() #Calls the start of the program","December Submission: Problem 3: Shounauk Ganguli

def isUnique(s):    return len(s) == len(set(s)) #compares the length of the string and a set of that string, which has no unique characters. if the lengths are not equal, then there is a duplicate somewhere. print(isUnique(""Abc def "")) #returns false as there are two spaces","December Submission: Problem 4: Shounauk Ganguli

import randomrandNumber = random.randint(1, 100) #create random numberdef guessingGame():    try:        guess = int(input(""Guess a number""))    except: #handles errors in input        print(""Please try again"")        guessingGame()    if guess == randNumber:        print(""Congratulations!"") #end of the game        exit()    elif guess < randNumber: #recurses if the guess is too low        print(""Too low! Try again!"")         guessingGame()    elif guess > randNumber: #recurses if the guess is too high        print(""Too high! Try again!"")        guessingGame()guessingGame() #begins the program"
Temi	Alabi,"December Submission: Problem 1: Temi	Alabi

public static boolean isPalindrome(String word)
 {
       if(word.length() == 3 || word.length() == 2) //checks specific word length
       {
          if(word.substring(0,1).equals(word.substring(word.length()-1))) //check the backwards word
          {
              return true;
          }
          else
          {
              return false;
          }
       }
       else
       {
           if(word.toUpperCase().substring(0,1).equals(word.toUpperCase().substring(word.length()-1))) //handles if its not uppercase
           {
               return isPalindrome(word.substring(1,word.length()-1));
           }
           else
           {
               return false;
           }
       }
 
 }","December Submission: Problem 2: Temi	Alabi

import java.util.Scanner;
 
public class AreaCalc
{
 
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
 
             System.out.print(""Which shape do you need to calculate the area of? "");
        String shape = scanner.nextLine() //to verify each shape
        // Check each shape then calculate
        if (shape.equals(""circle"")) { //check which shape
            System.out.println(""Enter the radius"");
            double radius = scanner.nextDouble();
            double circleArea = Math.PI * radius * radius; //calculate
            System.out.println(circleArea);
 
        } 
else if (shape.equals(""rectangle"")) { //check which shape
            System.out.println(""Enter the length "");
            double length = scanner.nextDouble();
            System.out.println(""Enter the width of the rectangle: "");
            double width = scanner.nextDouble();
            double rectangleArea = length * width; //calculate
            System.out.println( rectangleArea);
 
        } 
else if (shape.equals(""square"")) { //check which shape
            System.out.println(""Enter the side lengths: "");
            double side = scanner.nextDouble();
            double squareArea = side * side; //calculate
            System.out.println(squareArea);
 
        } 
else if (shape.equals(""triangle"")) { //check which shape
            System.out.println(""Enter the base of the triangle: "");
            double base = scanner.nextDouble();
            System.out.println(""Enter the height of the triangle: "");
            double height = scanner.nextDouble();
            double triangleArea = 0.5 * base * height; //calculate
            System.out.println( triangleArea);
 
        } 
else {
            System.out.println(""ERROR"");
        }
 
    }
}","December Submission: Problem 3: Temi	Alabi

 
public class UniqueChars {
 
    public static boolean allUniqueChars(String str) {
        int n = str.length();
     for (int i = 0; i < n; i++) {
      for (int j = i + 1; j < n; j++) { //check the value right next to it so that we know there are not dupes
     if (str.charAt(i) == str.charAt(j)) { 
       return false; // Duplicate found }
 }
 } 
 
return true; // All are unique
    }
 
    public static void main(String[] args) {
        // Testing
        System.out.println(allUniqueCharacters(""abcdef"")); // Output: true
        System.out.println(allUniqueCharacters(""hello""));  // Output: false
    }","December Submission: Problem 4: Temi	Alabi

import random
mode=input(""Pick a mode: beginner, intermediate, or hard"")
emptylist=[]
count=0
if mode==""beginner"":
	nums=random.randint(1,100)
	while count<10:
		count=count+1
		guess= int(input(""Type in a number.""))
		emptylist.append(guess)
		if guess==nums:
			print(""Congratulations"")
			count=10
		elif guess>nums:
			print(""Wrong, go lower"")
		elif guess<nums:
			print(""Wrong, go higher"")
	print(emptylist)
	print(""You had"", len(emptylist), ""guesses"")
elif mode==""intermediate"":
	nums=random.randint(1,100)
	while count<6:
		count=count+1
		guess= int(input(""Type in a number.""))
		emptylist.append(guess)
		if guess==nums:
			print(""Congratulations"")
			count=6
		elif guess>nums:
			print(""Wrong, go lower"")
		elif guess<nums:
			print(""Wrong, go higher"")
	print(emptylist)
	print(""You had"", len(emptylist),""guesses"")
elif mode==""hard"":
	nums=random.randint(1,100)
	while count<4:
		count=count+1
		guess= int(input(""Type in a number.""))
		emptylist.append(guess)
		if guess==nums:
			print(""Congratulations"")
			count=4
		elif guess>nums:
			print(""Wrong, go lower"")
		elif guess<nums:
			print(""Wrong, go higher"")
	print(emptylist)
	print(""You had"",len(emptylist), ""guesses"")"
Aidan Makarabooshanam,"December Submission: Problem 1: Aidan Makarabooshanam

https://replit.com/@aidanm6146/WoefulEvergreenInterfacestandard#main.py
 
The UCASE is on my replit","December Submission: Problem 2: Aidan Makarabooshanam

https://replit.com/@aidanm6146/WoefulEvergreenInterfacestandard#main.py
 
The UCASE is on the replit.","December Submission: Problem 3: Aidan Makarabooshanam

https://replit.com/@aidanm6146/WoefulEvergreenInterfacestandard#main.py
 
The UCASE is on the replit.","December Submission: Problem 4: Aidan Makarabooshanam

https://replit.com/@aidanm6146/WoefulEvergreenInterfacestandard#main.py
 
The UCASE is on the replit."
Gabriel Martinez,"December Submission: Problem 1: Gabriel Martinez

import string
def is_palindrome(s):    # Step 1: Convert the string to uppercase to ignore case    s = s.upper()        # Step 2: Remove all spaces and punctuation    s = ''.join(c for c in s if c.isalnum())        # Step 3: Check if the string is equal to its reverse    if s == s[::-1]:        return True    else:        return False
# Main code to take input and print resultif __name__ == ""__main__"":    # Take input from the user    input_string = input(""Enter a string: "")
    # Step 4: Check if the input string is a palindrome    if is_palindrome(input_string):        print(""The string is a palindrome."")    else:        print(""The string is not a palindrome."")","December Submission: Problem 2: Gabriel Martinez

import math
def calculate_area(shape):    # Step 1: Handle each shape type with a different calculation    if shape == ""circle"":        # Circle formula: Area = π * r^2        radius = float(input(""Enter the radius of the circle: ""))        area = math.pi * radius ** 2        elif shape == ""rectangle"":        # Rectangle formula: Area = length * width        length = float(input(""Enter the length of the rectangle: ""))        width = float(input(""Enter the width of the rectangle: ""))        area = length * width
    elif shape == ""square"":        # Square formula: Area = side^2        side = float(input(""Enter the side length of the square: ""))        area = side ** 2
    elif shape == ""triangle"":        # Triangle formula: Area = 0.5 * base * height        base = float(input(""Enter the base of the triangle: ""))        height = float(input(""Enter the height of the triangle: ""))        area = 0.5 * base * height
    else:        # Handle invalid shape input        return ""Invalid shape. Please enter a valid shape (circle, rectangle, square, triangle).""
    # Return the calculated area    return f""The area of the {shape} is {area:.2f}.""
def main():    # Step 2: Prompt the user for input and display the initial message    print(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of?"")    shape = input(""Enter the shape (circle, rectangle, square, triangle): "").strip().lower()
    # Step 3: Validate input shape and proceed to calculate the area    valid_shapes = [""circle"", ""rectangle"", ""square"", ""triangle""]    if shape not in valid_shapes:        print(""Invalid shape entered. Please choose one of the following: circle, rectangle, square, triangle."")    else:        # Call the function to calculate area        result = calculate_area(shape)        print(result)
# Step 4: Run the main functionif __name__ == ""__main__"":    main()","December Submission: Problem 3: Gabriel Martinez

def has_unique_characters(s):    # Step 1: Handle edge case for empty string    if len(s) == 0:        return True  # An empty string is considered to have all unique characters by definition        # Step 2: Create a set to keep track of characters we've already encountered    seen_characters = set()
    # Step 3: Iterate through each character in the string    for char in s:        # Step 4: Check if the character is already in the set        if char in seen_characters:            return False  # If the character is already in the set, return False        seen_characters.add(char)  # Add the character to the set
    # Step 5: If no duplicates were found, return True    return True
# Example Test Casesprint(has_unique_characters(""abcdef""))  # Output: Trueprint(has_unique_characters(""hello""))    # Output: Falseprint(has_unique_characters(""""))        # Output: True (edge case: empty string)print(has_unique_characters(""a b c""))   # Output: True (spaces are treated as unique)","December Submission: Problem 4: Gabriel Martinez

import random
def guessing_game():    # Step 1: The program randomly selects a number between 1 and 100    number_to_guess = random.randint(1, 100)        # Step 2: Greet the player and explain the rules    print(""Welcome to the Guessing Game!"")    print(""I have selected a random number between 1 and 100. Try to guess it!"")
    # Step 3: Initialize a variable for the user's guess    guess = None        # Step 4: Loop until the player guesses correctly    while guess != number_to_guess:        # Ask the player for their guess        guess = int(input(""Enter your guess: ""))                # Step 5: Provide feedback based on the guess        if guess < number_to_guess:            print(""The number is larger. Try again!"")        elif guess > number_to_guess:            print(""The number is smaller. Try again!"")        else:            print(f""Congratulations! You guessed the correct number: {number_to_guess}"")            break  # Exit the loop once the correct number is guessed
# Step 6: Call the function to start the gameif __name__ == ""__main__"":    guessing_game()"
Khush Lalchandani,"December Submission: Problem 1: Khush Lalchandani

# Pseudocode# 1. Convert the input string to lowercase and remove extra spaces/punc stuff# 2.  Have two ponters on both sides of string#  3. Compare the characters at both sides.#   4. If the characters arent same return false.# 5. Keep moving the indices towards the center and return true if they reach the center
def is_palindrome(string):    # Convert the string to lowercase    low_string = string.lower()    # Remove spaces and punctuation manually    string = """"    for char in low_string:        if char.isalnum():            string += char# Use a loop to compare characters from the start and end of the string    start = 0    end = len(string) - 1
    while start < end:        # Compare characters at the current start and end indices        if string[start] != string[end]:            # If they dont match, the string is not a palindrome            return False        start += 1        end -= 1
    # If loop finishes the string is a palindrome    return True","December Submission: Problem 2: Khush Lalchandani

# Pseudocode# 1. Paste the first messsage# 2. Ask the user to select the shape# 3. With the input shape name:#    a. For a circle, ask for the radius and calculate: pi * radius^2.#    b. For a rectangle, ask for the length and width and calculate: length * width.#    c. For a square, ask for the side length and calculate : side^2.#    d. For a triangle, ask for the base and height and calculate 0.5 * base * height.
import math
def calculate_area():    # Display the first message    print(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of?"")        # Ask the user for the shape name    shape = input(""Enter the name of the shape (circle, rectangle, square, triangle): "")    shape = shape.lower()    if shape == ""circle"":        # ask for the circle radius        radius = float(input(""Enter the radius of the circle: ""))        area = math.pi * (radius ** 2)        print(""The area of the circle is"", area)
    elif shape == ""rectangle"":        # ask for the length and width for rectangle        length = float(input(""Enter the length of the rectangle: ""))        width = float(input(""Enter the width of the rectangle: ""))        area = length * width        print(""The area of the rectangle is"", area)
    elif shape == ""square"":        # ask for the length of one side        side = float(input(""Enter the side length of the square: ""))        area = side ** 2        print(""The area of the square is"", area)
    elif shape == ""triangle"":        # ask for the base and height        base = float(input(""Enter the base of the triangle: ""))        height = float(input(""Enter the height of the triangle: ""))        area = 0.5 * base * height        print(""The area of the triangle is"", area)","December Submission: Problem 3: Khush Lalchandani

# Pseudocode# 1. Use a set to keep track of characters we have seen so far.# 2. Loop through each character in the string:#    a. If the character is  in the set, return False.#    b. If the character is not in the set, add it to the set.# 3. If the loop completes, return True as all characters are different.
def has_unique_characters(string):    # use a set to keep track of seen characters    seen_characters = set()
    # go through all characters    for char in string:        if char in seen_characters:            # Duplicate character found            return False        # Add the character to already seen set        seen_characters.add(char)
    # return true if all are different    return True","December Submission: Problem 4: Khush Lalchandani

# Pseudocode# 1. Generate a random number between 1 and 100.# 2. Use a while loop so person can keep guessing until its right.# 3. Compare the guess to the random number.
import randomdef number_guessing_game():    # Generate a random number    target_number = random.randint(1, 100)    print(""I have chosen a number between 1 and 100. Guess what it is!"")
    while True:        try:            user_guess = int(input(""Enter your guess: ""))
            # Compare the guess to the target number            if user_guess == target_number:                print(""You guessed the number correctly!"")                break              #tell them if too high or low            elif user_guess > target_number:                print(""Too high!"")            else:                print(""Too low!"")"
Josbeliz Gonzalez,"December Submission: Problem 1: Josbeliz Gonzalez 

https://codesandbox.io/p/devbox/grxhsg","December Submission: Problem 2: Josbeliz Gonzalez 

https://codesandbox.io/p/devbox/q3tl46","December Submission: Problem 3: Josbeliz Gonzalez 

https://codesandbox.io/p/devbox/shs9kj","December Submission: Problem 4: Josbeliz Gonzalez 

https://codesandbox.io/p/devbox/wwspmq"
Betul Ozgen,"December Submission: Problem 1: Betul Ozgen

#Returns if a string is a plaindrome or not and based on that returns true or falsedef is_palindrome(phrase):  # 1. Remove everything but alphanumeric characters from phrase  string = ''  for char in phrase:    if char.isalnum():        string += char.lower()
  # 2. Check if the cleaned string is the same forwards and backwards  return string == string[::-1]
# 3. Return True if it is a palindrome, False if not(allow for user to enter strings)test_string = input(""Enter a string to check if it is a palindrome: "")
# 4. Check if the string does not contain any valid lettersstring = ''.join(char.lower() for char in test_string if char.isalnum())if not string:    print(""The input contains no valid characters (letters or digits) to check."")else:  if is_palindrome(test_string):    print(f""\""{test_string}\"" is a palindrome."")  else:    print(f""\""{test_string}\"" is not a palindrome."")","December Submission: Problem 2: Betul Ozgen

import math#create function for more organized look
def calculate_area():  #ask user for input  print(""I can calculate the area of a shape for you."")  print(""Which shape do you want me to calculate the area of? (circle, rectangle, square, triangle)"")
  shape = input(""Enter the name of the shape: "").strip().lower()  #Check for shape- circle, triangle, rectangle, square  #Check the input that the user provides to make sure it's valid  #Return error if user does not provide valid input  if shape == ""circle"":    try:        radius = float(input(""Enter the radius of the circle: ""))        if radius < 0:            print(""Radius cannot be negative. Please enter a positive value."")        else:            area = math.pi * (radius ** 2)            print(f""The area of the circle is {area:.2f}."")    except ValueError:        print(""Invalid input. Please enter a numerical value for the radius."")
  elif shape == ""rectangle"":    try:        length = float(input(""Enter the length of the rectangle: ""))        width = float(input(""Enter the width of the rectangle: ""))        if length < 0 or width < 0:            print(""Length and width cannot be negative. Please enter positive values."")        else:            area = length * width            print(f""The area of the rectangle is {area:.2f}."")    except ValueError:        print(""Invalid input. Please enter numerical values for the length and width."")
  elif shape == ""square"":    try:        side = float(input(""Enter the side length of the square: ""))        if side < 0:            print(""Side length cannot be negative. Please enter a positive value."")        else:            area = side ** 2            print(f""The area of the square is {area:.2f}."")    except ValueError:        print(""Invalid input. Please enter a numerical value for the side length."")
  elif shape == ""triangle"":    try:        base = float(input(""Enter the base of the triangle: ""))        height = float(input(""Enter the height of the triangle: ""))        if base < 0 or height < 0:            print(""Base and height cannot be negative. Please enter positive values."")        else:            area = 0.5 * base * height            print(f""The area of the triangle is {area:.2f}."")    except ValueError:        print(""Invalid input. Please enter numerical values for the base and height."")
  else:    print(""Invalid shape entered. Please choose from circle, rectangle, square, or triangle."")
# Run the programcalculate_area()","December Submission: Problem 3: Betul Ozgen

def are_all_characters_unique(s):  # Step 1: Iterate through each character in the string  for i in range(len(s)):    # Step 2: Compare the current character with the rest of the string    for j in range(i + 1, len(s)):      # If a duplicate character is found, return False      if s[i] == s[j]:        return False      # Step 3: If no duplicates are found, return True  if True:    return True
# Allow user to enter inputstring = input(""Enter to check if all characters are unique:"")# Call the function and print the resultare_all_characters_unique(string)","December Submission: Problem 4: Betul Ozgen

import random
def guessing_game():    """"""    A number guessing game where the user guesses a random number between 1 and 100.    """"""    # Step 1: Generate a random number between 1 and 100    target_number = random.randint(1, 100)
    print(""Welcome to the Guessing Game!"")    print(""I have chosen a number between 1 and 100. Can you guess it?"")
    # Step 2: Start the guessing loop    while True:        try:            # Ask the user for their guess            user_guess = int(input(""Enter your guess: ""))
            # Step 3: Check the user's guess            if user_guess < 1 or user_guess > 100:                print(""Your guess must be between 1 and 100. Try again!"")            elif user_guess < target_number:                print(""Too low!"")            elif user_guess > target_number:                print(""Too high!"")            else:                # User guessed correctly                print(f""Congratulations! You guessed the number {target_number} correctly!"")                break  # Exit the loop        except ValueError:            # Handle invalid input that cannot be converted to an integer            print(""Invalid input. Please enter a valid number between 1 and 100."")
# Call the the guessing game functionguessing_game()"
Aniketh	Buddolla,"December Submission: Problem 1: Aniketh	Buddolla

def is_palindrome(string):    # Normalize the string    cleaned_string = """"    for char in string:        if char.isalnum():  # Check if the character is a letter or number            cleaned_string += char.lower()  # Convert to lowercase and add to cleaned_string
    # Check if the cleaned string is equal to its reverse    return cleaned_string == cleaned_string[::-1]
# Get user input and display the resultuser_input = input(""Enter a string: "")
if is_palindrome(user_input):  # Call the function with the user's input    print(""The string is a palindrome."")else:    print(""The string is not a palindrome."")","December Submission: Problem 2: Aniketh	Buddolla

def calculate_area():    # Inform the user about the program's purpose    print(""I can calculate the area of a shape for you."")    print(""Which shape do you want me to calculate the area of?"")    print(""Options: circle, rectangle, square, triangle"")
    # Ask the user to input the name of the shape    shape = input(""Enter the shape: "").strip().lower()  # Convert input to lowercase and remove extra spaces
    # Handle each shape type    if shape == ""circle"":        # Ask for the radius of the circle        radius = float(input(""Enter the radius of the circle: ""))        # Calculate the area using πr^2 (approximating π as 3.14159)        area = 3.14159 * radius ** 2        # Display the result formatted to 2 decimal places        print(f""The area of the circle is {area:.2f}"")    elif shape == ""rectangle"":        # Ask for the length and width of the rectangle        length = float(input(""Enter the length of the rectangle: ""))        width = float(input(""Enter the width of the rectangle: ""))        # Calculate the area using length × width        area = length * width        # Display the result formatted to 2 decimal places        print(f""The area of the rectangle is {area:.2f}"")    elif shape == ""square"":        # Ask for the side length of the square        side = float(input(""Enter the side length of the square: ""))        # Calculate the area using side^2        area = side ** 2        # Display the result formatted to 2 decimal places        print(f""The area of the square is {area:.2f}"")    elif shape == ""triangle"":        # Ask for the base and height of the triangle        base = float(input(""Enter the base of the triangle: ""))        height = float(input(""Enter the height of the triangle: ""))        # Calculate the area using 0.5 × base × height        area = 0.5 * base * height        # Display the result formatted to 2 decimal places        print(f""The area of the triangle is {area:.2f}"")    else:        # Handle invalid shape input        print(""Sorry, I don't recognize that shape."")
# Call the function to execute the programcalculate_area()","December Submission: Problem 3: Aniketh	Buddolla

def has_unique_characters(string):    # Use a set to track seen characters    seen_characters = set()        # Iterate through each character in the string    for char in string:        # If the character is already in the set, it's not unique        if char in seen_characters:            return False        # Otherwise, add the character to the set        seen_characters.add(char)        # If the loop completes without finding duplicates, all characters are unique    return True
# Example usageprint(has_unique_characters(""abcdef""))  # Output: Trueprint(has_unique_characters(""hello""))   # Output: False","December Submission: Problem 4: Aniketh	Buddolla

import random
def guessing_game():    print(""Welcome to the Guessing Game!"")    print(""I have chosen a number between 1 and 100. Can you guess it?"")
    # Generate a random number between 1 and 100    number_to_guess = random.randint(1, 100)    attempts = 0  # Counter for number of guesses
    while True:        # Get the user's guess        guess = int(input(""Enter your guess: ""))        attempts += 1
        if guess == number_to_guess:            # User guessed correctly            print(f""Congratulations! You guessed the number in {attempts} attempts."")            break        elif guess > number_to_guess:            # Guess is too high            print(""Too high! Try a smaller number."")        else:            # Guess is too low            print(""Too low! Try a larger number."")
# Call the function to start the gameguessing_game()"
Angel Ramirez Longobardi,"December Submission: Problem 1: Angel Ramirez Longobardi


Code","December Submission: Problem 2: Angel Ramirez Longobardi

https://codesandbox.io/p/devbox/problem-2-area-calculator-89hp4w","December Submission: Problem 3: Angel Ramirez Longobardi

https://codesandbox.io/p/devbox/problem-3-unique-characters-cfg6wt","December Submission: Problem 4: Angel Ramirez Longobardi

https://codesandbox.io/p/devbox/problem-4--guesing-game-3lw59n"
Nahom Tesfaye,"December Submission: Problem 1: Nahom Tesfaye


def checkPalindrome(str): #to check if the palindrome is a string or not
#this loop runs from 0 to len/2 
for i in range(0, int(len(str)/2)):
if str[i] != str[len(str)-i-1]:
#checks whether the str[i] is equal to the other half 
#if the two characters are not equal then it's false but if it's equal then it's true 
return False
return True","December Submission: Problem 2: Nahom Tesfaye


import math
print(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of?"")
shape_name = input(""Is the shape triangle, rectangle, square, or circle? "")
#asking the user for chape name and telling the user i can calcularte the area of a shape

##checking if shape_name equals with the shape

if shape_name == 'circle':
 radius = float(input(""Enter the radius of the circle: ""))#promt the user for the radius. I did this for every shape.
#Calculate the area and circumference
 area = math.pi * radius ** 2
 circumference = 2 * math.pi * radius
# the results
print(f""The area of the circle is: {area:.2f}"")#rounded to two decimal places
print(f""The circumference of the circle is: {circumference:.2f}"")

if shape_name == 'rectangle':
 length = float(input(""Enter the length of the rectangle: ""))
 width = float(input(""Enter the width of the rectangle: ""))
#caculate the area and perimeter 
 area = length * width
 perimeter = 2 * (length + width)

#the results
print(f'The area of the rectangle is: {area:.2f}')#rounded to two decimal places
print(f'The perimeter of the rectangle is: {perimeter: .2f}')

if shape_name == 'square':
 side_length = float(input(""Enter the length of the square: ""))
#calculate the area and perimeter 
 area = side_length ** 2
 perimeter = 4 * side_length
#the results 
print(f'The area of the square is: {area:.2f}')#rounded to two decimal places
print(f'The perimeter of the square is: {perimeter:.2f}')#rounded to two decimal places

if shape_name == 'triangle':
 base = float(input(""Enter the base of the triangle: ""))
 height = float(input(""Enter the height of the triangle: ""))

 area = 1/2 * base * height #cacyulate the area of the triangle 

#the result
print(f'The base of the triangle is:{area: .2f} ')#rounded to two decimal places
print(f'The height of the triangle is:{area: .2f} ')#rounded to two decimal places
print(f'THe area of the triangle is: {area:.2f}')#rounded to two decimal places

print()

#printing out an error message if user inputs a wrong variable
if shape_name not in [""triangle"", ""rectangle"", ""square"", ""circle""]:
print('Error! please try again. Check for spelling')
else:
print('Thank you!')","December Submission: Problem 3: Nahom Tesfaye


def unique_characters(str):
for i in range(len(str)):
for n in range(i + 1,len(str)): #check all characters after the current one
if str[i] == str[n]: #checks if characters at index i are the same as n 
return False #return false if duplicate is found
return True # no duplicates, return true 
str = 'Nahom'

if unique_characters(str):
print(f'{str} has unique characters.')
else:
print(f'{str} does not have unique characters.')","December Submission: Problem 4: Nahom Tesfaye


import random
#genrates a random number between 1 and 100
program = random.randint(1, 100)
while True:
try:#code that might cause an exception
 user_input = int(input('Pick a number between 1 and 100: '))
if program == user_input:#if the user gets it right, we will congratulate them.
print(""Congrats! You got it right!"")
break #this function ends the code if the user gets the answer correct 
elif user_input > program: #if user input is greater then the program continues
print(""Wrong! That is too high, the answer is smaller."")#prints out a message that the number is smaller and that they are wrong 
print('Try again!')
elif user_input < program: #if userinput is smaller then the programs continue until they get it right.
print(""Wrong! The answer is larger!"") #a message when they get it wrong.
print('Try again!')
except ValueError:
print(""Error. Please enter a valid number between 1 and 100."")
#prints out if user input is an error."
Khang	Huynh,"December Submission: Problem 1: Khang	Huynh

def is_palindrome(s):    """"""    checks if the given string is a palindrome by comparing characters from start and end toward the middle (*assuming that we are only checking alphanumeric characters*)        returns:    str: a message indicating if the string is a palindrome.    """"""    # convert the string to lowercase for case insensitivity    s = s.lower()        # filter alphanumeric characters    s2 = """".join(char for char in s if char.isalnum())        #edge case if there are no alphanumeric characters    if not s2:        return ""The string is not a palindrome.""    # compare characters from start to middle with reversed end to middle    n = len(s2)    for i in range(n // 2):
        if s2[i] != s2[n - 1 - i]:            return ""The string is not a palindrome.""        return ""The string is a palindrome.""
# test casesprint(is_palindrome(""Racecar""))  # the string is a palindrome.print(is_palindrome(""Hello""))    # the string is not a palindrome.print(is_palindrome(""""))         # the string is not a palindrome. (edge case)print(is_palindrome(""#!""))       # the string is not a palindrome. (edge case)","December Submission: Problem 2: Khang	Huynh

import math #import math library to help with calculations
#defining the function to take input then return appropriate valuesdef calculate_area():    print(""I can calculate the area of a shape for you."")    print(""Which shape do you want me to calculate the area of?"")     print(""Options: circle, rectangle, square, triangle"")
    shape = input(""Enter the shape name: "").lower() #prompt for input        #calculate circle pi r squared    if shape == ""circle"":        radius = input(""Enter the radius of the circle: "")        if radius.isdigit():            radius = float(radius)            area = math.pi * radius ** 2            print(f""The area of the circle is: {area}"")        else:            print(""Please enter a valid number for the radius."")
    #calculate rectangle w * l    elif shape == ""rectangle"":        length = input(""Enter the length of the rectangle: "")        width = input(""Enter the width of the rectangle: "")        if length.isdigit() and width.isdigit():            length = float(length)            width = float(width)            area = length * width            print(f""The area of the rectangle is: {area}"")        else:            print(""Please enter valid numbers for the length and width."")
    #calculate square w or l squared    elif shape == ""square"":        side = input(""Enter the side length of the square: "")        if side.isdigit():            side = float(side)            area = side ** 2            print(f""The area of the square is: {area}"")        else:            print(""Please enter a valid number for the side length."")
    #calculate triangle (b * h) /2    elif shape == ""triangle"":        base = input(""Enter the base of the triangle: "")        height = input(""Enter the height of the triangle: "")        if base.isdigit() and height.isdigit():            base = float(base)            height = float(height)            area = 0.5 * base * height            print(f""The area of the triangle is: {area}"")        else:            print(""Please enter valid numbers for the base and height."")
    else:        print(""I can only calculate the area of a circle, rectangle, square, or triangle."")
# run the programcalculate_area()","December Submission: Problem 3: Khang	Huynh

def are_characters_unique(s):    # determine if all characters in the string are unique (assuming uppercase and lowercase are treated equally)    # ""abcdef"" -> True, ""hello"" -> False    s = s.lower().replace("" "", """")  # remove spaces
    seen = set()  # set to track seen characters    for char in s:        if char in seen:  # if we've already seen the character, return False            return False        seen.add(char)  # add to the set    return True  # if loop completes without finding duplicates, return True    # test casesprint(are_characters_unique(""abcdef""))  # Trueprint(are_characters_unique(""hello""))   # Falseprint(are_characters_unique(""a b c""))   # Trueprint(are_characters_unique(""""))        # Trueprint(are_characters_unique(""Aa""))      # False","December Submission: Problem 4: Khang	Huynh

import random # random module
def guessing_game():    # the program generates a random number between 1 and 100 and the user has to guess the number    # generate a random number between 1 and 100    secret_number = random.randint(1, 100)    print(""Welcome to the Guessing Game!"")    print(""I have selected a number between 1 and 100. Can you guess what it is?"")
    while True: #keep code running until guessed number        try:            # ask the user for a guess            guess = int(input(""Enter your guess: ""))
            # check if the guess is within range            if guess < 1 or guess > 100:                print(""Please enter a number between 1 and 100."")                continue
            # compare the guess with the secret number            if guess < secret_number:                print(""Too low! Try again."")            elif guess > secret_number:                print(""Too high! Try again."")            else:                print(f""Congratulations! You guessed the number {secret_number}."")                break  # exit the loop when the user guesses correctly        except ValueError: #catch error if invalid input            print(""Invalid input! Please enter a valid number."")
    print(""Thanks for playing the Guessing Game!"")
# call the game funcguessing_game()"
Saamiya Merali,"December Submission: Problem 1: Saamiya Merali


words = ""racecar""
x = """" #This takes in x as an empty string
for i in words: #This is the start of the for loop
    x = i + x
    words = input(""Enter a word: "") #This asks the user for a word
    x = """"
    for i in words: #This starts the for loop
        x = i + x #This sets x equal to i and x
    if (words == x):
        print(""The string is a palindrome."") #This prints out the string is a palindrome.
    else:
        print(""The string is not a palindrome."") #This prints out the string is not a palindrome.","December Submission: Problem 2: Saamiya Merali


def func():
    user = input(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of? "").lower()
 

    if user == ""circle"": #This is saying that if the users response equals circle it will then follow the below commands.
        radius = float(input(""Enter the radius: ""))
        area = 3.14 * (radius * radius)  # This multiplies pi by the radius squared
        print(""Area of circle = "", area)
    
    elif user == ""rectangle"":  #This is saying that if the users response equals rectangle it will then follow the below commands.
        length = float(input(""Enter the length: ""))  
        width = float(input(""Enter the width: ""))
        area = length * width #variable names for length and width
        print(""Area of rectangle = "", area)
    
    elif user == ""square"":  #This is saying that if the users response equals square it will then follow the below commands.
        side_length = float(input(""Enter the side length: ""))
        area = side_length * side_length  # Calculated area of a square
        print(""Area of square = "", area)
    
    elif user == ""triangle"":  #This is saying that if the users response equals triangle it will then follow the below commands.
        base = float(input(""Enter the base: ""))
        height = float(input(""Enter the height: ""))
        area = 0.5 * (base * height)  # Formula for triangle area
        print(""Area of triangle = "", area)
    
    else:
        print(""Please enter triangle, rectangle, circle, or square"")

# Call the function
func()","December Submission: Problem 3: Saamiya Merali


def has_unique_characters(a):
    if len(a) == 0: #If the length of s is 0, then this if statement will return true
        return True
    
    string_length = len(a) #This is finding the length of s
    
    for i in range(string_length):
        current_char = a[i]
        
        for j in range(i + 1, string_length): #This determines how much the for loop will iterate through the word based on its length.
            compare_char = a[j]
            
            if current_char == compare_char: #This is comparing the characters
                return False
    
    return True

print(has_unique_characters(""abcdef""))  
print(has_unique_characters(""hello""))   
print(has_unique_characters(""intelligence""))","December Submission: Problem 4: Saamiya Merali

import random
num = random.randint(1, 100)
while True:
    guess = int(input(""Guess a number between 1 and 100: ""))
    if guess > num:  # this sees if the guess is greater than the random number and if it is, then it prints higher.
        print(""Too high"")
    # This sees if the guess is less than the number and tells the user to guess higher.
    elif guess < num:
        print(""Low, Guess Higher"")
    else:  # If the guess is not lower or higher, then they got the correct number, so this congratulates the user.
        print(""Correct, Good Job!"")
        break"
Robert Lockay,"December Submission: Problem 1: Robert Lockay

# U: # - does the string equal its reversed form# - input string, output print statement based on boolean result# - empty string/string with just spaces is not a palindrome# - need to strip spaces and punctuation
# C:# - I know I need to reverse the string since im checking its reversed form
# A: # function is_palindrome(string)#   string.remove_spaces()#   string.to_lower_case()#   #   reversed_string = string.reverse()#   if string equals reversed_string#       return True#   else#       return False
# S:def is_palindrome(string):    # remove spaces and set the string to lower case and strip punctuation    cleaned_string = string.lower().replace("" "", """").replace(""!"", """").replace(""."", """").replace(""?"", """")        # check if the string is equal to its reversed form    # use slicing to reverse the string    if len(cleaned_string) > 0 and cleaned_string == cleaned_string[::-1]:        print(""The string is a palindrome."")    else:        print(""The string is not a palindrome."")    # test case 1is_palindrome(""Racecar!"")# test case 2is_palindrome(""Hello"")
# E:# + code passes test cases# + code is readable# + no obvious performance reworks","December Submission: Problem 2: Robert Lockay

# U:# - calculate the area of a shape of the user's choosing with the dimensions of their choosing# - re-prompt the user if they enter a shape not allowed# - inputs: shape, dimensions. output: area
# C:# - need input validation/recognition
# A: # def find_area():#   shape = input(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of?"")#   #   switch shape:#       case circle:#          radius = input(""Enter a radius"")#          return pi * radius^2    #       case rectangle:#           length = input(""Enter a length"")#           width = input(""Enter a width"")#           return length * width#       case square:#           length = input(""Enter a length"")#           return length^2#       case triangle:#           height = input(""Enter a height"")#           base = input(""Enter a base"")#           return (height * base) / 2#       default:#           print(""Invalid input. Try circle, rectangle, square, or triangle."")#           find_area()
# S:# import math to access pi and powimport math
def find_area():    shape = input(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of?\n"")        # use a try except to catch casting errors when casting inputs to floats    try:        # use a switch case with the default value handling an invalid input and using recursion to re-prompt user        # match against shape.lower() to ensure validitiy of upper and lower case answers        match shape.lower():            case ""circle"":                # cast to a float to allow for use in math operations and allow decimal inputs                radius = float(input(""Enter a radius: ""))                # use math module for pi and exponent                print(math.pi * math.pow(radius, 2))            case ""rectangle"":                length = float(input(""Enter a length: ""))                width = float(input(""Enter a width: ""))                print(length * width)            case ""square"":                length = float(input(""Enter a length: ""))                print(math.pow(length, 2))            case ""triangle"":                height = float(input(""Enter a height: ""))                base = float(input(""Enter a base length: ""))                print((height * base) / 2)            # use recursion in default case for input validation            case _:                print(""Invalid input. Try circle, rectangle, square or triangle"")                find_area()    # more recursive input validation    except:        print(""Enter a valid number."")        find_area()            find_area()
# E:# - need to validate if dimension input is a number (done)# + recursive input validation more elegant than while loop imo","December Submission: Problem 3: Robert Lockay

# U:# - does a string have any repeating chars# - edge cases#   - an empty string doesnt repeat characters so true#   - a string with spaces needs to be trimmed of them since a repeating space would be a false alarm# - input: a string. output: boolean.
# C:# - I know i need a list of seen characters of some sort to check against for repeated characters
# A:# def is_unique(string):#   str_list = string.replace("" "", """").split("""")#   seen = []##   for char in str_list:#       if char in seen:#           return false#       seen.append(char)#   return true
# S:from time import time
def is_unique(string):    # trim whitespace    string = string.replace("" "", """")    # seen list to track seen characters    seen = []
    # loop through each character    for char in string:        # quit and return false the moment we see a repeat        # check to see if the current character is in our seen list        if char in seen:            return False        seen.append(char)    # if we reach this we can assume all chars are unique and return true    return True
# less linesdef is_unique_alt(string):    clean_str = string.replace("" "", """")    if len(set(clean_str)) != len(clean_str):        return False    return True
start = time()is_unique(""abcdefghijlkmonpdlgjk;lkgjl       ;aszjdfal;sjdg;l          akjsdg;lakgjsd;a"")print(time() - start)
start = time()is_unique_alt(""abcdefghijlkmonpdlgjk;lkgjl       ;aszjdfal;sjdg;l          akjsdg;lakgjsd;a"")print(time() - start)
# test valuesprint(is_unique(""abcdef""))print(is_unique_alt(""abcdef""))print(is_unique(""hello""))print(is_unique_alt(""hello""))print(is_unique(""he l o""))print(is_unique_alt(""he l o""))
# E:# - works correctly on test values# - might be faster to convert string to set and compare lengths#   - there is no signifigant time difference, but the set conversion method is less lines","December Submission: Problem 4: Robert Lockay

# U:# - problem: guide the user through a binary search# - validate input: needs to be a number that is within 1 and 100# - inputs: guess (number) output: too high, too low, or bingo
# C:# - need to generate random num# - some sort of loop that runs while the user hasnt guessed num yet
# A:# def game(num):#   guess = input(""enter guess"")##   if guess is invalid:#       game(num)##   if guess equals num#       print(correct)#   elif guess < num:#       print(num greater than guess)#       game(num)#   elif guess > num:#       print(num less than guess)#       game(num)
# S:from random import randint
# generate random number outside func to allow recursiondef guessing_game(target):    # define guess outside try catch to ensure scope    guess = """"    # use try catch with casting to check if guess is an integer    try:        guess = int(input(""Guess a number between 1 and 100: ""))    except:        print(""Not an integer. Try again."")        guessing_game(target)        # ensure guess is within range    if guess > 100 or guess < 1:        print(""Not within range. Try again."")        guessing_game(target)        # if guess is correct let function complete    if guess == target:        print(""Correct!"")    # if guess is incorrect recurse the user back to the start    elif guess > target:        print(""Answer is smaller. Try again"")        guessing_game(target)    else:        print(""Answer is greater. Try again"")        guessing_game(target)
guessing_game(randint(1, 100))
# E:# + handles input validation# + guides user through guessing game"
Halil Tunc,"December Submission: Problem 1: Halil Tunc


# Terms:
# Detect a word that reads the same forward and backward. 
# Ignore spaces, punctuation, and capitalization.

# Plan:
# Convert the string to lowercase
# Remove non-alphanumeric characters
# Check if the cleaned string reads the same forward and backward by using an array
# If it does, print ""The string is a palindrome""
# Otherwise, print ""The string is not a palindrome""

# Function to check if string is a palindrome
def is_palindrome(input_string):

    # Convert the string to lowercase to make it case-insensitive
    cleaned_string = input_string.lower()
    
    # Remove non-alphanumeric characters
    # To remove all the characters that aren't letters and numbers I had to read multiple articles and decided that using .isalnum() would make the most sense here.
    # Here are the two main articles I used to learn about .isalnum(): (https://www.geeksforgeeks.org/python-remove-all-characters-except-letters-and-numbers/), (https://flexiple.com/python/remove-non-alphanumeric-characters-python)
    cleaned_string = ''.join(char for char in cleaned_string if char.isalnum())
    
    # Compare characters in the string, comparing the first letter with the last letter, and then each letter in the beginning with the corresponding letter towards the end
    left, right = 0, len(cleaned_string) - 1
    
    # As long as the characters aren't overlapping the code should keep checking each letter
    while left < right:
        if cleaned_string[left] != cleaned_string[right]:
            return ""The string is not a palindrome.""
        left += 1
        right -= 1
    
    return ""The string is a palindrome.""

print(""Welcome to the Palindrome Checker!"")
user_input = input(""Enter a string to check if it's a palindrome: "")
result = is_palindrome(user_input)
print(result)","December Submission: Problem 2: Halil Tunc


# Terms:
# The program will calculate the area of a shape based on user input
# Shapes: Circle, Rectangle, Square, Triangle
# User provides the shape name and the required dimensions

# Plan:
# Define the functions for area calculations
# Prompt the user for the needed numbers to plug into the equation
# Make sure the numbers the user enters arent negative
# Plug in the numbers the user entered into the equation

# Formulas:
# Circle: Area = pi * radius^2
# Rectangle: Area = length * width
# Square: Area = side^2
# Triangle: Area = 0.5 * base * height

import math

# Function to calculate the area of the given shape
def calculate_area():
    print(""I can calculate the area of a shape for you."")
    print(""Which shape do you want me to calculate the area of?"")
    print(""Please pick from: circle, rectangle, square, and triangle"")
    
    # Get user input for the shape
    shape = input(""Enter the name of the shape: "").lower()
    
    # Handling different shapes
    if shape == ""circle"":
        try:
            radius = float(input(""Enter the radius of the circle: ""))
            # The radius shouldn't be less than 0
            if radius < 0:
                print(""The radius cannot be negative. Please try again."")
                return
            area = math.pi * radius ** 2
            print(f""The area of the circle is {area}"")
        # When given a ValueError specifically the code should tell the user that they need to enter a number for the radius.
        except ValueError:
            print(""Invalid input. Please enter a number for the radius."")
    
    elif shape == ""rectangle"":
        try:
            length = float(input(""Enter the length of the rectangle: ""))
            width = float(input(""Enter the width of the rectangle: ""))
            if length < 0 or width < 0:
                print(""The length and width cannot be negative. Please try again."")
                return
            # We are able to keeep using the area variable because for a different shape the user needs to run the instance again, so the variables aren't getting mixed up.
            area = length * width
            print(f""The area of the rectangle is {area}"")
        except ValueError:
            print(""Invalid input. Please enter numbers for length and width."")
    
    elif shape == ""square"":
        try:
            side = float(input(""Enter the side length of the square: ""))
            if side < 0:
                print(""The side length cannot be negative. Please try again."")
                return
            # All the sides in a square are equal to each other so we can just square the length of one side to get the area.
            area = side ** 2
            print(f""The area of the square is {area}"")
        except ValueError:
            print(""Invalid input. Please enter a number for the side length."")
    
    elif shape == ""triangle"":
        try:
            base = float(input(""Enter the base of the triangle: ""))
            height = float(input(""Enter the height of the triangle: ""))
            if base < 0 or height < 0:
                print(""The base and height cannot be negative. Please try again."")
                return
            area = 0.5 * base * height
            print(f""The area of the triangle is {area}"")
        except ValueError:
            print(""Invalid input. Please enter numbers for base and height."")
    
    else:
        print(""Invalid shape. Please choose from circle, rectangle, square, or triangle."")

# Running the main program 
calculate_area()","December Submission: Problem 3: Halil Tunc


# Terms
# If the input string contains all unique characters, return True
# Otherwise, return False. I think that empty strings should return True because technically there are no duplicate characters.

# Plan
# I should make a list of letters that were seen the first time and if a letter in that list is seen again then the code should return False. 
# But, if all the characters are in that list of characters seen the first time then the code should return True.
# The list doesn't need to be in order so I will probably use set()

# Determines if all characters in a string are unique
def has_unique_characters(s):
    # Handle edge cases like empty strings
    if not s:
        # An empty string technically has all unique characters
        return True

    # Use a set to track characters we've seen
    seen_characters = set()

    for char in s:
        # Check if the character has already been seen (is in the set)
        if char in seen_characters:
            # Found a duplicate character
            return False
        # If the character hasn't already been seen then it will be added to the set.
        seen_characters.add(char)
    
    # If we complete the loop without finding duplicates, all characters are unique
    return True

# Prompt the user to enter a string
user_input = input(""Enter a string to check for unique characters: "")
result = has_unique_characters(user_input)

# Output the result
if result:
    print(""All characters in the string are unique!"")
else:
    print(""The string contains duplicate characters."")","December Submission: Problem 4: Halil Tunc


# Side note, I remember doing something like this either in School or in Elite 102

# Terms
# The program needs to generate a random number and guide the user to guess it by providing feedback.

# Plan
# Generate a random number between 1 and 100.
# Prompt the user for a guess.
# Check the guess:
# If correct, congratulate the user and end the game.
# If too high, inform the user and ask for another guess.
# If too low, inform the user and ask for another guess.
# Handle invalid inputs by by making sure the user enters a number that is between 1 and 100.
# Loop until the user guesses correctly.

import random

def guessing_game():
    # Generate a random number between 1 and 100
    target_number = random.randint(1, 100)
    print(""Welcome to the guessing game!"")
    print(""I have picked a number between 1 and 100. Can you guess it?"")

    while True:
        try:
            # Prompt the user for a guess
            user_input = input(""Enter your guess: "")
            
            # Validate input
            guess = int(user_input)
            if guess < 1 or guess > 100:
                print(""Please enter a number between 1 and 100."")
                continue
            
            # Compare guess to target number
            if guess < target_number:
                print(""Too low! Try again."")
            elif guess > target_number:
                print(""Too high! Try again."")
            else:
                print(f""Congratulations! You guessed it right. The number was {target_number}."")
                # End the loop when the guess is correct
                break
        except ValueError:
            # Handle invalid inputs
            print(""Invalid input! Please enter a valid number between 1 and 100."")

# Run the function to test the game.
guessing_game()"
lestercj4@gmail.com,"December Submission: Problem 1: lestercj4@gmail.com


def check_palindrome(word):
    alpha = ""abcdefghijklmnopqrstuvwxyz""
    # make a string of all lowercase letters
    
    word = word.lower()
    
    new_word = """"
    for char in word:
        if char in alpha:
            new_word += char
        else:
            continue
    # remove all non-alphabetic characters
    
    word = new_word
    
    
    reverse = list(word) # convert to list
    reverse.reverse() # use builtin reverse function of list
    reverse = """".join(reverse) # convert back to string
    
    # handle validation and print and return the correct things
    if word == reverse and word != """":
        print(""The string is a palindrome"")
        return True
    else:
        print(""The string is not a palindrome"")
        return False
    
word = input(""Enter a word: "")
check_palindrome(word)","December Submission: Problem 2: lestercj4@gmail.com


print(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of?"")

shape = input(""Circle, Square, Triangle, or Rectangle? "")

if shape.lower() == ""circle"":
    radius = input(""What is the radius of the circle? "")
    
    if not radius.isdigit():
        print(""I don't know how to calculate the area of that shape."")
        exit()
        
    print(""The area of the circle is"", 3.14 * (int(radius)**2))
elif shape.lower() == ""square"":
    side = input(""What is the length of a side of the square? "")
    
    if not side.isdigit():
        print(""I don't know how to calculate the area of that shape."")
        exit()
        
    print(""The area of the square is"", int(side)**2)
elif shape.lower() == ""triangle"":
    base = input(""What is the base of the triangle? "")
    height = input(""What is the height of the triangle? "")
    
    if not base.isdigit() or not height.isdigit():
        print(""I don't know how to calculate the area of that shape."")
        exit()
        
    print(""The area of the triangle is"", (int(base) * int(height)) / 2)
elif shape.lower() == ""rectangle"":
    length = input(""What is the length of the rectangle? "")
    width = input(""What is the width of the rectangle? "")
    
    if not length.isdigit() or not width.isdigit():
        print(""I don't know how to calculate the area of that shape."")
        exit()
        
    print(""The area of the rectangle is"", int(length) * int(width))
else:
    print(""I don't know how to calculate the area of that shape."")","December Submission: Problem 3: lestercj4@gmail.com


""""""
check for duplicates -> function (string)

charcount (for each char in string list[char] + 1)

for char in charcount if charcount[char] > 1 return false else true
""""""

def check_duplicates(string):
    string = string.lower()
    string = string.replace("" "", """")
    
    charcount = {}
    
    for char in string:
        if char in charcount:
            charcount[char] += 1
        else:
            charcount[char] = 1
            
    for char in charcount:
        if charcount[char] > 1:
            return False
        
    return True

print(check_duplicates(""hello""))
print(check_duplicates(""abcdef""))
print(check_duplicates(""hello world""))","December Submission: Problem 4: lestercj4@gmail.com


import random

randomNumber = random.randint(1, 100)
IS_GUESSING = True

while IS_GUESSING:
    guess = int(input(""Enter your guess: ""))
    if guess > randomNumber:
        print(""Your number is too high! Try again."")
    elif guess < randomNumber:
        print(""Your number is too low! Try again."") 
    else:
        print(""Congratulations! You guessed the number!"")
        IS_GUESSING = False"
Shivaang	Rana,"December Submission: Problem 1: Shivaang	Rana

# thought process: # reverse the input and check if the reversed input is the same as the original input # if it is the same then it is a palindrome # if it is not the same then it isn't a palindrome # for empty strings it should return True # for strings with spaces and punctation, i will assume that they should be left alone and not removed as it could change the meaning of the word def palindrome_checker(s1): # store reversed string reverseds1 = """" # go through original string and reverse it for letter in s1: reverseds1 = letter + reverseds1 # check if original is equal to reversed if s1 == reverseds1: print(""The string is a palindrome"") # conditional if it is NOT equal to each other else: print(""The string is not a palindrome"") palindrome_checker(""racecar"")","December Submission: Problem 2: Shivaang	Rana

# thought process: # make a function and ask the user about the shape # make different conditionals handling each shape, its respective inputs and areas # print out the area # rounding for better user readability # handling if a shape that isn't specified in the problem is entered # to use pi import math def area_calculator_assistant(): # used to check if input for shape is one of the valid shapes validShapes = [""circle"", ""triangle"", ""rectangle"", ""square""] print(""I can calculate the area of a shape for you. Whcih shape do you want me to calculate the area of?"") # shape input shape = input(""Type the shape here: "") # make sure that uppercase or caps doesn't interfere with function lowerCaseShape = shape.lower() # if the shape is a circle if lowerCaseShape == ""circle"": # get radius radius = int(input(""What is the radius of your circle? : "")) # calculate area areaCircle = math.pi * ((radius) ** 2) # print out final area using rounding and string concatenation print(""The area is: "" + str(round(areaCircle, 3))) # repeat if lowerCaseShape == ""rectangle"": length = int(input(""What is the length of your rectangle? : "")) width = int(input(""What is the width of your rectangle? : "")) areaRectangle = length * width print(""The area is: "" + str(round(areaRectangle, 3))) # repeat if lowerCaseShape == ""square"": side = int(input(""What is the side length of your square? : "")) areaSquare = side ** 2 print(""The area is: "" + str(round(areaSquare, 3))) # repeat if lowerCaseShape == ""triangle"": base = int(input(""What is the base of your triangle? : "")) height = int(input(""What is the height of your triangle? : "")) areaTriangle = 0.5 * base * height print(""The area is: "" + str(round(areaTriangle, 3))) # checking if the user input for shape is valid if lowerCaseShape not in validShapes: print(""You might've made a typo or inputted a invalid shape. I can only calculate the area of circles, rectangles, squares, and triangles."") # function call back area_calculator_assistant()","December Submission: Problem 3: Shivaang	Rana

# thought process: # make a empty list that stores everything ""we"" have seen # go through each letter # check if the letter we are on is in the seen list we originally made # if the letter we are on is the seen list that means theres duplicates # if it isnt seen, we add it to the list because its a unique letter # if the loop successfully runs in its entirety then we return True # if the loop stops at any point then it returns False since that means there was a duplicate def has_unique_characters(s1): seenLetters = [] for letter in s1: if letter in seenLetters: return False seenLetters.append(letter) return True","December Submission: Problem 4: Shivaang	Rana

# thought process: # use a while loop to make the game continuous # use random library to make computers random num # use input to get user input and cast it to a int to compare value to computer random num # game logic with number of guesses # if statements to tell the user how their guess compares to the computers random num # implement everything import random def num_guessing_game(): # use random library to make computers random num computerGuess = random.randint(1,100) print(""Try to guess the random number between 1 - 100 that I made."") gameOver = False # game logic with number of guesses numOfGuesses = 0 # use a while loop to make the game continuous while gameOver == False: userGuess = int(input(""Your guess: "")) # if statements to tell the user how their guess compares to the computers random num if userGuess > computerGuess: print(""The number is smaller..."") numOfGuesses += 1 if userGuess < computerGuess: print(""The number is higher..."") numOfGuesses += 1 if userGuess == computerGuess: print(""You correctly guessed the number!"") gameOver = True # game logic with number of guesses if numOfGuesses > 10: print(""You ran out of guesses. Better luck next time!"") gameOver = True # calling function num_guessing_game()"
Jose	Carmona,"December Submission: Problem 1: Jose	Carmona

import re#look if string is palindrome#input: string#output: 'string is a palindrome' or 'string is not a palindrome'
#initial look(ignoring case sensitivity):#since capitalization doesn't matter convert string to lower case in ensure no errors#create new string that is reverse of the original string#compare if the new string is equal to the original string#if equal return 'string is a palindrome'#if not equal return 'string is not a palindrome'
#final look(space and punctuation sensitivity)#first remove all space and punctuation from string#im gonna try using re.sub() that i learned from doing leet code problems on my own#re.sub(pattern, replace, string)#pattern(punction and spaces): ^a-zA-Z0-9#a-zA-Z0-9: all letters and numbers and i think numbers are ok to leave in#^: for not in the string#replace: ''#emtpy string in order to remove#trying this because its something i want to get better at using and technically would run faster#than doing something like looping through the string and comparing each character or using the ""in"" operator#to cheack if the character is in the string and then using str.index() over and over to find then remove all cases of that character
def firstIsPalindrome(string):  #make string lower to ignore case sensitivity  string = string.lower()  #creating new string that is reverse of original string  newString = string[::-1]  #comparing if new string is equal to original string  #if equal returning 'string is a palindrome'  #if not equal returning 'string is not a palindrome'  if newString == string:    return 'string is a palindrome'  else:    return 'string is not a palindrome'
 
def finalIsPalindrome(string):  #removing all spaces and punctuation  string = re.sub(r'[^a-zA-Z0-9]', '', string)  #making string lower to ignore case sensitivity  string = string.lower()  #creating new string that is reverse of original string  newString = string[::-1]  #checking if new string is equal to original string    if newString == string:    return 'string is a palindrome'  else:    return 'string is not a palindrome'  #tests#case sensitivityprint(firstIsPalindrome('Racecar'))print(firstIsPalindrome('Taco'))print(firstIsPalindrome('MadAM'))
#spacing between testingprint('' + '\n'*3)
#space and puncuation sensitivityprint(finalIsPalindrome('Racecar'))print(finalIsPalindrome('Taco'))print(finalIsPalindrome('MadAM'))print(finalIsPalindrome('Able was I, I saw Elba'))print(finalIsPalindrome('Never odd or even'))","December Submission: Problem 2: Jose	Carmona

#Area calcuator:#ask and take in the shape of choice from user#depending on shape ask and take in nessecary values/measurments#use measurments to calculate area of users shape
#calculate area of circledef circle_area(radius):  return 3.14 * radius * radius#calculate area of squaredef square_area(side):  return side * side#calculate area of rectangledef rectangle_area(length, width):  return length * width#calculate area of triangledef triangle_area(base, height):  return base * height / 2
#main functiondef Area_calculator():  #requesting shape  shape = input(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of?(circle, square, recangle, triangle)"")  #checking the shape then promting for measurments then printing area of shape using measurments given  if shape == ""circle"":    radius = int(input(""what is the radius of the circle?""))    print(""the area of the circle is "" + str(circle_area(radius)))  elif shape == ""square"":    side = int(input(""What is the side length of the square?""))    print(""The area of the square is "" + str(square_area(side)))  elif shape == ""rectangle"":    length = int(input(""What is the length of the rectangle?""))    width = int(input(""What is the width of the rectangle?""))    print(""The area of the rectangle is "" + str(rectangle_area(length, width)))  elif shape == ""triangle"":    base = int(input(""What is the base of the triangle?""))    height = int(input(""What is the height of the triangle?""))    print(""The area of the triangle is "" + str(triangle_area(base, height)))
#running main functionArea_calculator()","December Submission: Problem 3: Jose	Carmona

#Unique characters in string#take in string#if all characters are unique, return true#else return false#empty string is unique(maybe)
#make empty list to track already seen characters#look at each character in string#check if they are in the list#if not add to list#if yes return false imeadiately#if all characters are unique return true
def unique_characters(string):  seen = [] #empty list to track already seen characters  for char in string: #loop through string    if char in seen: #check if character is in list      return False #return false if character is in list    seen.append(char) #add character to list if not in list
  return True #returns true if all characters are unique
 
#testingprint(unique_characters(""abc""))print(unique_characters(""Hello""))print(unique_characters(""Locos Tacos""))print(unique_characters(""shrimp""))","December Submission: Problem 4: Jose	Carmona

import random#number guessing game#computer picks a number between 1 and 100#player guesses the number#if player guesses too high, computer says ""smaller""#if plaer guesses too low, computer says ""larger""
#import random in order to generate random number between 1 and 100#generate random number between 1 and 100 and save in variable#start a loop #take in player guess#check if player guess is correct#if not then give player hint#repeat until correct or player quits or maybe add guess limit
def main():  print(""welcome to the number guessing game"")  print(""I'm thinking of a number between 1 and 100"")  print(""You have 10 guesses to get it right"")  print()  #generate random number between 1 and 100  number = random.randint(1,100)  #start a loop  for i in range(10):    #take in player guess    guess = int(input(""Guess a number: ""))    #check if player guess is correct    if guess == number:      print(""You got it!"")      break    #if not then give player hint    elif guess > number:      print(""Too high"")    else:      print(""Too low"")  print(""The number was"", number)
#run programmain()"
Aanya Arvind,"December Submission: Problem 1: Aanya Arvind

#This part asks the user for their word and also flips the word
word = input(""What is your word?"")word2= word [::-1]
#the palindrome_finder function compares the word and the flipped word. If the two variables are equal, then it will print accordingly, otherwise, it will print the other option.
def palindrome_finder(word, word2):    if word == word2:        print(""Your word is a palindrome"")    else:        print(""Your word is not a palidrome"")
#I called the function belowpalindrome_finder(word,word2)","December Submission: Problem 2: Aanya Arvind

shape = input(""I can calculate the area of a shape for you. Which shape do you want: circle, rectangle, square, triangle"")
if shape == ""square"":    side_length = int(input(""What is the side length of your square?""))    area_square = side_length*side_length    print (area_square)elif shape == ""triangle"":    base_triangle = int(input(""What is the base of the triangle?""))    height_triangle = int(input(""What is the height of the triangle?""))    area_triangle = base_triangle*height_triangle*0.5    print(area_triangle)elif shape == ""rectangle"":    base_rectangle = int(input(""What is the base of the rectangle?""))    height_rectangle = int(input(""What is the height of the rectangle?""))    area_rectangle = base_rectangle * height_rectangle    print(area_rectangle)elif shape == ""circle"":    radius = int(input(""What is the radius of your circle?""))    area_circle = 3.14*radius*radius    print(area_circle)","December Submission: Problem 3: Aanya Arvind

text = input(""What is your text?"")
def unique_charecters(text):    for i in range (len(text)):        for j in range (i+1,len(text)):            if text[i] == text[j]:                return False    return True","December Submission: Problem 4: Aanya Arvind

import randintnum = randint(1,100)
user_num = int(input(""What number do you guess?""))
if user_num == num:    print(""You  guessed it right!"")elif user_num > num:    print(""Too high"")elif user_num < num:    print(""Too low"")"
joshsal792@gmail.com,"December Submission: Problem 1: joshsal792@gmail.com


'''

Problem 1: Palindrome Checker
Description:

Create a program that checks whether a given string is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forwards and backwards (ignoring spaces, punctuation, and capitalization).

Example:

Input: ""Racecar""

Output: ""The string is a palindrome.""

Input: ""Hello""

Output: ""The string is not a palindrome.""

Instructions:

Use the UCASE strategy to approach this problem. 
Include comments in your code to explain each step.
Remember to consider edge cases, such as empty strings or strings with spaces and punctuation.
Spend no more than 1 hour on this problem.

'''

# string is given 

# any characters and has spaces
# we can ignore all the junk like caps and punctuations and spaces

# reverse a string

# return a string

#hi doesnt work which is good

#tacocat should work

def palindrome(s: str) -> str:  # a function that sets a string as a parameter and ensures a string is returned
    reverse_string = s[::-1] # make a local variable to check the reverse string

    if reverse_string == s: # checks if the reversed string is the same as the normal string in which it returns true or false sequence
        return ""The string is a palindrome."" # returns if true
    else:
        return ""The string is not a palindrome."" # returns if false
    

print(palindrome(""tacocat"")) # just running some tests returns true
print(palindrome(""hello"")) # just running some tests returns false

#everything works also have a video on me explaining","December Submission: Problem 2: joshsal792@gmail.com

# we need an import of math
 
# use a dictionary to keep track of the formulas
 
# ensure input is only string
import math
def calculate_area():    print(""I can calculate the area of a shape for you."")    print(""Which shape do you want me to calculate the area of?"")    print(""Options: circle, rectangle, square, triangle"")        # Get user input    shape = input(""Enter the name of the shape: "").strip().lower() # makes sure no matter the capitilization it still works
        # Dictionary to store shape formulas    shape_formulas = {        ""circle"": lambda: math.pi * float(input(""Enter the radius: ""))**2,        ""rectangle"": lambda: float(input(""Enter the length: "")) * float(input(""Enter the width: "")),        ""square"": lambda: float(input(""Enter the side length: ""))**2,        ""triangle"": lambda: 0.5 * float(input(""Enter the base: "")) * float(input(""Enter the height: ""))    } # had to search this up        # Calculate area based on shape    if shape in shape_formulas:        try:            area = shape_formulas[shape]()            print(f""The area of the {shape} is: {area:.2f}"")  # get the area of the given shape        except ValueError:            print(""Invalid input! Please enter numerical values only."")    else:        print(""Invalid shape! Please choose from circle, rectangle, square, or triangle."") # prints if user input not in the formulas
# Run the programcalculate_area()","December Submission: Problem 3: joshsal792@gmail.com


""""""
Problem 3: Unique Characters in a String
Description:

Create a function that determines whether all characters in a given string are unique. If the string has all unique characters, return True; otherwise, return False.

Example:

Input: ""abcdef""

Output: True

Input: ""hello""

Output: False

Instructions:

Use the UCASE strategy to structure your approach.
Use comments to explain each part of your code.
Think about how to handle different types of input, such as empty strings or strings with spaces.
Spend no more than 1 hour working on this problem.

""""""

# needs to be a string thats given

# if ALL characters are unique the returns True meaning it was not shown before in the string

# if not return false

# boolean and string needed for this 

# function needs string as a parameter

def unique_chars(s: str) -> bool: # function takes in string as parameter and ensure it returns or outputs a bool
    # A set to track characters we've already seen
    checker = set()
    
    # Iterate through each character in the string
    for char in s:
        if char in checker:  # If the character is already in the set, it's not unique
            return False
        checker.add(char)  # Add the character to the set
    return True  # If no duplicates were found, all characters are unique

# Example
print(unique_chars(""havxg""))  # Output True
print(unique_chars(""hello""))  # Output False","December Submission: Problem 4: joshsal792@gmail.com


""""""
Problem 4: Number Guessing Game
Description:

Create a program that plays a guessing game with the user. The program will choose a random number between 1 and 100, and then ask the user to guess the number.

If the user guesses correctly, the program congratulates the player and ends the game.
If the user's guess is too high, the program tells them the answer is smaller and lets them guess again.
If the user's guess is too low, the program tells them the answer is larger and lets them guess again.
Instructions:

Utilize the UCASE strategy to tackle this problem.
Provide comments to illustrate your reasoning and steps.
Make sure to handle invalid inputs gracefully.
Limit your time to 1 hour for this problem.

""""""
import random

def num_guessing_game():
    # Generate a random number between 1 and 100
    chosen_number = random.randint(1, 100)
    
    print(""Welcome to the Number Guessing Game!"")
    print(""I'm thinking of a number between 1 and 100. Can you guess it?"")
    
    while True:  # Infinite loop until the user guesses correctly or exits
        try:
            # Ask for user input and ensures its an integer
            user_guess = int(input(""Enter your guess: ""))
            
            if user_guess < 1 or user_guess > 100:
                print(""Please guess a number between 1 and 100."") # ensures that the input is between 1 and 100
            elif user_guess < chosen_number:
                print(""Too low! Try again."") # if its low it tells the user it's low 
            elif user_guess > chosen_number:
                print(""Too high! Try again."") # if its higher it tells the user its high
            else:
                print(f""Congratulations! You guessed the number {chosen_number}."")
                break  # Exit the loop when guessed correctly
        except ValueError:
            print(""Invalid input! Please enter a valid number."") # happens if user input is not an integer
            
# Run the game
num_guessing_game()"
Everett	Webster,"December Submission: Problem 1: Everett	Webster


# Creating a system to detect palindrome(s)

# define function for the system
def is_palindrome(s):
    # Normalize the string making it lowercase and remove characters
    normalized_str = ''.join(char.lower() for char in s if char.isalnum())

    # Check if normalized string reads the same forwards and backwards
    return normalized_str == normalized_str[::-1]

# Main System
if __name__ == ""__main__"":
    # User input to enter said string
    user_input = input(""Enter a string: "").strip()

    # Edge case: Check if the string is empty using if/else statement
    if not user_input:
        print(""input is empty"")
    else:
        # Check if the string is a palindrome using an if/else statement
        if is_palindrome(user_input):
            print(""string is a palindrome."")
        else:
            print(""string is not a palindrome."")","December Submission: Problem 2: Everett	Webster

# Calculate areas of a shape
# Definte function for calculationdef calculate_area():    # Starting message for user    print(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of?"")    shape = input(""Enter the name of the shape (circle, rectangle, square, triangle): "").strip().lower()    # If statement for circle with radius to determine area    # use formulas for different shapes to use for the calculator    if shape == ""circle"":        radius = float(input(""Enter the radius of the circle: ""))        area = 3.14159 * radius ** 2        print(f""The area of the circle is {area:.2f}."")     # elif statement with inputs for user of length, width to determine area    elif shape == ""rectangle"":        width = float(input(""Enter the width of the rectangle: ""))        length = float(input(""Enter the length of the rectangle: ""))        area = length * width        print(f""The area of the rectangle is {area:.2f}."")    # elif statement with inputs for user to determine side length to get area    elif shape == ""square"":        side = float(input(""Enter the side length of the square: ""))        area = side ** 2        print(f""The area of the square is {area:.2f}."")    # elif statement with inputs for user to determine base and height to calculate area    elif shape == ""triangle"":        base = float(input(""Enter the base of the triangle: ""))        height = float(input(""Enter the height of the triangle: ""))        area = 0.5 * base * height        print(f""The area of the triangle is {area:.2f}."")
    else:        print(""Incorrect shape. Please choose from circle, rectangle, triangle, or square."")# else statement if the shape is invalid, not a shape chosen from the selected 4
# Main Functions for codeif __name__ == ""__main__"":    calculate_area()","December Submission: Problem 3: Everett	Webster

# Create a function to see if all characters are unique
# define a function for the unique charactersdef all_unique_characters(s):    # Compare string length to the set length    return len(s) == len(set(s))  
# Where the function is mainly setif __name__ == ""__main__"":    test_string = input(""Enter a string to check if all characters are unique: "").strip()    # if statement if inputed string was empty    if not test_string:        print(""The input string is empty."")    # elif all are unique, print all unique    elif all_unique_characters(test_string):        print(""All characters in the string are unique."")    else:        # else if strings aren't all unique, they contain duplicates        print(""The string contains duplicate characters."")","December Submission: Problem 4: Everett	Webster

import random
# Create a program for a guessing game
# Define function for the gamedef guessing_game():    # enable system to randomly pick a number    number_to_guess = random.randint(1, 100)      # print statement indicating a number has been chosen for the user to guess    print(""I have chosen a number between 1 and 100. Can you guess what it is?"")
    while True:        try:            # collect users input for the guess            user_guess = int(input(""Enter your guess: ""))            # if statement for which the user guesses too low or high            if user_guess < 1 or user_guess > 100:                print(""Please guess a number between 1 and 100."")            elif user_guess < number_to_guess:                print(""Too low! Try again."")            elif user_guess > number_to_guess:                print(""Too high! Try again."")            else:                print(""Congrats! You guessed the number."")                break        except ValueError:            print(""Invalid input. Please Try Again."")
# Main function of the programif __name__ == ""__main__"":    guessing_game()"
Sami Miri,"December Submission: Problem 1: Sami Miri


def is_palindrome(s):
    # Convert the string to lowercase and remove non-alphanumeric characters
    cleaned_string = ''.join(char.lower() for char in s if char.isalnum())

    # Reverse the cleaned string
    reversed_string = cleaned_string[::-1]

    # Check if the cleaned string is the same as the reversed string
    if cleaned_string == reversed_string:
        return ""The string is a palindrome.""
    else:
        return ""The string is not a palindrome.""

while True:
    # Get user input
    input_string = input(""Enter a string (or type 'exit' to quit): "")
    if input_string.lower() == 'exit':
        print(""Goodbye!"")
        break
    # Call the function and print the result
    print(is_palindrome(input_string))","December Submission: Problem 2: Sami Miri


def calculate_area():
    print(""Which shape do you want to calculate the area of?"")

    while True:
        shape = input(""Enter the shape (circle, rectangle, square, triangle) or type 'exit' to quit: "").lower()

        if shape == 'exit':
            print(""Goodbye!"")
            break

        if shape == 'circle':
            radius = float(input(""Enter the radius of the circle: ""))
            area = 3.14159 * radius ** 2
            print(f""The area of the circle is {area:.2f}."")

        elif shape == 'rectangle':
            length = float(input(""Enter the length of the rectangle: ""))
            width = float(input(""Enter the width of the rectangle: ""))
            area = length * width
            print(f""The area of the rectangle is {area:.2f}."")

        elif shape == 'square':
            side = float(input(""Enter the side length of the square: ""))
            area = side ** 2
            print(f""The area of the square is {area:.2f}."")

        elif shape == 'triangle':
            base = float(input(""Enter the base of the triangle: ""))
            height = float(input(""Enter the height of the triangle: ""))
            area = 0.5 * base * height
            print(f""The area of the triangle is {area:.2f}."")

        else:
            print(""Invalid shape. Please enter circle, rectangle, square, or triangle."")

# Run the program
calculate_area()","December Submission: Problem 3: Sami Miri


def has_unique_characters(s):
    # Convert the string to a set to filter duplicates and compare lengths
    return len(s) == len(set(s))

if __name__ == ""__main__"":
    test_string = input(""Enter a string to check for unique characters: "")
    if has_unique_characters(test_string):
        print(""All characters in the string are unique."")
    else:
        print(""The string has duplicate characters."")","December Submission: Problem 4: Sami Miri


import random

def guessing_game():
    print(""Welcome to the Guessing Game!"")
    number_to_guess = random.randint(1, 100)
    attempts = 0

    while True:
        try:
            user_guess = int(input(""Guess a number between 1 and 100: ""))
            attempts += 1

            if user_guess < 1 or user_guess > 100:
                print(""Please guess a number within the range of 1 to 100."")
            elif user_guess < number_to_guess:
                print(""Too low! Try again."")
            elif user_guess > number_to_guess:
                print(""Too high! Try again."")
            else:
                print(f""Congratulations! You guessed the number in {attempts} attempts."")
                break
        except ValueError:
            print(""Invalid input. Please enter a valid number."")

# Run the game
if __name__ == ""__main__"":
    guessing_game()"
Suhani Shah,"December Submission: Problem 1: Suhani Shah

def is_palindrome(input_string):    # Remove spaces, punctuation, and convert to lowercase    cleaned_string = ''.join(char.lower() for char in input_string if char.isalnum())        # Check if the cleaned string is equal to its reverse    if cleaned_string == cleaned_string[::-1]:        return ""The string is a palindrome.""    else:        return ""The string is not a palindrome.""
input_string = input(""Enter a string: "")result = is_palindrome(input_string)print(result)","December Submission: Problem 2: Suhani Shah

def calculate_area():    print(""I can calculate the area of a shape for you."")    shape = input(""Which shape do you want me to calculate the area of (circle, rectangle, square, triangle)? "").lower()
    if shape == ""circle"":        radius = float(input(""Please enter the radius of the circle: ""))        area = 3.14159 * radius**2        print(f""The area of the circle is {area:.2f}."")
    elif shape == ""rectangle"":        length = float(input(""Please enter the length of the rectangle: ""))        width = float(input(""Please enter the width of the rectangle: ""))        area = length * width        print(f""The area of the rectangle is {area:.2f}."")
    elif shape == ""square"":        side = float(input(""Please enter the side length of the square: ""))        area = side**2        print(f""The area of the square is {area:.2f}."")
    elif shape == ""triangle"":        base = float(input(""Please enter the base of the triangle: ""))        height = float(input(""Please enter the height of the triangle: ""))        area = 0.5 * base * height        print(f""The area of the triangle is {area:.2f}."")
    else:        print(""Sorry, I can't calculate the area of that shape."")
# Example usagecalculate_area()","December Submission: Problem 3: Suhani Shah

def all_unique_characters(input_string):    """"""    Determine whether all characters in a given string are unique.
    Args:        input_string (str): The string to check.
    Returns:        bool: True if all characters are unique, False otherwise.    """"""
    # Step 1: Handle edge cases like empty strings or strings with spaces    if not input_string:        return True  # An empty string has all unique characters
    # Step 2: Normalize the string (remove spaces if they don't count as unique characters)    cleaned_string = input_string.replace("" "", """")
    # Step 3: Use a set to track seen characters    seen_characters = set()
    # Step 4: Iterate through each character in the cleaned string    for char in cleaned_string:        # Step 5: Check if the character is already in the set        if char in seen_characters:            return False  # Duplicate character found                # Step 6: Add the character to the set        seen_characters.add(char)
    # Step 7: If no duplicates are found, return True    return True
# Example usageprint(all_unique_characters(""abcdef""))  # Output: Trueprint(all_unique_characters(""hello""))   # Output: False","December Submission: Problem 4: Suhani Shah

import random
def number_guessing_game():    """"""    A number guessing game where the user guesses a number between 1 and 100.    The program provides feedback on whether the guess is too high, too low, or correct.    """"""        # Step 1: Generate a random number between 1 and 100    target_number = random.randint(1, 100)        # Step 2: Inform the user about the game    print(""Welcome to the Number Guessing Game!"")    print(""I have chosen a number between 1 and 100. Can you guess it?"")
    # Step 3: Loop until the user guesses the correct number    while True:        try:            # Step 4: Prompt the user for a guess            guess = int(input(""Enter your guess: ""))
            # Step 5: Check if the guess is correct            if guess == target_number:                print(""Congratulations! You guessed the correct number."")                break
            # Step 6: Provide feedback if the guess is too high or too low            elif guess > target_number:                print(""Too high! Try again."")            else:                print(""Too low! Try again."")
        except ValueError:            # Step 7: Handle invalid input gracefully            print(""Invalid input. Please enter an integer between 1 and 100."")
# Example usagenumber_guessing_game()"
Abraham Kunnan,"December Submission: Problem 1: Abraham Kunnan

# Function to check if a string is a palindromedef is_palindrome(input_string):    # Remove spaces, punctuation, and convert to lowercase    import string    cleaned_string = ''.join(char.lower() for char in input_string if char.isalnum())
    # Compare the cleaned string with its reverse    return cleaned_string == cleaned_string[::-1]
# Main function to test the programdef main():    # Get user input    input_string = input(""Enter a string to check if it's a palindrome: "").strip()
    # Handle the edge case of an empty string    if not input_string:        print(""The input string is empty. Please enter a valid string."")        return
    # Check if the string is a palindrome and display the result    if is_palindrome(input_string):        print(""The string is a palindrome."")    else:        print(""The string is not a palindrome."")
# Run the programif __name__ == ""__main__"":    main()","December Submission: Problem 2: Abraham Kunnan

# Function to calculate the area of a circledef calculate_circle_area(radius):    import math    return math.pi * (radius ** 2)
# Function to calculate the area of a rectangledef calculate_rectangle_area(length, width):    return length * width
# Function to calculate the area of a squaredef calculate_square_area(side):    return side ** 2
# Function to calculate the area of a triangledef calculate_triangle_area(base, height):    return 0.5 * base * height
# Main function to interact with the userdef main():    print(""I can calculate the area of a shape for you."")    print(""Which shape do you want me to calculate the area of? (circle, rectangle, square, triangle)"")
    # Get the shape from the user    shape = input(""Enter the name of the shape: "").strip().lower()
    # Handle each shape based on the user's input    if shape == ""circle"":        try:            radius = float(input(""Enter the radius of the circle: "").strip())            if radius < 0:                print(""The radius cannot be negative. Please try again."")            else:                area = calculate_circle_area(radius)                print(f""The area of the circle is: {area:.2f}"")        except ValueError:            print(""Invalid input. Please enter a numeric value for the radius."")
    elif shape == ""rectangle"":        try:            length = float(input(""Enter the length of the rectangle: "").strip())            width = float(input(""Enter the width of the rectangle: "").strip())            if length < 0 or width < 0:                print(""Length and width cannot be negative. Please try again."")            else:                area = calculate_rectangle_area(length, width)                print(f""The area of the rectangle is: {area:.2f}"")        except ValueError:            print(""Invalid input. Please enter numeric values for the length and width."")
    elif shape == ""square"":        try:            side = float(input(""Enter the side length of the square: "").strip())            if side < 0:                print(""The side length cannot be negative. Please try again."")            else:                area = calculate_square_area(side)                print(f""The area of the square is: {area:.2f}"")        except ValueError:            print(""Invalid input. Please enter a numeric value for the side length."")
    elif shape == ""triangle"":        try:            base = float(input(""Enter the base of the triangle: "").strip())            height = float(input(""Enter the height of the triangle: "").strip())            if base < 0 or height < 0:                print(""Base and height cannot be negative. Please try again."")            else:                area = calculate_triangle_area(base, height)                print(f""The area of the triangle is: {area:.2f}"")        except ValueError:            print(""Invalid input. Please enter numeric values for the base and height."")
    else:        print(""Sorry, I can only calculate the area for circle, rectangle, square, or triangle."")
# Run the programif __name__ == ""__main__"":    main()","December Submission: Problem 3: Abraham Kunnan

# Function to check if all characters in a string are uniquedef are_characters_unique(input_string):    # Edge case: Handle empty string    if not input_string:        print(""The input string is empty."")        return True
    # Normalize the string by removing spaces and converting to lowercase (if case-insensitivity is needed)    normalized_string = input_string.replace("" "", """").lower()
    # Use a set to track unique characters    seen_characters = set()
    # Iterate through the normalized string    for char in normalized_string:        # If the character is already in the set, it's not unique        if char in seen_characters:            return False        # Add the character to the set        seen_characters.add(char)
    # If no duplicates were found, all characters are unique    return True
# Test casesdef main():    # Example inputs    test_strings = [""abcdef"", ""hello"", """", ""a b c d e"", ""AaBbCc""]
    for test_string in test_strings:        result = are_characters_unique(test_string)        print(f""Input: '{test_string}' -> Output: {result}"")
# Run the programif __name__ == ""__main__"":    main()",
Emeti	Ebere,"December Submission: Problem 1: Emeti	Ebere

def is_palindrome(s):    # Remove spaces, punctuation, and convert to lowercase    cleaned_string = ''.join(char.lower() for char in s if char.isalnum())    # Check if the cleaned string is equal to its reverse    return cleaned_string == cleaned_string[::-1]
# Test casestest_strings = [""Racecar"", ""Hello"", ""A man, a plan, a canal, Panama"", ""No 'x' in Nixon"", """"]
for string in test_strings:    if is_palindrome(string):        print(f'""{string}"" is a palindrome.')    else:        print(f'""{string}"" is not a palindrome.')","December Submission: Problem 2: Emeti	Ebere

def calculate_area():    print(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of?"")    shape = input(""Type the name of the shape (e.g., triangle, rectangle, square, circle): "").lower()
    if shape == ""circle"":        radius = float(input(""Enter the radius of the circle: ""))        area = 3.14159 * radius * radius        print(f""The area of the circle is {area:.2f}"")    elif shape == ""rectangle"":        length = float(input(""Enter the length of the rectangle: ""))        width = float(input(""Enter the width of the rectangle: ""))        area = length * width        print(f""The area of the rectangle is {area:.2f}"")    elif shape == ""square"":        side = float(input(""Enter the side length of the square: ""))        area = side * side        print(f""The area of the square is {area:.2f}"")    elif shape == ""triangle"":        base = float(input(""Enter the base of the triangle: ""))        height = float(input(""Enter the height of the triangle: ""))        area = 0.5 * base * height        print(f""The area of the triangle is {area:.2f}"")    else:        print(""Sorry, I don't know how to calculate the area of that shape."")
# Run the programcalculate_area()","December Submission: Problem 3: Emeti	Ebere

def all_unique_characters(s):    # Use a set to track characters we've seen    seen_characters = set()    for char in s:        if char in seen_characters:            return False        seen_characters.add(char)    return True
# Test casesprint(all_unique_characters(""abcdef""))  # Output: Trueprint(all_unique_characters(""hello""))   # Output: False","December Submission: Problem 4: Emeti	Ebere

import random
def guessing_game():    number_to_guess = random.randint(1, 100)    print(""I'm thinking of a number between 1 and 100. Can you guess what it is?"")
    while True:        try:            guess = int(input(""Enter your guess: ""))            if guess < 1 or guess > 100:                print(""Please enter a number between 1 and 100."")            elif guess < number_to_guess:                print(""Too low! Try again."")            elif guess > number_to_guess:                print(""Too high! Try again."")            else:                print(""Congratulations! You guessed the number!"")                break        except ValueError:            print(""Invalid input. Please enter a valid number."")
# Run the gameguessing_game()"
Dair	Cabrera,"December Submission: Problem 1: Dair	Cabrera

Understand - get the users input and tell them whether their input is a palindrome or not.
 
Clues- Reverse the order of the user's input to see if it's the same as the normal input.
 
Assemble - get the user's input - rearrange the characters in the users input - check if the rearranged input is the same as the original and give an answer based on if they are or aren't the same.
 
Solve-
 
def palindrome():
    
    Word = str(input(""What word do you want to check?:""))## get the user input
    
    Backwards = Word[::-1]## reverse the users input
    
    if Backwards == Word: ## check if the reversed input is the same as the original
        print(f""{Word} is a palindrome"")
    else:
        print(f""{Word} is not a palindrome"")
 
palindrome()
 
Examine- user input was successfully defined as either a palindrome or not a palindrome.","December Submission: Problem 2: Dair	Cabrera

Understand - get the users shape of choice, see their measurements, and give an area with said measurements
 
Clues- use the measurements and formulas based on the shape the user requests to give an accurate 
 
Assemble - get the user's shape - based on their shape, get the measurements for the formula of their chosen shape - use the shape formula to give an accurate area of their shape.
 
Solve-
 
import os
import time
import math
 
def Area_Calculator():
    shape = input(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of?: "")
    if shape == ""circle"":
        Radius = int(input(""What is your radius: ""))
        Area = print(Radius * Radius * math.pi)
    elif shape == ""rectangle"":
        Length = int(input(""What is your length: ""))
        Width = int(input(""What is your width: ""))
        Area = print(Length * Width)
    elif shape == ""square"":
        Side_Length = int(input(""What is your side length: ""))
        Area = print(Side_Length * Side_Length)
    elif shape == ""triangle"":
        Base = int(input(""What is your base length: ""))
        Height = int(input(""What is your Height: ""))
        Area = print(Base * Height / 2)
    else:
        os.system('clear')
        print(""Sorry, thats not a valid shape!"")
        time.sleep(1)
        os.system('clear')
        Area_Calculator()
        
Area_Calculator()
 
Examine- User is able to receive the area of the shape they inputted","December Submission: Problem 3: Dair	Cabrera

Understand - get the users input and tell them whether each character in their input is unique or not
 
Clues- isolate each character and check if one of them repeats themself
 
Assemble - get the user's input - isolate each character into a list - assume that each character is unique until finding a character that repeats itself- if it remains unique, state true, otherwise, state false .
 
Solve-
 
def Unique():
    
    word = str(input(""What word do you want to check?:""))## get the user input
    
    letters = []## list for the input
    
    for l in word :
        letters.append(l)## places each character inputted into the list
    flag = True
    for i in range(len(letters)-1):
        for j in range(i+1,len(letters)):
            if letters[i]==letters[j]:
                flag = False
                break ## assumes that each letter is unique until finding a letter that's been repeated
            
    print(flag)
 
Unique()
 
Examine- user input was successfully able to be identified as whether each character was unique or not","December Submission: Problem 4: Dair	Cabrera

Understand - make the system choose a random number from 1-100 for the user to guess
 
Clues- Make a random number generator and evaluate if the users input is greater or lower than the chosen number
 
Assemble - Make a random number generator to choose a number from 1-100 -  get the users input on their guess for the number - if the number is greater than or less than the generated number, the system will tell the user.
 
Solve-
 
import os
import time
import random
 
number = random.randint(1, 100) ## chooses a number from one to one hundred
 
guess = int(input(""Guess the number: "")) ## asks the user for a guess
 
while guess != number:
    if guess > number:
        os.system('clear')
        guess = int(input(""Guess lower: ""))
    if guess < number:
        os.system('clear')
        guess = int(input(""Guess higher: "")) ## tell the user whether or not their input is greater or lower than the correct answer
 
print(""You win!"")
 
Examine- User is able to receive hints on how to guess the correct number, the game ends once it is chosen."
Elenna Patterson,"December Submission: Problem 1: Elenna Patterson

word = input(""Enter a word: "")length = len(word)
#start at 1 because lists start at 0count = 1istrue = Truefor letter in word:
#break from loop so that once false, can't turn true    if istrue == False:        break    elif letter.isalpha():
#need to make them the same to see if they match        if letter.lower() == word[length-count].lower():            istrue = True        else:            istrue = False    count += 1
if istrue == True:    print(""The string is a palindrome."")else:    print(""The string is not a palindrome."")","December Submission: Problem 2: Elenna Patterson

import mathdef triangle():    base = float(input('What is the base? '))    height = float(input('What is the height? '))    area = (base * height)/2    print(f'The area is: {area}')def square():    sdlength = float(input('What is the side length? '))    area = sdlength * sdlength    print(f'The area is: {area}')def rectangle():    length = float(input('What is the length? '))    width = float(input('What is the width? '))    area = length * width    print(f'The area is: {area}')def circle():    radius = float(input('What is the radius? '))    area = math.pi * (radius * radius)    print(f'The area is: {area}')
shape = input('I can calculate the area of a shape for you. Which shape do you want me to calculate the area of? ')if shape == ""triangle"" or shape == ""Triangle"":    triangle()elif shape == ""square"" or shape == ""Square"":    square()elif shape == ""Rectangle"" or shape == ""rectangle"":    rectangle()elif shape == ""circle"" or ""Circle"":    circle()  
else:
print(""Please try again."")","December Submission: Problem 3: Elenna Patterson

string = input('Enter a string: ')#make empty listcheck = []result = Truefor letter in string:    if letter in check:        result = False        break    else:        result = True    #add to list end of loop so that it runs through each letter through the sequence    check.append(letter)
if result == False:    print(""False"")else:    print(""True"")","December Submission: Problem 4: Elenna Patterson

#import random to use random library
import randomuser_num = int(input('Enter a number 1-100: '))comp_num = random.randint(1, 100)
#loop to make sure that it runs through until correct number
while user_num < 1 or user_num > 100:    user_num = int(input('Please enter a number 1-100: '))
#loop until user == computer
while user_num != comp_num:    if user_num > comp_num:        user_num = int(input('Your number is too high, guess again: '))    elif user_num < comp_num:        user_num = int(input('Your number is too low, guess again: '))
print('You got the correct number!')"
Andy Chen,"December Submission: Problem 1: Andy Chen

def is_palindrome(text): 
#Define a function that identifies if the text is palindrome (is_palindrome) # 
 text = text.lower().replace("" "", """")    return text == text[::-1]
#Convert the input into lowercase and prevent inaccurate results because of spacing#
text = input(""Enter a string: "")if is_palindrome(text):    print(f""{text} is a palindrome."")else:    print(f""{text} is not a palindrome."")
#Let the user input the word then it will check and tell you if the word is a palindrome or not#","December Submission: Problem 2: Andy Chen

def calulate_shape():
#define or call out the function#     shape = input(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of? triangle, rectangle, square, circle "") 
#Ask the user to pick out the four options provided#     if shape == ""triangle"":        base = float(input(""Enter the base of the triangle: ""))        height = float(input(""Enter the height of the triangle: ""))        area = 0.5 * base * height        print(f""The area of the triangle is {area}."") 
#If their input is a triangle they will be needed to provide the base and the height of the triangle. Then the system will use the data and multiply them together with 0.5 to the get to area which they will present to the user. #     elif shape == ""rectangle"":        length = float(input(""Enter the length of the rectangle: ""))        width = float(input(""Enter the width of the rectangle: ""))        area = length * width        print(f""The area of the rectangle is {area}."")
#If the user input was a rectangle they need to provide the base stat which is the length and width of the rectangle. Which the system will be using to get the area by multiplying them together.#    elif shape == ""square"" :        side = float(input(""Enter the side of the square: ""))        area = side * side         print(f""The area of the square is {area}."")
#The square is the most easiest where the user needs to provide the one factor for the formula and for the system it will only need to do a one step equation.#     elif shape == ""circle"":        radius = float(input(""Enter the radius of the circle: ""))        area = 3.14159 * radius * radius        print(f""The area of the circle is {area}."") 
#The circle is the relative most hardest in the formula of the given where the system required to have radius to be identified and multiply the radius with itself then with the PI(3.14)#     else:        print(""Sorry, I don't know how to calculate the area of that shape."") 
#In case the user enter a wrong option and the function will end while they tell them that they have enter an option that wasn't in the system.#","December Submission: Problem 3: Andy Chen

def is_unique(string):# Create an empty set to store the characters of the string # 
    char_set = set()        # Iterate through each character in the string    for char in string:        # If the character is already in the set, return False        if char in char_set:            return False        # Otherwise, add the character to the set        else:            char_set.add(char)        # If all characters are unique, return True    return True
#Allow the user to enter their string to check if it is unique 
string = input(""Enter a string: "")print(is_unique(string))
#If the loop completes without finding duplicates, the function will return True. Simple word: it will check for repeated letters and if there isn't it will be identified as a unique string.","December Submission: Problem 4: Andy Chen

import random
*Import the random function or library 
def guessing_game():    """"""    Plays a guessing game with the user.    """"""    secret_number = random.randint(1, 100)    num_guesses = 0
* gerenate a random number using the random library in a range from one to 100. 
    print(""I'm thinking of a number between 1 and 100."")
    while True:
*until the user gives the number the situation will remain True.         try:            guess = int(input(""Take a guess: ""))            num_guesses += 1
*For every guess it adds up in the storage it adds one to category that hold the number of guess. 
            if guess == secret_number:                print(f""Congratulations! You guessed the number in {num_guesses} tries."")
*Guess correct it will displayed the number of tries you made and end the game                break            elif guess < secret_number:                print(""Too low! Try again."")
*If the user's guess is too low, the program tells them the answer is larger and lets them guess again.
            else:                print(""Too high! Try again."")
*If the user's guess is too high, the program tells them the answer is smaller and lets them guess again.
        except ValueError:            print(""Invalid input. Please enter a number."")
guessing_game()
*calls the game"
Samantha	Yengst,"December Submission: Problem 1: Samantha	Yengst

# Problem 1: Palindrome Checker# Description:
# Create a program that checks whether a given string is a palindrome. A # palindrome is a word, phrase, number, or other sequence of characters that # reads the same forwards and backwards (ignoring spaces, punctuation, and # capitalization).
# Example:
# Input: ""Racecar""
# Output: ""The string is a palindrome.""
# Input: ""Hello""
# Output: ""The string is not a palindrome.""
# Instructions:
# Use the UCASE strategy to approach this problem. # Include comments in your code to explain each step.# Remember to consider edge cases, such as empty strings or strings with spaces # and punctuation.# Spend no more than 1 hour on this problem.
 
# Palindrome Checker Function (With all the nuts and bolts (With commentary))def palindrome_checker():    word = input(""Please enter word to check: "")# input from user        if (word == """"): # Check for empty string        print(""The string is empty"")    elif (is_palindrome(word)):        print(""The string is a palindrome."")    else:        print(""The string is not a palindrome."")        trans()
def repeat():    again = input(""Go again?[Y/N]: "").upper()    trans()    if ((again) == 'Y'):        return True    else:        return False # End if user inputs anything except for 'Y'
def trans():    # make space- reset console    print()    print(""~~~~~~~~~~~~"")    print()# Okay- so, get a word from user (later problem)
# palindrome function?    # is word same forward and backwards?         # Ignore spaces and punctuation...... how?    # compare the og string with a string that's reversed    # return true falsedef is_palindrome(t_string):    og = remove_invalid_chars(t_string)    new = reverse_string(og)    if (og == new):        return True    return False
# reverse function :'D    # input: a string (no spaces or punctuation)    # output: that string but reversed (in: helloworld- out: dlrowlleh)def reverse_string(t_string):    og = t_string    new = """"    for i in range(len(og)-1, -1, -1): # range(start, stop, step)        new = new + og[i]    return new        
# remove spaces and punctuation function?    # input: a string    # output: the string with spaces and punctuation removed (also all lowercase    # cuz why not)def remove_invalid_chars(t_string):    # Remove characters by filtering out a list of characters we want removed    punct = [""."", "","", ""!"", ""?"", "" "", ""/""]     og = t_string.lower() # set this to param    new = """" # to be returned    invalid = False        for i in range(len(og)):        invalid = False        for j in range(len(punct)):            if (og[i] == punct[j]): # check value of i isn't an invalid character                invalid = True        if (not(invalid)):            new = new + og[i]        return new
def main():    # main function :'D        # print(remove_invalid_chars(""tH,e s.tOry!""))        # print(reverse_string(""Hello""))        # print(is_palindrome(""Racecar""))    # print(is_palindrome(""Hello""))        again = True    while again:        palindrome_checker()        again = repeat()    print(""Have a great day!"")
main() # aha, I know this function isn't really necessary but it makes my brain happy :'D","December Submission: Problem 2: Samantha	Yengst

# ask to calc shape
#only 4 different shapes to calc# each shape different function? kinda-# can double up square and rectangle# fun to calc area of quadlaterial (b, h)# A = b * h
# calc area of sq# call quad function but side = b and side = h
# calc area of triangle# could do base * 1/2 = b, height = h but don't want to confuse others# A = (1/2)b*h
import math
 
# Non-specific commentary# prompt functiondef prompt():    print(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of?"")    u_shape = pick_shape() # Will always return valid input from user        indent()        area = find_formula(u_shape)        indent()        print(f""Area of {u_shape} is {area}."")    
 
def pick_shape():    shapes = [""triangle"", ""rectangle"", ""square"", ""circle""]    u_shape = """"    while not(u_shape in shapes): # validate user input        u_shape = input(""Please enter the name of a shape. [Triangle, Rectangle, Square, Circle]: "")        u_shape = u_shape.lower()            return u_shape
# function that takes in the name of shape and figures out what functions to call to get inputs and calc and stuffdef find_formula(shape):    a = 0    if (shape == ""triangle""): # call triangle functions        b, h = get_user_inputs_tri()        a = calc_triangle(b, h)    elif (shape == ""circle""): # call circle functions        r = get_user_inputs_cir()        a = calc_cir(r)    elif (shape == ""square""): # call square functions        s = get_user_inputs_sq()        a = calc_rectangle(s, s)    elif (shape == ""rectangle""): # call rectangle functions        l, w = get_user_inputs_rectangle()        a = calc_rectangle(l, w)    else:        print(""Something went wrong. Please try again."") # if all other conditions fail.        return a
# If they choose circle, prompt for the radius.# If they choose rectangle, prompt for the length and width.# If they choose square, prompt for the side length.# If they choose triangle, prompt for the base and height.def get_user_inputs_tri():    b = good_number(""base"", ""Triangle"")    h = good_number(""height"", ""Triangle"")    return b, h
def get_user_inputs_cir():    r = good_number(""radius"", ""Circle"")    return r
def get_user_inputs_rectangle():    l = good_number(""length"", ""Rectangle"")    w = good_number(""width"", ""Rectangle"")    return l, w
def get_user_inputs_sq():    s = good_number(""side length"", ""Square"")    return s
# function to make sure user inputs a good numberdef good_number(var, shape):    while True:        print(f""What is the {var} of the {shape}?: "")        num = input(""(Please enter a number greater than 0): "")        try:            num = int(num)        except:            print(""Something went wrong. Please try again."")            print()        else:            if (num < 1):                print(""Please chose a number greater than 0."")                print()            else:                return num
# Calc areas when given lengthsdef calc_triangle(b, h):    return (1/2)*b*h # A = (1/2)bh
def calc_rectangle(l, w):    return l*w # A = l * w
def calc_cir(r):    return math.pi *(r*r) # A = pi(r^2)
# for beautiful formattingdef indent():    print()    print(""~~~"")    print()
prompt() # let the magic begin","December Submission: Problem 3: Samantha	Yengst

# TLDR: replace() to remove spaces# okay the directions point out that I should consider cases where the string# has spaces which makes me think that spaces shouldn't be considered when# checking to make sure every character is unique, so I probably have to# figure out how to remove all spaces before checking# lol. this already exists in python. Thank you replace(oldvalue, newvalue) :)
# TLDR: empty string = False# I mean, by deafult the code is *probably* going to detrimine that an empty# string is in-fact a string that has all unique characters, and while I# personally agree since no characters can be doubled in an empty string, I think# I'm gonna make a special case where if the string is empty it just tells you# that you submitted an empty string. (if statement for brownie points lets goo.)
# TLDR: Double for loop to solve duplicates # okay it sounds like I need to compare every character with# every other character in the string and if any two characters match, # condition is false since not all characters are unique.# ....soooo, double for loop? *yawn emoji*
# Ngl sounds like I could do this in a single function :/
def check_unique_characters(user_str):    a_str = user_str.replace("" "", """") # set func var to user input w/o spaces        # Quick check for empty strings.    if (a_str == """"):        print(""Invalid input: Empty string (Or string with only spaces). Please try again."")        return False        # Aaaand finally, combing through string for any dulpicate characters    for i in range (0, len(a_str)-1, 1): # range(start, stop, step)        for j in range (i+1, len(a_str), 1): # range(start, stop, step)            if (a_str[i] == a_str[j]):                return False # Found repeating character    return True # did not find repeating character
u_input = str(input(""Please input a string: ""))# strings are fun because i can just cast to string and no matter what# the user actually input, it will come out as a valid input for string functions
print(check_unique_characters(u_input))","December Submission: Problem 4: Samantha	Yengst

import random # so I can use random numbers :)
# so I need a loop that lets the user keep guessing until they get it right# while loop until they get it# then congrats after while loop
# I need a system to process user input.# user is only allowed to input int values, so throw error when it's not a int# input. (I think I had to solve the problem of getting good int inputs from# another problem (problem 2) so I might be able to reuse some of that code here)
# it wants a random number between 1 and 100 so I can use the random class to# give me a random int :'D
# input: no input# output: valid int between 1-100def good_number():    while True: # will loop until value is returned from function         num = input(""Please guess a number between 1 and 100: "")        try: # code to test            num = int(num)        except: # error            print(""Something went wrong. Please try again."")            print()        else: # no error            if (num < 1 or num > 100):                print(""Please chose a number between 1 and 100."")                print()            else:                return num
 
# okay- so, detrimine number to guess# let user make a guess# verify that the user made a good input# compare guess to mystery number# tell the user if they guess too high or low (if the answer is smaller or larger)# repeat steps 2-5 until they guess the mystery number# Congratulate the play for guessing correctly# End game
# input: no input# output: no output# Will run a game of high or low & print output to user :)
def game():    myst_num = random. randint(1, 100) # random number between 1 and 100    guessed = False      while not(guessed):        user_guess = good_number() # (Should) Will always be a number between 1 and 100                if (user_guess == myst_num):            guessed = True        elif (user_guess > myst_num):            print(""Uh Oh! Silly you, you guessed too high! :)"")            print(f""The number you're looking for is *less* than {user_guess}"")        elif (user_guess < myst_num):            print(""Uh Oh! Silly you, you guessed too low! :)"")            print(f""The number you're looking for is *greater* than {user_guess}"")        else: # should be technicially impossible but justtt in caseee ^^            print(""Okay, idk how this happened,"")            print(""but you *definiately* screwed *something* up,"")            print(""so how bout you try again"")            print(""and lets not break my game this time :)"")                print() # indent for formatting.            # If we're at this point, the user guessed correctly    print(f""Congratulations! The number was in fact {myst_num}"")    # Did this *have* to be a function? Nahh, this is python y'all.# But it makes my brain happy so that's what we're doign :)game() # Okay goodnight :)"
Ryan,"December Submission: Problem 1: Ryan

#create a function that determines if a string is a palidrome #input: racecar#output: the string is a palidrome
#palidrome is a sequence that reads the same forwards and backwards 
#Create an input for the functionpalidrome = 'racecar'
#create a function that reverses the inputpalidrome2 = reversed(palidrome)
#compare the two strings#if they are the same, print ""the string is a palidrome""if list(palidrome) == list(palidrome2):  print('the string is a palidrome')  #if they are not the same, print ""the string is not a palidrome""elif list(palidrome) != list(palidrome2):  print('the string is not a palidrome')","December Submission: Problem 2: Ryan

#create a function that can calculate the area of certain shapes #input: shape, length, width, radius#output: area of shape
#return area of shape#area = length*width, (length*width)/2, or 3.14*radius*radius
#make a def for circle that takes in radius and finds areadef circle():  radius = input(""what is the radius?"")  area = int(radius)*int(radius)*3.14  print(f""the area of the circle is {area}"")
#make a def for rectangle that takes in length and width and finds areadef rectangle():  length = input(""what is the length?"")  width = input(""what is the width?"")  area = int(length)*int(width)  print(f""the area of the rectangle is {area}"")
#make a def for square that takes in length and width and finds areadef square():  length = input(""what is the length?"")  width = input(""what is the width?"")  area = int(length)*int(width)  print(f""the area of the square is {area}"")
#make a def for triangle that takes in base and height and finds areadef triangle():  base = input(""what is the base?"")  height = input(""what is the height?"")  area = int(base)*int(height)/2  print(f""the area of the triangle is {area}"")
#make input function to determine the shapeshape = input(""I can calculate the area of a shape for you. Which shape do you want me to calculate the area of?"")
#use if statement to determine what the correct calculator the user wants for shapeif shape == ""circle"":  circle()elif shape == ""rectangle"":  rectangle()elif shape == ""square"":  square()elif shape == ""triangle"":  triangle()else:  print(""choice is invalid, try again"")","December Submission: Problem 3: Ryan

#create a function that determines if all characters are different#input: string of characters#output: true or false
#if all characters are different, print true#if all characters are not different, print false
#create string for function to comparestring = 'abcdef'
#creat empty string to store all charactersstring2 = ''
#use a for loop to compare each characterdef characters(string,string2): for i in string:  if i not in string2:    string2+=i  if string == string2:    return False  elif string != string2:    return True
#print characters(string,string2)print(characters(string,string2))","December Submission: Problem 4: Ryan

#create a guessing game for the user to guess a number between 1 to 100#input: user number guess#output: lower, higher, you got it!
#The user has to guess the number#if the guess if too high, the user is told to guess lower#if the guess is too low, the user is told to guess higher#the game goes on until user guesses the number
#import random so the function can pick a random numberimport random
#create a function that will generate a random numbernumbers = list(range(1,101))#use random.choice to pick a random number picked_number = random.choice(numbers)
def guess(picked_number):  #make the user pick a number   user_guess = int(input(""guess a number from 1-100:""))  #compare the numbers and if the user guess is too high, tell the user to guess lower  if user_guess > picked_number:    print(""too high, guess lower"")    guess(picked_number)  #compare the numbers and if the user guess is too low, tell the user to guess higher  elif user_guess < picked_number:    print(""too low, guess higher"")    guess(picked_number)  #compare the numbers and if the user guess is correct, tell the user they got it  elif user_guess == picked_number:    print(""congrats, you got it!"")  else:  #if the input is invalid, tell the user to input a valid number and try again    print(""invalid input, try again"")    guess(picked_number)
#print the functionguess(picked_number)"
"Some Name""",,,,"import os
import glob
import csv
import re
from bs4 import BeautifulSoup

# Update these paths if your folder names are different
PROBLEM_DIRECTORIES = {
    1: ""./html_files_1"",
    2: ""./html_files_2"",
    3: ""./html_files_3"",
    4: ""./html_files_4"",
}

# Output CSV file
output_csv = ""./extracted_data.csv""

# Regular expression to find ""Problem X"" (where X is 1, 2, 3, or 4)
problem_number_regex = re.compile(r""Problem\s*([1-4])\s*:"")

def extract_student_data(full_text):
    """"""
    Parse the text to find:
        - Student name
        - The remaining text (with header line removed).

    Returns a tuple of (name, problem_number, remaining_text).
    If the pattern is not found, returns (None, None, full_text).
    """"""
    # Split into lines for easier parsing
    lines = full_text.splitlines()

    name = None
    problem_num = None

    # We look for a line containing ""December Submission:"" and ""Problem X:""
    for i, line in enumerate(lines):
        if ""December Submission:"" in line and ""Problem"" in line:
            match = problem_number_regex.search(line)
            if match:
                problem_num = int(match.group(1))  # 1, 2, 3, or 4

            # Name is after the last colon
            parts = line.split("":"")
            name = parts[-1].strip()

            # Remove this line from the text so we don't keep it in the ""remaining text""
            del lines[i]
            break

    # Rejoin the remaining lines as the submission text
    remaining_text = ""\n"".join(lines).strip()

    return name, problem_num, remaining_text

# Dictionary to store all submissions
# Key: student name (str), Value: dict of problem_number -> text
submissions = {}

# Process each problem folder
for problem_number, folder_path in PROBLEM_DIRECTORIES.items():
    # Gather all .html files in the current folder
    html_files = glob.glob(os.path.join(folder_path, ""*.html""))
    
    for html_file in html_files:
        with open(html_file, ""r"", encoding=""utf-8"", errors=""ignore"") as f:
            content = f.read()

        # Extract full text from HTML
        soup = BeautifulSoup(content, ""html.parser"")
        full_text = soup.get_text()

        # Extract student name, problem number, and the submission text
        name, extracted_problem_num, remaining_text = extract_student_data(full_text)

        # If we didn't find anything in the text, we can set defaults
        if not name:
            name = ""Unknown""
        # If the text didn't have ""Problem X:"", we fall back to the folder's problem_number
        if not extracted_problem_num:
            extracted_problem_num = problem_number

        # Initialize a sub-dict for this student if not present
        if name not in submissions:
            submissions[name] = {}

        # Store the text under the correct problem number
        submissions[name][extracted_problem_num] = remaining_text

        print(f""Processed {html_file} => Name='{name}', Problem={extracted_problem_num}"")

# Now write a CSV with columns: Name, Problem 1, Problem 2, Problem 3, Problem 4
columns = [""Name"", ""Problem 1"", ""Problem 2"", ""Problem 3"", ""Problem 4""]

with open(output_csv, ""w"", newline="""", encoding=""utf-8"") as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow(columns)

    # For each student, gather the problem texts (1..4), defaulting to empty string if missing
    for name, problems_dict in submissions.items():
        p1_text = problems_dict.get(1, """")
        p2_text = problems_dict.get(2, """")
        p3_text = problems_dict.get(3, """")
        p4_text = problems_dict.get(4, """")

        writer.writerow([name, p1_text, p2_text, p3_text, p4_text])"
